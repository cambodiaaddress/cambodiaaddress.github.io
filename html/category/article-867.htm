<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://cambodiaaddress.github.io/html/category/article-867.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>ASP.NET Core高性能服务器HTTP.SYS - CambodiaAddress</title>
        <link rel="icon" href="/assets/addons/xcblog/img/cambodiaaddress/favicon.ico" type="image/x-icon"/>
    <!-- web-fonts -->
    <link href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,700,500' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
    <!-- off-canvas -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/mobile-menu.css" rel="stylesheet">
    <!-- font-awesome -->
    <link href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet">
    <!-- Flat Icon -->
    <link href="fonts/flaticon/flaticon.css" rel="stylesheet">
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/style.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?8022148af1f0848b976ee8f0e7db4477";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <div id="main-wrapper">
        <!-- Page Preloader -->
        <div id="preloader">
            <div id="status">
                <div class="status-mes"></div>
            </div>
        </div>
        <div class="uc-mobile-menu-pusher">
            <div class="content-wrapper">
                                <!-- .navbar-top -->
                <nav class="navbar m-menu navbar-default">
                    <div class="container">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse-1">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                                                        <a class="navbar-brand" href="/">Cambodia Address</a>
                                                    </div>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <div class="collapse navbar-collapse" id="#navbar-collapse-1">
                            <ul class="nav navbar-nav navbar-right main-nav">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div>
                        <!-- .navbar-collapse -->
                    </div>
                    <!-- .container -->
                </nav>
                <!-- .nav -->
                <section class="single-page-title single-page-title-about">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <h2>ASP.NET Core高性能服务器HTTP.SYS</h2>
                            </div>
                        </div>
                    </div>
                </section>
                <!-- .page-title -->
                <section class="featured-box">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-9">
                                <ol class="breadcrumb">
                                  <li><a href="/">首页</a></li>
                                  <li><a href="/html/category/">文章分类</a></li>
                                  <li class="active">正文</li>
                                </ol>

                                  				  				  				<p>如果我们只需要将ASP.NET CORE应用部署到Windows环境下，并且希望获得更好的性能，那么我们选择的服务器类型应该是HTTP.SYS。Windows环境下任何针对HTTP的网络监听器/服务器在性能上都无法与HTTP.SYS比肩。</p> <blockquote> <p>一、HTTP.SYS简介<br /> 二、MessagePump &amp; UseHttpSys<br /> 三、HttpSysOptions</p> </blockquote> <h1><font size="4">一、HTTP.SYS简介</font></h1> <p>HTTP.SYS本质上就是一个HTTP/HTTPS监听器，它是Windows网络子系统的一部分，是一个在内核模式下运行的网络驱动。HTTP.SYS对应的驱动文件为“%WinDir\System32\drivers\http.sys”，不要小看这个只有1M多的文件，Windows系统针对HTTP的监听、接收、转发和响应大都依赖它。如图1所示，HTTP.SYS建立在Windows网络子系统针对TCPIP协议栈的驱动（TCPIP.SYS）之上，并为用户态运行的IIS提供基础的HTTP通信服务。前面我们使用的HttpListener也建立在HTTP.SYS上面。</p> <p><a href="https://img2022.cnblogs.com/blog/19327/202204/19327-20220406101327936-1810276076.png" rel="nofollow" class="fancybox" data-fancybox-group="button"><img fetchpriority="high" decoding="async" width="402" height="186" title="image" style="border: 0 currentColor; border-image: none; display: inline; background-image: none" alt="image" src="http://img.555519.xyz/uploads3/20220510/da4da1b7e5a568b58538b64816655731.jpg"></a><br />图1 HTTP.SYS</p> <p>由于HTTP.SYS是在操作系统内核态运行，所以它提供的性能优势是其他在用户态运行的同类产品无法比拟的。由于它自身提供响应缓存，所以在缓存命中的情况下根本不需要与用户态进程进行交互。它还提供了请求队列（Request Queue），如果请求的目标进程（比如IIS的工作进程）处于活动状态，它可以直接将请求分它给它，否则请求会暂存于队列中等待目标进程来提取，这样的工作模式既减少了内核态与用户态之间的上下文切换，也确保请求不会丢失。HTTP.SYS还提供连接管理，流量限制，诊断日志等功能，并提供针对Kerberos的Windows认证。</p> <p>由于HTTP.SYS是一个底层共享的网络驱动，它有效地解决了端口共享的问题。用户态进程会使用地址前缀（含端口号）“接入”HTTP.SYS，后者利用提供的地址前缀来转发请求，多个用户态进程只要保证提供的地址前缀不同就可以了，所以它们可以使用相同的端口号。端口共享使每个用户进程都可以使用标准的80/443端口。</p> <h1><font size="4">二、MessagePump &amp; UseHttpSys</font></h1> <p>基于HTTP.SYS的服务器体现为如下这个MessagePump类型，它内部使用一个HttpSysListener对象采用注册的监听地址接入HTTP.SYS。MessagePump提供针对HTTP 1.X、HTTP 2以及HTTPS的支持。对于Windows Server 2022和Windows 11，还支持HTTP 3。IWebHostBuilder接口如下这两个UseHttpSys扩展方法用来完成针对MessagePump的注册。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span> MessagePump : IServer, IDisposable {<span style="color: rgba(0, 0, 255, 1)">internal</span> HttpSysListener Listener {<span style="color: rgba(0, 0, 255, 1)">get</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span> IFeatureCollection Features {<span style="color: rgba(0, 0, 255, 1)">get</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span> MessagePump(IOptions&lt;HttpSysOptions&gt; options, ILoggerFactory loggerFactory,IAuthenticationSchemeProvider authentication);<span style="color: rgba(0, 0, 255, 1)">public</span> Task StartAsync&lt;TContext&gt;(IHttpApplication&lt;TContext&gt; application,CancellationToken cancellationToken);<span style="color: rgba(0, 0, 255, 1)">public</span> Task StopAsync(CancellationToken cancellationToken);<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> Dispose(); }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">class</span> WebHostBuilderHttpSysExtensions {     [SupportedOSPlatform("<span style="color: rgba(139, 0, 0, 1)">windows</span>")]<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span> IWebHostBuilder UseHttpSys(<span style="color: rgba(0, 0, 255, 1)">this</span> IWebHostBuilder hostBuilder);      [SupportedOSPlatform("<span style="color: rgba(139, 0, 0, 1)">windows</span>")]<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span> IWebHostBuilder UseHttpSys(<span style="color: rgba(0, 0, 255, 1)">this</span> IWebHostBuilder hostBuilder,Action&lt;HttpSysOptions&gt; options); }</pre> </div> <p>如下所示的是在Minimal API下调用UseHttpSys注册MessagePump 服务器的例子。</p> <div class="cnblogs_code"> <pre>var builder = WebApplication.CreateBuilder(args); builder.WebHost.UseHttpSys(); var app = builder.Build(); app.MapGet("<span style="color: rgba(139, 0, 0, 1)">/</span>", () =&gt; "<span style="color: rgba(139, 0, 0, 1)">Hello World</span>"); app.Run();</pre> </div> <h1><font size="4">三、HttpSysOptions</font></h1> <p>在调用UseHttpSys扩展方法注册基于HTTP.SYS的MessagePump服务器的时候，我们可以利用提供的Action&lt;HttpSysOptions&gt;委托对相关的配置选项进行设置。HttpSysOptions的UrlPrefixes属性返回注册的监听地址前缀，但是最终是否这种直接注册到服务器上的监听器地址，取决于IServerAddressesFeature特性的PreferHostingUrls属性，这一点与KestrelServer是一致的。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> HttpSysOptions {<span style="color: rgba(0, 0, 255, 1)">public</span> UrlPrefixCollection 	    UrlPrefixes {<span style="color: rgba(0, 0, 255, 1)">get</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span> RequestQueueMode 		RequestQueueMode {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">string</span>? 			RequestQueueName {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">long</span> 			RequestQueueLimit {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span> AuthenticationManager 	Authentication {<span style="color: rgba(0, 0, 255, 1)">get</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span> ClientCertificateMethod 	ClientCertificateMethod {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">long</span>? 			MaxConnections {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">long</span>? 			MaxRequestBodySize {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">int</span> 			    MaxAccepts {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span> Http503VerbosityLevel 	Http503Verbosity {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span> TimeoutManager 		Timeouts {<span style="color: rgba(0, 0, 255, 1)">get</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">bool</span> 			AllowSynchronousIO {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">bool</span> 			EnableResponseCaching {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">bool</span> 			ThrowWriteExceptions {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">bool</span> 			UnsafePreferInlineScheduling {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">bool</span> 			UseLatin1RequestHeaders {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; } }</pre> </div> <p>HTTP.SYS利用请求队列来存放待处理的请求，我们可以利用RequestQueueMode属性决定创建一个新的队列或者使用现有的队列。该属性类型为如下这个RequestQueueMode枚举，枚举项Create表示创建新的队列，Attach表示使用现有的以RequestQueueName属性命名的对象，如果该队列不存在会抛出异常。CreateOrAttach提供了一个折中方案，如果指定名称的队列不存在就创建一个以此命名的新队列。该属性的默认值为Create，RequestQueueName属性默认值为Null（代表匿名队列），RequestQueueLimit属性表示队列的容量，默认值为1000。HttpSysOptions承载的很多配置选项只会应用到新创建的请求队列上。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">enum</span> RequestQueueMode {     Create,     Attach,     CreateOrAttach }</pre> </div> <p>HttpSysOptions的Authentication属性返回一个AuthenticationManager对象，我们利用它完成针对认证的设置。我们可以利用Schemes属性设置认证方案，该属性默认为None。如果不允许匿名访问，可以将AllowAnonymous属性设为False。如果将AutomaticAuthentication属性返回True（默认值），认证用户将自动赋值给HttpContext上下文的User属性。AuthenticationDisplayName属性用来为认证方案提供一个显示名称。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">sealed</span><span style="color: rgba(0, 0, 255, 1)">class</span> AuthenticationManager {<span style="color: rgba(0, 0, 255, 1)">public</span> AuthenticationSchemes 	Schemes {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">bool</span> 			AllowAnonymous {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">bool</span> 			AutomaticAuthentication {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">string</span>? 			AuthenticationDisplayName {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; } }  [Flags]<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">enum</span> AuthenticationSchemes {     None 				= 0x0,     Digest 				= 0x1,     Negotiate 				= 0x2,     Ntlm 				= 0x4,     Basic 				= 0x8,     Anonymous 				= 0x8000,     IntegratedWindowsAuthentication 	= 0x6 }</pre> </div> <p>HTTPS站点可以要求提供证书来对其实施认证，HttpSysOptions的ClientCertificateMethod属性用于设置请求客户端证书的方式，该属性返回如下这个ClientCertificateMethod枚举。在.NET 5之前，客户端证书采用Renegotation的方式来提取的，Renegotiation是在已经建立的SSL/TLS连接上再次发起的一轮“协商握手”，这种方式对应AllowRenegotation枚举项。由于可能带来一些性能和死锁的问题，这种方式在.NET 5之后已经默认禁止了，目前默认的方式是创建SSL/TLS连接的初始阶段就提取该证书，这种方式对应AllowRenegotation枚举项，这也是ClientCertificateMethod属性的默认值。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">enum</span> ClientCertificateMethod {     NoCertificate,     AllowCertificate,     AllowRenegotation }</pre> </div> <p>HttpSysOptions的MaxConnections和MaxRequestBodySize属性分别表示最大连接数和请求主体内容的最大字节数，如果它们被设置为Null，意味着忽略对应的限制。这两个属性的默认值分别Null和30,000,000。MaxAccepts属性表示接受的最大并发请求，默认值为当前处理器数量的5倍。如果并发请求数量超过限流设置，后续请求会拒绝处理，此时服务器会直接回复一个状态码为503的响应，与此同时还会根据Http503Verbosity属性设置的等级作相应的处理。如果该属性值为Basic（默认值），当前TCP连接会重置，Full和Limitmed选项会影响响应的状态描述，前者返回详细的Reason Phrase，后者采用标准的“Service Unavailable”。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">enum</span> Http503VerbosityLevel {     Basic,     Limited,     Full }</pre> </div> <p>HttpSysOptions的Timeouts属性返回如下这个TimeoutManager对象，我们利用它完成各种超时设置，包括请求主体内容抵达时间（EntityBody）、读取请求主体内容时间（DrainEntityBody），请求在队列中存放的时间（RequestQueue）、连接闲置时间（IdleConnection）和解析请求报头时间（HeaderWait），这些超时时间默认都是两分钟。MinSendBytesPerSecond属性表示响应数据的最小发送率，默认为每秒150字节。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">sealed</span><span style="color: rgba(0, 0, 255, 1)">class</span> TimeoutManager {<span style="color: rgba(0, 0, 255, 1)">public</span> TimeSpan 	EntityBody {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span> TimeSpan 	DrainEntityBody {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span> TimeSpan 	RequestQueue {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span> TimeSpan 	IdleConnection {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span> TimeSpan 	HeaderWait {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">long</span> 	MinSendBytesPerSecond {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; } }</pre> </div> <p>HttpSysOptions还定义了其他一系列属性。AllowSynchronousIO属性（默认为False）表示是否运行以同步IO的方式完成针对请求和响应主体内容的读写。EnableResponseCaching属性（默认为True）表示允许响应缓存。ThrowWriteExceptions属性（默认为False）表示因断开连接导致写入响应主体内容失败是否需要抛出异常。如果将UnsafePreferInlineScheduling（默认为False）设置为True，意味着会直接在读取请求的IO线程中执行后续的应用代码，否则我们编写的应用代码会分发到线程池中进行处理。这样可以通过避免线程切换减少单个请求的处理耗时，但是会对整体的吞吐量带来负面影响。UseLatin1RequestHeaders属性（默认为False）表示是否采用Latin1字符集（ISO-8859-1）对请求报头进行编码。</p> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-866.htm">SpringBoot AutoConfiguration</a></p>
                                                                        <p>下一个：<a href="/html/category/article-868.htm">win11系统如何安装藏文输入法</a></p>
                                                                    </div>

                                                            </div>
                            <div class="col-md-3">
                                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1945.htm" title="Interlaken协议介绍">Interlaken协议介绍</a></li>
                        <li class="py-2"><a href="/html/category/article-1932.htm" title="nohup: redirecting stderr to stdout的解决办法">nohup: redirecting stderr to stdout的解决办法</a></li>
                        <li class="py-2"><a href="/html/category/article-1048.htm" title="Spring Boot + Mybatis-Plus + jasypt 数据库连接加密">Spring Boot + Mybatis-Plus + jasypt 数据库连接加密</a></li>
                        <li class="py-2"><a href="/html/category/article-2829.htm" title="CSS实现文字垂直居中">CSS实现文字垂直居中</a></li>
                        <li class="py-2"><a href="/html/category/article-2246.htm" title="Java中自定义注解的使用">Java中自定义注解的使用</a></li>
                        <li class="py-2"><a href="/html/category/article-1049.htm" title="python怎么进入虚拟环境_Python 中如何使用 virtualenv 管理虚拟环境">python怎么进入虚拟环境_Python 中如何使用 virtualenv 管理虚拟环境</a></li>
                        <li class="py-2"><a href="/html/category/article-1039.htm" title="使用Kotlin实现百思不得姐弹出菜单">使用Kotlin实现百思不得姐弹出菜单</a></li>
                        <li class="py-2"><a href="/html/category/article-1038.htm" title="spring boot 导入导出">spring boot 导入导出</a></li>
                        <li class="py-2"><a href="/html/category/article-1635.htm" title="Vue.js 3.x 中跨层级组件如何传递数据？_在线工具">Vue.js 3.x 中跨层级组件如何传递数据？_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-1337.htm" title="机器学习笔记 十五：随机森林（Random Forest）评估机器学习模型的特征重要性">机器学习笔记 十五：随机森林（Random Forest）评估机器学习模型的特征重要性</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">8</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                            </div>
                        </div>
                    </div>
                </section>
                                <footer class="footer">
                    <div class="copyright-section">
                        <div class="container clearfix">
                            <span class="copytext">
                                CambodiaAddress 版权所有 Powered by WordPress
                            </span>
                            <ul class="list-inline pull-right">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div><!-- .container -->
                    </div><!-- .copyright-section -->
                </footer>
                <!-- .footer -->
            </div>
            <!-- .content-wrapper -->
        </div>
        <!-- .offcanvas-pusher -->
        <div class="uc-mobile-menu uc-mobile-menu-effect">
            <button type="button" class="close" aria-hidden="true" data-toggle="offcanvas" id="uc-mobile-menu-close-btn">&times;</button>
            <div>
                <div>
                    <ul id="menu">
                        <li><a href="index.html">Home</a></li>
                        <li><a href="about.html">About</a></li>
                        <li><a href="services.html">Services</a></li>
                        <li><a href="contact.html">Contact</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- .uc-mobile-menu -->
    </div>
    <!-- #main-wrapper -->
    <!-- Script -->
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/jquery-2.1.4.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/smoothscroll.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/mobile-menu.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/scripts.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>