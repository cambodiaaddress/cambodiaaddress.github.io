<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://cambodiaaddress.github.io/html/category/article-1032.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>@NotEmpty、@NotBlank等注解的正确使用 @Validated和@Valid的区别 解决@NotBlank等注解不生效的问题 使用BindingResult进行接口请求参数的统一校验 - CambodiaAddress</title>
        <link rel="icon" href="/assets/addons/xcblog/img/cambodiaaddress/favicon.ico" type="image/x-icon"/>
    <!-- web-fonts -->
    <link href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,700,500' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
    <!-- off-canvas -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/mobile-menu.css" rel="stylesheet">
    <!-- font-awesome -->
    <link href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet">
    <!-- Flat Icon -->
    <link href="fonts/flaticon/flaticon.css" rel="stylesheet">
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/style.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?8022148af1f0848b976ee8f0e7db4477";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <div id="main-wrapper">
        <!-- Page Preloader -->
        <div id="preloader">
            <div id="status">
                <div class="status-mes"></div>
            </div>
        </div>
        <div class="uc-mobile-menu-pusher">
            <div class="content-wrapper">
                                <!-- .navbar-top -->
                <nav class="navbar m-menu navbar-default">
                    <div class="container">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse-1">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                                                        <a class="navbar-brand" href="/">Cambodia Address</a>
                                                    </div>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <div class="collapse navbar-collapse" id="#navbar-collapse-1">
                            <ul class="nav navbar-nav navbar-right main-nav">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div>
                        <!-- .navbar-collapse -->
                    </div>
                    <!-- .container -->
                </nav>
                <!-- .nav -->
                <section class="single-page-title single-page-title-about">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <h2>@NotEmpty、@NotBlank等注解的正确使用 @Validated和@Valid的区别 解决@NotBlank等注解不生效的问题 使用BindingResult进行接口请求参数的统一校验</h2>
                            </div>
                        </div>
                    </div>
                </section>
                <!-- .page-title -->
                <section class="featured-box">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-9">
                                <ol class="breadcrumb">
                                  <li><a href="/">首页</a></li>
                                  <li><a href="/html/category/">文章分类</a></li>
                                  <li class="active">正文</li>
                                </ol>

                                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <div class="toc"> <h3>文章目录</h3> <ul> <li>1. 问题说明</li> <li>2. 配置依赖</li> <li>3. 编写注解的bean</li> <li>4. 常用注解说明</li> <li> <ul> <li>4.1 空检查</li> <li>4.2 布尔检查</li> <li>4.3 长度检查</li> <li>4.4 日期检查</li> <li>4.5 数值检查</li> </ul> </li> <li>5. 编写controller</li> <li> <ul> <li>5.1 @Validated和@Valid区别</li> </ul> </li> <li>6. 解决@NotBlank等注解不生效的问题</li> <li>7. 其他注解说明</li> </ul> </div> <h1> 1. 问题说明</h1> <p>服务端通常将<code>controller层</code>作为调用的第一层，因而参数校验常常在这里完成，比如非空校验、类型校验等，如下登录接口代码所示：</p> <pre><code class="prism language-java"> <span class="token comment">/**    * 登录接口    *    * @author 念兮为美    * @datetime 2022/8/11:13:41    */</span>   <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">JSONObject</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">UserLoginDto</span> userLogin<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token class-name">String</span> password <span class="token operator">=</span> userLogin<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">JSONObject</span> jsonObject<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> password <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>       jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token string">"密码不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span>  jsonObject<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token punctuation">}</span> </code></pre> <p>假如在<code>controller层</code>的某个方法中，有很多个需要校验的请求参数，这样写无疑会有多条<code>if判断语句</code>，因而，我们需要使用优雅的方式处理接口请求参数。</p> <h1> 2. 配置依赖</h1> <p>前提是需要在<code>pom</code>文件中增加如下依赖：</p> <pre><code class="prism language-java"><span class="token generics"><span class="token punctuation"><</span>dependency<span class="token punctuation">></span></span>     <span class="token generics"><span class="token punctuation"><</span>groupId<span class="token punctuation">></span></span>javax<span class="token operator"><</span><span class="token operator">/</span>groupId<span class="token operator">></span>     <span class="token generics"><span class="token punctuation"><</span>artifactId<span class="token punctuation">></span></span>javaee<span class="token operator">-</span>api<span class="token operator"><</span><span class="token operator">/</span>artifactId<span class="token operator">></span>     <span class="token generics"><span class="token punctuation"><</span>version<span class="token punctuation">></span></span><span class="token number">8.0</span><span class="token number">.1</span><span class="token operator"><</span><span class="token operator">/</span>version<span class="token operator">></span> <span class="token operator"><</span><span class="token operator">/</span>dependency<span class="token operator">></span> </code></pre> <h1> 3. 编写注解的bean</h1> <p>依赖配置好后，编写需要注解的bean，如下代码所示：</p> <pre><code class="prism language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>superjson<span class="token punctuation">.</span>superjsonmanager<span class="token punctuation">.</span>dto</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotBlank</span><span class="token punctuation">;</span>   <span class="token comment">/**  * @author 念兮为美  * @datetime 2022/8/5 21:34  * @desc 用户登录请求参数  */</span> <span class="token annotation punctuation">@AllArgsConstructor</span> <span class="token annotation punctuation">@NoArgsConstructor</span> <span class="token annotation punctuation">@Data</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserLoginDto</span> <span class="token punctuation">{<!-- --></span>   <span class="token comment">/** 密码 */</span>   <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"密码不能为空"</span><span class="token punctuation">)</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">/** 类型 */</span>   <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"登录类型不能为空"</span><span class="token punctuation">)</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>    <span class="token comment">/** 用户名 */</span>   <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"账号不能为空"</span><span class="token punctuation">)</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre> <h1> 4. 常用注解说明</h1> <p>我们常用的注解有<code>@NotBlank 、@NotEmpty、@NotNull </code>等，当然，我们也有可能用到其他注解来检查属性。</p> <h2> 4.1 空检查</h2> <table> <thead> <tr> <th>注解</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>@Null</td> <td>检查对象是否为null。</td> </tr> <tr> <td>@NotNull</td> <td>检查对象是否不为null，无法查检长度为0的字符串。</td> </tr> <tr> <td>@NotBlank</td> <td>检查约束字符串是不是Null还有被Trim的长度是否大于0，只对字符串,且会去掉前后空格。</td> </tr> <tr> <td>@NotEmpty</td> <td>检查约束元素是否为NULL或者是EMPTY。</td> </tr> </tbody> </table> <h2> 4.2 布尔检查</h2> <table> <thead> <tr> <th>注解</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>@AssertTrue</td> <td>检查 Boolean 对象是否为 true。</td> </tr> <tr> <td>@AssertFalse</td> <td>检查 Boolean 对象是否为 false。</td> </tr> </tbody> </table> <h2> 4.3 长度检查</h2> <table> <thead> <tr> <th>注解</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>@Size(min=, max=)</td> <td>检查对象<code>(Array,Collection,Map,String)</code>长度是否在给定的范围之内 。</td> </tr> <tr> <td>@Length(min=, max=)</td> <td>检查字符串<code>(String)</code>长度是否在给定的范围之内。</td> </tr> </tbody> </table> <h2> 4.4 日期检查</h2> <table> <thead> <tr> <th>注解</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>@Past</td> <td>检查<code>Date</code>和<code>Calendar</code>对象是否在当前时间之前 。</td> </tr> <tr> <td>@Future</td> <td>检查<code>Date</code>和<code>Calendar</code>对象是否在当前时间之后 。</td> </tr> <tr> <td>@Pattern</td> <td>检查<code>String</code>对象是否符合正则表达式的规则。</td> </tr> </tbody> </table> <h2> 4.5 数值检查</h2> <p>建议在<code>Stirng和Integer类型</code>使用，不建议在<code>int类型</code>上使用。因为表单值为<code>“”</code>时无法转换为int，但可以转换为Stirng为""，Integer为null。</p> <table> <thead> <tr> <th>注解</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>@Min</td> <td>检查 Number 和 String 对象是否大等于指定的值 。</td> </tr> <tr> <td>@Max</td> <td>检查 Number 和 String 对象是否小等于指定的值 。</td> </tr> <tr> <td>@DecimalMax</td> <td>被标注的值必须不大于约束中指定的最大值。 这个约束的参数是一个通过<code>BigDecimal</code>定义的最大值的字符串表示.小数存在精度。</td> </tr> <tr> <td>@DecimalMin</td> <td>被标注的值必须不小于约束中指定的最小值.。这个约束的参数是一个通过<code>BigDecimal</code>定义的最小值的字符串表示.小数存在精度。</td> </tr> <tr> <td>@Digits</td> <td>检查 Number 和 String 的构成是否合法 。</td> </tr> <tr> <td>@Digits(integer=,fraction=)</td> <td>检查字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。</td> </tr> <tr> <td>@Range(min=, max=)</td> <td>检查数字是否介于min和max之间。</td> </tr> </tbody> </table> <h1> 5. 编写controller</h1> <p>我们在bean中通过注解定义好类之后，需要在controller层加上<code>@Validated</code>和<code>BindingResult</code>参数，如下代码所示：</p> <pre><code class="prism language-java"> <span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>superjson<span class="token punctuation">.</span>superjsonmanager<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>superjson<span class="token punctuation">.</span>superjsonmanager<span class="token punctuation">.</span>dto<span class="token punctuation">.</span></span><span class="token class-name">UserLoginDto</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>superjson<span class="token punctuation">.</span>superjsonmanager<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">BindingResult</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">FieldError</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Validated</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestBody</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span>  <span class="token comment">/**  * @author 念兮为美  * @datetime 2022/8/5 21:30  * @desc 用户登录控制器  */</span> <span class="token annotation punctuation">@RestController</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{<!-- --></span>    <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">JSONObject</span> <span class="token function">login</span><span class="token punctuation">(</span>       <span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">UserLoginDto</span> userLogin<span class="token punctuation">,</span> <span class="token class-name">BindingResult</span> bindingResult<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>bindingResult<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>       <span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">FieldError</span> fieldError <span class="token operator">=</span> bindingResult<span class="token punctuation">.</span><span class="token function">getFieldError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取出错的属性</span>       jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"field"</span><span class="token punctuation">,</span> fieldError<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取出错的注解名字，比如notBlank，notNull等</span>       jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> fieldError<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取出错的对象名称</span>       jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"objectName"</span><span class="token punctuation">,</span> fieldError<span class="token punctuation">.</span><span class="token function">getObjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取错误的信息</span>       jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> fieldError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> 你自定义的异常<span class="token punctuation">(</span><span class="token string">"参数请求异常："</span> <span class="token operator">+</span> fieldError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getByUsernameAndPassword</span><span class="token punctuation">(</span>             userLogin<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userLogin<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userLogin<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h2> 5.1 @Validated和@Valid区别</h2> <ol> <li> <p>@Valid 和 @Validated 两者都可以对数据进行校验，待校验字段上打的规则注解（@NotNull, @NotEmpty等）都可以对 @Valid 和 @Validated 生效；</p> </li> <li> <p>@Valid 进行校验的时候，需要用 BindingResult 来做一个校验结果接收。当校验不通过的时候，如果手动不 return ，则并不会阻止程序的执行；</p> </li> <li> <p>@Validated 进行校验的时候，当校验不通过的时候，程序会抛出400异常，阻止方法中的代码执行，这时需要再写一个全局校验异常捕获处理类，然后返回校验提示。</p> </li> <li> <p>总体来说，@Validated 使用起来要比 @Valid 方便一些，它可以帮我们节省一定的代码，并且使得方法看上去更加的简洁。</p> </li> </ol> <h1> 6. 解决@NotBlank等注解不生效的问题</h1> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230109/c3b10f12801ef4910360ebcaa263211f.jpg" alt="@NotEmpty、@NotBlank等注解的正确使用 @Validated和@Valid的区别 解决@NotBlank等注解不生效的问题 使用BindingResult进行接口请求参数的统一校验"></p> <p>在如上postman中，password和username都为空，按道理说，应该是报错的，但执行后并没有报错，如下图所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230109/0cdaf603c372b162fabf54d64cfd6db3.jpg" alt="@NotEmpty、@NotBlank等注解的正确使用 @Validated和@Valid的区别 解决@NotBlank等注解不生效的问题 使用BindingResult进行接口请求参数的统一校验"></p> <p>根据上述<code>3. 编写需要注解的bean</code>可以看到，password和username都不为空，实际上应该有两个error，但现在是<code>0 error</code>，就不正常。</p> <p>实际上，我们少引用<code>hibernate-validator</code>这个依赖，只需要增加如下依赖即可：</p> <pre><code class="prism language-java"><span class="token generics"><span class="token punctuation"><</span>dependency<span class="token punctuation">></span></span>   <span class="token generics"><span class="token punctuation"><</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>validator<span class="token operator"><</span><span class="token operator">/</span>groupId<span class="token operator">></span>   <span class="token generics"><span class="token punctuation"><</span>artifactId<span class="token punctuation">></span></span>hibernate<span class="token operator">-</span>validator<span class="token operator"><</span><span class="token operator">/</span>artifactId<span class="token operator">></span>   <span class="token generics"><span class="token punctuation"><</span>version<span class="token punctuation">></span></span><span class="token number">6.2</span><span class="token number">.3</span><span class="token punctuation">.</span>Final<span class="token operator"><</span><span class="token operator">/</span>version<span class="token operator">></span> <span class="token operator"><</span><span class="token operator">/</span>dependency<span class="token operator">></span> </code></pre> <p>增加如下依赖之后，重启服务后运行。不仅能让<code>@NotBlank</code>注解生效，也可以让<code>@NotBlank</code>等注解生效，如下图所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230109/8cbc6efab5acfd78d9aff308791260f4.jpg" alt="@NotEmpty、@NotBlank等注解的正确使用 @Validated和@Valid的区别 解决@NotBlank等注解不生效的问题 使用BindingResult进行接口请求参数的统一校验"></p> <h1> 7. 其他注解说明</h1> <table> <thead> <tr> <th>注解</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>@Valid</td> <td>递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)。</td> </tr> <tr> <td>@CreditCardNumber</td> <td>信用卡验证。</td> </tr> <tr> <td>@Email</td> <td>验证是否是邮件地址，如果为null,不进行验证，算通过验证。</td> </tr> <tr> <td>@ScriptAssert(lang= ,script=, alias=)</td> <td>检查脚本语言是否符合预期</td> </tr> <tr> <td>@URL(protocol=,host=, port=,regexp=, flags=)</td> <td>检查URL是否符合预期</td> </tr> </tbody> </table> </div> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-1031.htm">spark1.6.1和2.4读取csv文件，转为为DataFrame和使用SQL</a></p>
                                                                        <p>下一个：<a href="/html/category/article-1033.htm">Servlet的url-pattern配置</a></p>
                                                                    </div>

                                                            </div>
                            <div class="col-md-3">
                                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4520.htm" title="宠物粮网店名字大全霸气四个字（宠物粮网店名字大全霸气四个字）">宠物粮网店名字大全霸气四个字（宠物粮网店名字大全霸气四个字）</a></li>
                        <li class="py-2"><a href="/html/category/article-6198.htm" title="动物注射疫苗后过敏反应的处理方法是什么（动物注射疫苗后过敏反应的处理方法是什么意思）">动物注射疫苗后过敏反应的处理方法是什么（动物注射疫苗后过敏反应的处理方法是什么意思）</a></li>
                        <li class="py-2"><a href="/html/category/article-6713.htm" title="太极雷雷全名叫啥（不要告诉别人）太极雷雷真名，cctv第一剧场，雷雷，">太极雷雷全名叫啥（不要告诉别人）太极雷雷真名，cctv第一剧场，雷雷，</a></li>
                        <li class="py-2"><a href="/html/category/article-4129.htm" title="SpringBoot-2-3-x分层构建Docker镜像实践，docker教程学习">SpringBoot-2-3-x分层构建Docker镜像实践，docker教程学习</a></li>
                        <li class="py-2"><a href="/html/category/article-6005.htm" title="动物疫苗法律法规最新（动物疫苗法案）">动物疫苗法律法规最新（动物疫苗法案）</a></li>
                        <li class="py-2"><a href="/html/category/article-5576.htm" title="国产狗粮排名前十品牌（国产狗粮品牌排行榜）">国产狗粮排名前十品牌（国产狗粮品牌排行榜）</a></li>
                        <li class="py-2"><a href="/html/category/article-4592.htm" title="国内宠物粮食十大厂家有哪些 国内宠物粮食十大厂家有哪些品牌">国内宠物粮食十大厂家有哪些 国内宠物粮食十大厂家有哪些品牌</a></li>
                        <li class="py-2"><a href="/html/category/article-3430.htm" title="关于Spring中@Order注解的使用">关于Spring中@Order注解的使用</a></li>
                        <li class="py-2"><a href="/html/category/article-4299.htm" title="美丽的茄子花">美丽的茄子花</a></li>
                        <li class="py-2"><a href="/html/category/article-3429.htm" title="认证与授权流程与spring boot整合 spring security">认证与授权流程与spring boot整合 spring security</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">48</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                            </div>
                        </div>
                    </div>
                </section>
                                <footer class="footer">
                    <div class="copyright-section">
                        <div class="container clearfix">
                            <span class="copytext">
                                CambodiaAddress 版权所有 Powered by WordPress
                            </span>
                            <ul class="list-inline pull-right">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div><!-- .container -->
                    </div><!-- .copyright-section -->
                </footer>
                <!-- .footer -->
            </div>
            <!-- .content-wrapper -->
        </div>
        <!-- .offcanvas-pusher -->
        <div class="uc-mobile-menu uc-mobile-menu-effect">
            <button type="button" class="close" aria-hidden="true" data-toggle="offcanvas" id="uc-mobile-menu-close-btn">&times;</button>
            <div>
                <div>
                    <ul id="menu">
                        <li><a href="index.html">Home</a></li>
                        <li><a href="about.html">About</a></li>
                        <li><a href="services.html">Services</a></li>
                        <li><a href="contact.html">Contact</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- .uc-mobile-menu -->
    </div>
    <!-- #main-wrapper -->
    <!-- Script -->
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/jquery-2.1.4.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/smoothscroll.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/mobile-menu.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/scripts.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>