<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://cambodiaaddress.github.io/html/category/article-843.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>func-spring-boot-starter 匿名函数托管 - CambodiaAddress</title>
        <link rel="icon" href="/assets/addons/xcblog/img/cambodiaaddress/favicon.ico" type="image/x-icon"/>
    <!-- web-fonts -->
    <link href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,700,500' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
    <!-- off-canvas -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/mobile-menu.css" rel="stylesheet">
    <!-- font-awesome -->
    <link href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet">
    <!-- Flat Icon -->
    <link href="fonts/flaticon/flaticon.css" rel="stylesheet">
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/style.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?8022148af1f0848b976ee8f0e7db4477";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <div id="main-wrapper">
        <!-- Page Preloader -->
        <div id="preloader">
            <div id="status">
                <div class="status-mes"></div>
            </div>
        </div>
        <div class="uc-mobile-menu-pusher">
            <div class="content-wrapper">
                                <!-- .navbar-top -->
                <nav class="navbar m-menu navbar-default">
                    <div class="container">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse-1">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                                                        <a class="navbar-brand" href="/">Cambodia Address</a>
                                                    </div>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <div class="collapse navbar-collapse" id="#navbar-collapse-1">
                            <ul class="nav navbar-nav navbar-right main-nav">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div>
                        <!-- .navbar-collapse -->
                    </div>
                    <!-- .container -->
                </nav>
                <!-- .nav -->
                <section class="single-page-title single-page-title-about">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <h2>func-spring-boot-starter 匿名函数托管</h2>
                            </div>
                        </div>
                    </div>
                </section>
                <!-- .page-title -->
                <section class="featured-box">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-9">
                                <ol class="breadcrumb">
                                  <li><a href="/">首页</a></li>
                                  <li><a href="/html/category/">文章分类</a></li>
                                  <li class="active">正文</li>
                                </ol>

                                  				  				  				<h1 id="func-spring-boot-starter-匿名函数托管">func-spring-boot-starter 匿名函数托管</h1> <blockquote> <p>GitHub项目路径:</p> </blockquote> <pre><code class="language-http">https://github.com/yiurhub/func-spring-boot-starter</code></pre> <blockquote> <p>Gitee项目路径:</p> </blockquote> <pre><code class="language-http">https://gitee.com/yiur/func-spring-boot-starter</code></pre> <h2 id="使用注意事项">使用注意事项</h2> <blockquote> <p>推荐版本:</p> </blockquote> <ol> <li><strong>spring-boot-starter<code>2.6.x</code></strong></li> </ol> <h2 id="设计原理">设计原理</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b0158f5010989af0dc22443d5d40d925.jpg" alt="func-spring-boot-starter 匿名函数托管"></p> <h2 id="匿名函数特性">匿名函数特性</h2> <h3 id="匿名函数链接配置">匿名函数链接配置</h3> <h3 id="yaml">Yaml</h3> <pre><code class="language-yaml">func-link:     # 默认代理模式     singleton: true     # 默认开启lambda模式     lambda: true     # 默认的callback回调函数类     call-back: org.func.spring.boot.component.callback.SimpleFuncCallback     # logger 配置     logger:       # 默认false 不输出日志       enable-log: false       # 默认输出日志信息 ${取当前匿名函数的公开信息}       message: "call method --&gt; ${methodName}(${parameterSource})"       # 日志执行日志格式化       date-format: "yyyy-MM-dd HH:mm:ss"       # 输出日志的文件名       file-name: "simple"</code></pre> <h3 id="javaconfig">JavaConfig</h3> <p>添加类注解<code>@EnableFuncLambda</code></p> <p>需要注入<code>FuncLinkFactory</code>工厂类，生产默认<code>FuncLink</code>链接类</p> <p>添加链接的方法为<code>setObject(key, Object)</code><strong>链式编程</strong><strong>泛型约束</strong><strong>Lambda</strong></p> <p>	key: {Spring Bean Name}????{功能链接 | 插件}</p> <p>	object: ${功能链接类| 插件类}</p> <p>FuncLink推荐Lambda操作</p> <p>详细内容请看项目:</p> <pre><code class="language-http">https://gitee.com/yiur/func-spring-boot-starter/tree/main/func-web-simple</code></pre> <pre><code class="language-java">@Configuration @EnableFuncLambda("com.simple.web.lambda") public class FuncLinkConfig {      @Autowired     public FuncLinkFactory funcLinkFactory;      @Bean     public FuncLink funcLink() {         return funcLinkFactory.build()                 .&lt;FuncLogger&gt;setObject("logger:log", (set, log) -&gt; "logger =&gt; ${methodName}\r\n");     }  }</code></pre> <h3 id="严格类型托管">严格类型托管</h3> <p>开发推荐<strong>严格类型托管</strong>，有代码提示，开发效率更高，在Web项目中，可以托管整个<strong>Servcie</strong>层</p> <p>配合Mybaits，Redis等框架一起使用</p> <p><strong>1、定义接口</strong></p> <p>用于SpringBoot自动注入funcLink代理的HttpLink类</p> <pre><code class="language-java">public interface HttpLink {      Object link();  }</code></pre> <p><strong>2、代理类代理接口方法</strong></p> <p><code>@FuncBean(link = "funcLink Bean Name")</code></p> <p>添加类注解<code>@FuncBean</code>声明这是一个匿名函数代理类</p> <p>添加方法注解<code>@FuncLambda</code>声明这是一个代理方法</p> <p>如果有参数请加上参数注解<code>@FuncParameter("参数名")</code></p> <pre><code class="language-java">@Component @FuncBean public class FuncLinkHosting implements HttpLink {      @Override     @FuncLambda(classFile = HttpLink.class)     public Map&lt;String, String&gt; link() {         Map&lt;String, String&gt; map = new HashMap&lt;&gt;(10);         map.put("GitHub", "https://github.com/yiurhub");         map.put("Gitee", "https://gitee.com/yiur");         map.put("博客", "https://www.cnblogs.com/yiur-bgy");         return map;     }  }</code></pre> <h3 id="松散类型托管">松散类型托管</h3> <p>开发使用<strong>不推荐</strong>，后续2.x估计废用，可读性不高</p> <p><strong>1、定义接口</strong></p> <p>添加类注解<code>@Component</code>，用于SpringBoot自动注入funcLink代理的HttpLink类，SpringBoot插件提升</p> <pre><code class="language-java">@Component public interface HttpLink {      Object link();  }</code></pre> <p><strong>2、代理类代理接口方法</strong></p> <p>@FuncBean(link = "funcLink Bean Name")</p> <p>松散类型托管需要注意的事项:</p> <ol> <li>代理方法返回值与接口不一样，接口返回值必须得是Object</li> </ol> <p>添加类注解<code>@FuncBean</code>声明这是一个匿名函数代理类</p> <p>添加方法注解<code>@FuncLambda</code>声明这是一个代理方法</p> <p>如果有参数请加上参数注解<code>@FuncParameter("参数名")</code></p> <pre><code class="language-java">@FuncBean public class FuncLinkHosting {      @FuncLambda(classFile = HttpLink.class)     public Map&lt;String, String&gt; link() {         Map&lt;String, String&gt; map = new HashMap&lt;&gt;(10);         map.put("GitHub", "https://github.com/yiurhub");         map.put("Gitee", "https://gitee.com/yiur");         map.put("博客", "https://www.cnblogs.com/yiur-bgy");         return map;     }  }</code></pre> <h3 id="funclogger">@FuncLogger</h3> <p>添加方法注解<code>@FuncLogger</code>开启方法执行完后的输出日志，<strong>优先级比配置文件高</strong></p> <p><code>@FuncLogger</code>参数<br /> name: 生成的日志文件名，默认为func-link</p> <p>	suffix: 生成的日志文件后缀名，默认为log</p> <p>	path: 生成的日志文件存放绝对路径路径，默认当前项目下的log文件夹下</p> <pre><code class="language-java">@FuncBean public class FuncLinkHosting implements HttpLink {      @Override     @FuncLogger     @FuncLambda(classFile = HttpLink.class)     public Map&lt;String, String&gt; link() {         Map&lt;String, String&gt; map = new HashMap&lt;&gt;(10);         map.put("GitHub", "https://github.com/yiurhub");         map.put("Gitee", "https://gitee.com/yiur");         map.put("博客", "https://www.cnblogs.com/yiur-bgy");         return map;     }  }</code></pre> <h4 id="funclink-返回message">FuncLink 返回message</h4> <h4 id="应用">应用</h4> <p>Logger 日志功能链接，根据执行方法绑定的Bean或者ref，执行此功能</p> <p>在绑定的方法中执行完后，则会输出日志，获取执行的方法信息</p> <h4 id="链接">链接</h4> <p><code>FuncLogger</code></p> <p>	功能链接为:<strong>"${Bean Name}:log"</strong></p> <h4 id="代码">代码</h4> <pre><code class="language-java">@Configuration @EnableFuncLambda("com.simple.web.lambda") public class FuncLinkConfig {      @Autowired     public FuncLinkFactory funcLinkFactory;      @Bean     public FuncLink funcLink() {         return funcLinkFactory.build()                 .&lt;FuncLogger&gt;setObject("httpLink:log", (set, log) -&gt; "logger =&gt; ${methodName}\r\n");     }  }</code></pre> <h3 id="funccallback-注解实现">@FuncCallback 注解实现</h3> <p>添加方法注解<code>@FuncCallback</code>绑定方法执行后的回调函数</p> <p>成功执行回调:<code>then(T result)</code></p> <p>失败执行回调:<code>error(Throwable e)</code></p> <pre><code class="language-java">public class DefaultCallback implements FuncCallback {      @Override     public Object then(Object data) { return data; }      @Override     public Object error(Throwable error) {         return error.getMessage();     }  }</code></pre> <pre><code class="language-java">@FuncBean public class FuncLinkHosting implements HttpLink {      @Override     @FuncCallback(DefaultCallback.class)     @FuncLambda(classFile = HttpLink.class)     public Map&lt;String, String&gt; link() {         Map&lt;String, String&gt; map = new HashMap&lt;&gt;(10);         map.put("GitHub", "https://github.com/yiurhub");         map.put("Gitee", "https://gitee.com/yiur");         map.put("博客", "https://www.cnblogs.com/yiur-bgy");         return map;     }  }</code></pre> <h3 id="funclink-callback-实现">FuncLink Callback 实现</h3> <h4 id="应用-1">应用</h4> <p>Callback 方法执行完回调功能链接，根据执行方法绑定的Bean或者ref，执行此功能</p> <p>在Web项目Service层中返回方法执行的结果，能做到服务熔断操作</p> <h4 id="链接-1">链接</h4> <p><code>FuncCallback&lt;T, R&gt;</code>约束参数值和返回值，<strong>执行优先级: 1</strong></p> <p>	功能链接为:<strong>"${Bean Name}:callback"</strong></p> <p><code>FuncCallbackThen&lt;T, R&gt;</code>约束参数值和返回值，<strong>执行优先级: 2</strong></p> <p>	功能链接为:<strong>"${Bean Name}:callback-then"</strong></p> <p><code>FuncCallbackError&lt;R&gt;</code>约束返回值，<strong>执行优先级: 2</strong></p> <p>	功能链接为:<strong>"${Bean Name}:callback-error"</strong></p> <h4 id="代码-1">代码</h4> <pre><code class="language-java">@Configuration @EnableFuncLambda("com.simple.web.lambda") public class FuncLinkConfig {      @Autowired     public FuncLinkFactory funcLinkFactory;      @Bean("simple")     public FuncLink funcLink() {         return funcLinkFactory.build()                 // httpLink                 .&lt;FuncCallback&lt;Map&lt;String, String&gt;, Object&gt;&gt;setObject("httpLink:callback", new FuncCallback&lt;Map&lt;String, String&gt;, Object&gt;() {                     @Override                     public Object then(Map&lt;String, String&gt; result) {                         return result;                     }                      @Override                     public Object error(Throwable throwable) {                         return throwable;                     }                 })                 .&lt;FuncCallbackThen&lt;Map&lt;String, String&gt;, Object&gt;&gt;setObject("httpLink:callback-then", result -&gt; result)                 .&lt;FuncCallbackError&lt;Object&gt;&gt;setObject("httpLink:callback-error", throwable -&gt; throwable);     }  }</code></pre> <h3 id="funclink-life-实现">FuncLink Life 实现</h3> <h4 id="应用-2">应用</h4> <p>Life 方法执行前后回调功能链接，根据执行方法绑定的Bean或者ref，执行此功能</p> <p>方法执行前会先执行start方法，用来检查参数</p> <p>方法执行后会执行end方法，用来检查返回值</p> <h4 id="链接-2">链接</h4> <p><code>FuncLife&lt;T, R&gt;</code>约束参数值和返回值，<strong>执行优先级: 1</strong></p> <p>	功能链接为:<strong>"${Bean Name}:life"</strong></p> <p><code>FuncLifeStart</code>约束参数值和返回值，<strong>执行优先级: 2</strong></p> <p>	功能链接为:<strong>"${Bean Name}:life-start"</strong></p> <p><code>FuncLifeEnd&lt;T, R&gt;</code>约束返回值，<strong>执行优先级: 2</strong></p> <p>	功能链接为:<strong>"${Bean Name}:life-end"</strong></p> <h4 id="代码-2">代码</h4> <pre><code class="language-java">@Configuration @EnableFuncLambda("com.simple.web.lambda") public class FuncLinkConfig {      @Autowired     public FuncLinkFactory funcLinkFactory;      @Bean("simple")     public FuncLink funcLink() {         return funcLinkFactory.build()                 // httpLink                 .&lt;FuncLife&lt;Object, Object&gt;&gt;setObject("httpLink:life", new FuncLife&lt;Object, Object&gt;() {                     @Override                     public Map&lt;String, Object&gt; start(Map&lt;String, Object&gt; args) {                         return args;                     }                      @Override                     public Object end(Object result) {                         return result;                     }                 })                 .&lt;FuncLifeStart&gt;setObject("httpLink:life-start", args -&gt; args)                 .&lt;FuncLifeEnd&lt;Object, Object&gt;&gt;setObject("httpLink:life-end", result -&gt; result);     }  }</code></pre> <h2 id="113release-更新">1.1.3.RELEASE 更新</h2> <p>func-spring-boot-starter-1.1.2.RELEASE 依赖</p> <pre><code class="language-xml">&lt;!--func--&gt; &lt;dependency&gt;     &lt;groupId&gt;io.github.yiurhub&lt;/groupId&gt;     &lt;artifactId&gt;func-spring-boot-starter&lt;/artifactId&gt;     &lt;version&gt;1.1.3.RELEASE&lt;/version&gt; &lt;/dependency&gt;</code></pre> <h3 id="添加匿名函数链接自定义实现功能">添加匿名函数链接自定义实现功能</h3> <blockquote> <p>AbstractFuncLifePlugin</p> </blockquote> <pre><code class="language-java">public class SimpleLifePlugin extends AbstractFuncLifePlugin {      public SimpleLifePlugin() {     }      public SimpleLifePlugin(String beanName, String[] refs, FuncLink funcLink, FuncCallbackPlugin funcCallbackPlugin) {         super(beanName, refs, funcLink, funcCallbackPlugin);     }      }</code></pre> <blockquote> <p>AbstractFuncCallbackPlugin</p> </blockquote> <pre><code class="language-java">public class SimpleCallbackPlugin extends AbstractFuncCallbackPlugin {      public SimpleCallbackPlugin() {     }      public SimpleCallbackPlugin(String beanName, String[] refs, FuncLink funcLink, FuncProperties funcProperties, FuncLoggerPlugin funcLoggerPlugin) {         super(beanName, refs, funcLink, funcProperties, funcLoggerPlugin);     }      }</code></pre> <blockquote> <p>AbstractFuncLoggerPlugin</p> </blockquote> <pre><code class="language-java">public class SimpleLoggerPlugin extends AbstractFuncLoggerPlugin {      public SimpleLoggerPlugin() {     }      public SimpleLoggerPlugin(String beanName, String[] refs, FuncLink funcLink, FuncProperties funcProperties) {         super(beanName, refs, funcLink, funcProperties);     }      }</code></pre> <h4 id="funclink-使用">FuncLink 使用</h4> <pre><code class="language-java">@Configuration @EnableFuncLambda("com.simple.web.lambda") public class FuncLinkConfig {      @Autowired     public FuncLinkFactory funcLinkFactory;      @Bean("simple")     public FuncLink funcLink() {         return funcLinkFactory.build()                 // httpLink                 .setObject("httpLink:FuncLifePlugin", SimpleLifePlugin.class)                 .setObject("httpLink:FuncCallbackPlugin", SimpleCallbackPlugin.class)                 .setObject("httpLink:FuncLoggerPlugin", SimpleLoggerPlugin.class)     }  }</code></pre> <h2 id="api更改">API更改</h2> <h3 id="注解更改">注解更改</h3> <p><code>@FuncConfiguration</code> 改为<code>@FuncBean</code></p> <p><code>@EnableLog</code> 改为<code>@FuncLogger</code></p> <p><code>CallbackClass</code> 改为<code>@FuncCallback</code></p> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-842.htm">控制Python浮点数输出位数</a></p>
                                                                        <p>下一个：<a href="/html/category/article-844.htm">Springmvc记录操作日志到数据库</a></p>
                                                                    </div>

                                                            </div>
                            <div class="col-md-3">
                                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1327.htm" title="java-websocket断线重连">java-websocket断线重连</a></li>
                        <li class="py-2"><a href="/html/category/article-1338.htm" title="Kafka启动后进程过一段时间自己消失，问题解决">Kafka启动后进程过一段时间自己消失，问题解决</a></li>
                        <li class="py-2"><a href="/html/category/article-4130.htm" title="C#二分查找算法_C#教程">C#二分查找算法_C#教程</a></li>
                        <li class="py-2"><a href="/html/category/article-4520.htm" title="宠物粮网店名字大全霸气四个字（宠物粮网店名字大全霸气四个字）">宠物粮网店名字大全霸气四个字（宠物粮网店名字大全霸气四个字）</a></li>
                        <li class="py-2"><a href="/html/category/article-2245.htm" title="8 高并发解决方案">8 高并发解决方案</a></li>
                        <li class="py-2"><a href="/html/category/article-3762.htm" title="Pandas（七）——文本数据（Textual Data）">Pandas（七）——文本数据（Textual Data）</a></li>
                        <li class="py-2"><a href="/html/category/article-4485.htm" title="宠物医院美团好评回复模板 宠物医院美团好评回复模板怎么写">宠物医院美团好评回复模板 宠物医院美团好评回复模板怎么写</a></li>
                        <li class="py-2"><a href="/html/category/article-1347.htm" title="VUE3setup响应式函数系统API详解">VUE3setup响应式函数系统API详解</a></li>
                        <li class="py-2"><a href="/html/category/article-4484.htm" title="免费宠物救助站北京（宠物救助站北京电话）">免费宠物救助站北京（宠物救助站北京电话）</a></li>
                        <li class="py-2"><a href="/html/category/article-3127.htm" title="vuex配置项、多组件数据共享案例详解">vuex配置项、多组件数据共享案例详解</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">18</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                            </div>
                        </div>
                    </div>
                </section>
                                <footer class="footer">
                    <div class="copyright-section">
                        <div class="container clearfix">
                            <span class="copytext">
                                CambodiaAddress 版权所有 Powered by WordPress
                            </span>
                            <ul class="list-inline pull-right">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div><!-- .container -->
                    </div><!-- .copyright-section -->
                </footer>
                <!-- .footer -->
            </div>
            <!-- .content-wrapper -->
        </div>
        <!-- .offcanvas-pusher -->
        <div class="uc-mobile-menu uc-mobile-menu-effect">
            <button type="button" class="close" aria-hidden="true" data-toggle="offcanvas" id="uc-mobile-menu-close-btn">&times;</button>
            <div>
                <div>
                    <ul id="menu">
                        <li><a href="index.html">Home</a></li>
                        <li><a href="about.html">About</a></li>
                        <li><a href="services.html">Services</a></li>
                        <li><a href="contact.html">Contact</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- .uc-mobile-menu -->
    </div>
    <!-- #main-wrapper -->
    <!-- Script -->
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/jquery-2.1.4.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/smoothscroll.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/mobile-menu.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/scripts.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>