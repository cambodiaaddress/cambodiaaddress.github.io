<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://cambodiaaddress.github.io/html/category/article-902.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Kafka如果保证数据的可靠性 - CambodiaAddress</title>
        <link rel="icon" href="/assets/addons/xcblog/img/cambodiaaddress/favicon.ico" type="image/x-icon"/>
    <!-- web-fonts -->
    <link href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,700,500' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
    <!-- off-canvas -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/mobile-menu.css" rel="stylesheet">
    <!-- font-awesome -->
    <link href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet">
    <!-- Flat Icon -->
    <link href="fonts/flaticon/flaticon.css" rel="stylesheet">
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/style.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?8022148af1f0848b976ee8f0e7db4477";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <div id="main-wrapper">
        <!-- Page Preloader -->
        <div id="preloader">
            <div id="status">
                <div class="status-mes"></div>
            </div>
        </div>
        <div class="uc-mobile-menu-pusher">
            <div class="content-wrapper">
                                <!-- .navbar-top -->
                <nav class="navbar m-menu navbar-default">
                    <div class="container">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse-1">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                                                        <a class="navbar-brand" href="/">Cambodia Address</a>
                                                    </div>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <div class="collapse navbar-collapse" id="#navbar-collapse-1">
                            <ul class="nav navbar-nav navbar-right main-nav">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div>
                        <!-- .navbar-collapse -->
                    </div>
                    <!-- .container -->
                </nav>
                <!-- .nav -->
                <section class="single-page-title single-page-title-about">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <h2>Kafka如果保证数据的可靠性</h2>
                            </div>
                        </div>
                    </div>
                </section>
                <!-- .page-title -->
                <section class="featured-box">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-9">
                                <ol class="breadcrumb">
                                  <li><a href="/">首页</a></li>
                                  <li><a href="/html/category/">文章分类</a></li>
                                  <li class="active">正文</li>
                                </ol>

                                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>目录</h3> <ul> <li><a href="#_1" rel="nofollow">数据的可靠性保证</a></li> <li><a href="#_5" rel="nofollow">副本数据同步策略</a></li> <li><a href="#ARISROSR_33" rel="nofollow">AR、ISR、OSR</a></li> <li><a href="#ACK_44" rel="nofollow">ACK应答机制</a></li> <li><a href="#leaderfollower_60" rel="nofollow">分区的leader和follower</a></li> <li><a href="#_69" rel="nofollow">故障处理</a></li> <li><a href="#Controller_78" rel="nofollow">Controller介绍</a></li> <li><a href="#Controller_83" rel="nofollow">Controller的选举</a></li> <li><a href="#Controllerpartition_leader_88" rel="nofollow">Controller选举partition leader</a></li> </ul> </div> <h1><a id="_1" rel="nofollow"></a>数据的可靠性保证</h1> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/a4b808011260bdef64ff5600b30cfbbe.jpg" alt="Kafka如果保证数据的可靠性"></p> <p>为保证 producer 发送的数据，能可靠的发送到指定的 topic，topic 的每个 partition 收到producer 发送的数据后，都需要向 producer 发送 ack（acknowledgement 确认收到），如果 producer 收到 ack，就会进行下一轮的发送，否则重新发送数据。</p> <h1><a id="_5" rel="nofollow"></a>副本数据同步策略</h1> <table> <tbody> <tr> <th>方案</th> <th>优点</th> <th>缺点</th> </tr> <tr> <td>半数以上完成同步，就发送 ack</td> <td>延迟低</td> <td>选举新的 leader 时，容忍 n 台节点的故障，需要 2n+1 个副 本</td> </tr> <tr> <td>全部完成同步，才发送 ack</td> <td>选举新的 leader 时，容忍 n 台节点的故障，需要 n+1 个副 本</td> <td>延迟高</td> </tr> </tbody> </table> <p>Kafka 选择了第二种方案，原因如下：</p> <ol> <li>同样为了容忍 n 台节点的故障，第一种方案需要 2n+1 个副本，而第二种方案只需要 n+1 个副本，而Kafka 的每个分区都有大量的数据，第一种方案会造成大量数据的冗余。</li> <li>虽然第二种方案的网络延迟会比较高，但网络延迟对 Kafka 的影响较小。</li> </ol> <h1><a id="ARISROSR_33" rel="nofollow"></a>AR、ISR、OSR</h1> <p>采用第二种方案之后，设想以下情景：leader 收到数据，所有 follower 都开始同步数据， 但有一个 follower，因为某种故障，迟迟不能与 leader 进行同步，那 leader 就要一直等下去， 直到它完成同步，才能发送 ack。这个问题怎么解决呢？<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/09bdb62f36d46e84beb2a3aeff8d38b1.jpg" alt="Kafka如果保证数据的可靠性"><br /> Kafka中，把 follower 可以按照不同状态分为三类 —— AR、ISR、OSR。</p> <ul> <li>分区的所有副本称为 「AR」（Assigned Replicas —— 已分配的副本）</li> <li>所有与leader副本保持一定程度同步的副本（包括 leader 副本在内）组成 「ISR」（In-Sync Replicas——在同步中的副本）</li> <li>由于 follower 副本同步滞后过多的副本（不包括 leader 副本）组成 「OSR」（Out-of-Sync Replias）</li> <li>AR = ISR + OSR</li> <li>正常情况下，所有的 follower 副本都应该与 leader 副本保持同步，即 AR = ISR，OSR 集合为空。</li> </ul> <p>Leader 维护了一个动态的<code>in-sync replica set (ISR)</code>，意为和 leader 保持同步的 follower 集合。当 ISR 中的 follower 完成数据的同步之后，leader 就会给 follower 发送 ack。如果 follower 长时间 未 向 leader 同 步 数 据 ， 则 该 follower 将 被 踢 出 ISR ， 该 时 间 阈 值 由<code>replica.lag.time.max.ms</code> 参数设定。Leader 发生故障之后，就会从 ISR 中选举新的 leader。</p> <h1><a id="ACK_44" rel="nofollow"></a>ACK应答机制</h1> <p>对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失， 所以没必要等 ISR 中的 follower 全部接收成功。<br /> 所以 Kafka 为用户提供了三种可靠性级别，用户根据对可靠性和延迟的要求进行权衡， 选择以下的配置：</p> <ul> <li> <p>0：producer 不等待 broker 的 ack，这一操作提供了一个最低的延迟，broker 一接收到还没有写入磁盘就已经返回，当 broker 故障时有可能<code>丢失数据</code>；<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/607d9e1956fc70538d151dd53c0c8299.jpg" alt="Kafka如果保证数据的可靠性"></p> </li> <li> <p>1：producer 等待broker 的 ack，partition 的 leader 落盘成功后返回 ack<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/b1535b4450814d3554e9daab2a6c311d.jpg" alt="Kafka如果保证数据的可靠性"></p> <p>如果在 follower 同步成功之前leader 故障，那么将会<code>丢失数据</code>；<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/654f43e3ab89de018b84913f8aab7e20.jpg" alt="Kafka如果保证数据的可靠性"></p> </li> <li> <p>-1（all）：producer 等待 broker 的 ack，partition 的 leader 和 follower 全部落盘成功后才返回 ack<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/dcee862c72c452bfc2b6177986e9dbac.jpg" alt="Kafka如果保证数据的可靠性"></p> <p>但是如果在 follower 同步完成后，broker 发送 ack 之前，leader 发生故障，那么会造成<code>数据重复</code>。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/7d33fc720177e26bdce11fba442e6df5.jpg" alt="Kafka如果保证数据的可靠性"></p> </li> </ul> <h1><a id="leaderfollower_60" rel="nofollow"></a>分区的leader和follower</h1> <p>在 Kafka 中，每个 topic 都可以配置多个分区以及多个副本。每个分区都有一个 leader 以及 0 个或者多个follower，在创建 topic 时，Kafka 会将每个分区的 leader 均匀地分配在每个 broker 上。我们正常使用 kafka 是感觉不到 leader、follower 的存在的。但其实，所有的读写操作都是由 leader 处理，而所有的 follower 都复制 leader 的日志数据文件，如果 leader 出现故障时，follower 就会被选举为 leader。所以，可以这样说：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/d4fd15c24b32154de02c0fa2e683ac9f.jpg" alt="Kafka如果保证数据的可靠性"></p> <ul> <li>Kafka 中的 leader 负责处理读写操作，而 follower 只负责副本数据的同步</li> <li>如果 leader 出现故障，其他 follower 会被重新选举为 leader</li> <li>follower 像一个 consumer 一样，拉取 leader 对应分区的数据，并保存到日志数据文件中</li> </ul> <h1><a id="_69" rel="nofollow"></a>故障处理</h1> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/32d90578aff6b6740ab3159a22ba4ad0.jpg" alt="Kafka如果保证数据的可靠性"><br /><strong>LEO：指的是每个副本最大的 offset；</strong><br /><strong>HW：指的是消费者能见到的最大的 offset，ISR 队列中最小的 LEO</strong></p> <ul> <li><strong>follower 故障</strong> <ul> <li>follower 发生故障后会被临时踢出 ISR，待该 follower 恢复后，follower 会读取本地磁盘记录的上次的 HW，并将 log 文件高于 HW 的部分截取掉，从 HW 开始向 leader 进行同步。等该 follower 的 LEO 大于等于该 Partition 的 HW，即 follower 追上 leader 之后，就可以重新加入 ISR 了。</li> </ul> </li> <li><strong>leader 故障</strong> <ul> <li>leader 发生故障之后，会从 ISR 中选出一个新的 leader，之后，为保证多个副本之间的数据一致性，其余的 follower 会先将各自的 log 文件高于 HW 的部分截掉，然后从新的 leader同步数据。<br /><font color="red"><strong>注：</strong></font>这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复。</li> </ul> </li> </ul> <h1><a id="Controller_78" rel="nofollow"></a>Controller介绍</h1> <ul> <li>Kafka 启动时，会在所有的 broker 中选择一个 controller</li> <li>前面 leader 和 follower 是针对 partition，而 controller 是针对 broker 的</li> <li>创建 topic、或者添加分区、修改副本数量之类的管理任务都是由 controller 完成的</li> <li>Kafka 分区 leader 的选举，也是由 controller 决定的</li> </ul> <h1><a id="Controller_83" rel="nofollow"></a>Controller的选举</h1> <ul> <li>在 Kafka 集群启动的时候，每个 broker 都会尝试去 ZooKeeper 上注册成为 Controller（ZK临时节点）</li> <li>但只有一个竞争成功，其他的 broker 会注册该节点的监视器</li> <li>一但该临时节点状态发生变化，就可以进行相应的处理</li> <li>Controller 也是高可用的，一旦某个 broker 崩溃，其他的 broker 会重新注册为 Controller</li> </ul> <h1><a id="Controllerpartition_leader_88" rel="nofollow"></a>Controller选举partition leader</h1> <ul> <li>所有 Partition 的 leader 选举都由 controller 决定</li> <li>controller 会将 leader 的改变直接通过 RPC 的方式通知需为此作出响应的 Broker</li> <li>controller 读取到当前分区的 ISR，只要有一个 Replica 还幸存，就选择其中一个作为 leader，否则，则任意选择一个 Replica 作为 leader</li> <li>如果该 partition 的所有 Replica 都已经宕机，则新的 leader 为 -1</li> </ul> <p><strong>为什么不能通过ZK的方式来选举partition的leader？</strong></p> <ul> <li>Kafka 集群如果业务很多的情况下，会有很多的 partition</li> <li>假设某个 broker 宕机，就会出现很多的 partiton 都需要重新选举 leader</li> <li>如果使用 zookeeper 选举 leader，会给 zookeeper 带来巨大的压力。所以，kafka 中 leader 的选举不能使用 ZK 来实现</li> </ul> </div> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-901.htm">vue项目中Toast字体过小,没有边距的解决方案_vue.js</a></p>
                                                                        <p>下一个：<a href="/html/category/article-903.htm">vue实现暗黑模式</a></p>
                                                                    </div>

                                                            </div>
                            <div class="col-md-3">
                                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1029.htm" title="python连接数据库并执行SQL语句">python连接数据库并执行SQL语句</a></li>
                        <li class="py-2"><a href="/html/category/article-1048.htm" title="Spring Boot + Mybatis-Plus + jasypt 数据库连接加密">Spring Boot + Mybatis-Plus + jasypt 数据库连接加密</a></li>
                        <li class="py-2"><a href="/html/category/article-1917.htm" title="css图片上面显示文字">css图片上面显示文字</a></li>
                        <li class="py-2"><a href="/html/category/article-3127.htm" title="vuex配置项、多组件数据共享案例详解">vuex配置项、多组件数据共享案例详解</a></li>
                        <li class="py-2"><a href="/html/category/article-3128.htm" title="nohup: redirecting stderr to stdout">nohup: redirecting stderr to stdout</a></li>
                        <li class="py-2"><a href="/html/category/article-1036.htm" title="@DateTimeFormat和@JsonFormat使用">@DateTimeFormat和@JsonFormat使用</a></li>
                        <li class="py-2"><a href="/html/category/article-1038.htm" title="spring boot 导入导出">spring boot 导入导出</a></li>
                        <li class="py-2"><a href="/html/category/article-3429.htm" title="认证与授权流程与spring boot整合 spring security">认证与授权流程与spring boot整合 spring security</a></li>
                        <li class="py-2"><a href="/html/category/article-1041.htm" title="JavaScript深入理解系列：call与apply">JavaScript深入理解系列：call与apply</a></li>
                        <li class="py-2"><a href="/html/category/article-1357.htm" title="pandas读取csv文件时报错的解决方式，你get到了吗？">pandas读取csv文件时报错的解决方式，你get到了吗？</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">56</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                            </div>
                        </div>
                    </div>
                </section>
                                <footer class="footer">
                    <div class="copyright-section">
                        <div class="container clearfix">
                            <span class="copytext">
                                CambodiaAddress 版权所有 Powered by WordPress
                            </span>
                            <ul class="list-inline pull-right">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div><!-- .container -->
                    </div><!-- .copyright-section -->
                </footer>
                <!-- .footer -->
            </div>
            <!-- .content-wrapper -->
        </div>
        <!-- .offcanvas-pusher -->
        <div class="uc-mobile-menu uc-mobile-menu-effect">
            <button type="button" class="close" aria-hidden="true" data-toggle="offcanvas" id="uc-mobile-menu-close-btn">&times;</button>
            <div>
                <div>
                    <ul id="menu">
                        <li><a href="index.html">Home</a></li>
                        <li><a href="about.html">About</a></li>
                        <li><a href="services.html">Services</a></li>
                        <li><a href="contact.html">Contact</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- .uc-mobile-menu -->
    </div>
    <!-- #main-wrapper -->
    <!-- Script -->
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/jquery-2.1.4.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/smoothscroll.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/mobile-menu.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/scripts.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>