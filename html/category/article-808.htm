<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://cambodiaaddress.github.io/html/category/article-808.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>netty系列之:netty中的核心编码器base64 - CambodiaAddress</title>
        <link rel="icon" href="/assets/addons/xcblog/img/cambodiaaddress/favicon.ico" type="image/x-icon"/>
    <!-- web-fonts -->
    <link href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,700,500' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
    <!-- off-canvas -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/mobile-menu.css" rel="stylesheet">
    <!-- font-awesome -->
    <link href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet">
    <!-- Flat Icon -->
    <link href="fonts/flaticon/flaticon.css" rel="stylesheet">
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/style.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?8022148af1f0848b976ee8f0e7db4477";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <div id="main-wrapper">
        <!-- Page Preloader -->
        <div id="preloader">
            <div id="status">
                <div class="status-mes"></div>
            </div>
        </div>
        <div class="uc-mobile-menu-pusher">
            <div class="content-wrapper">
                                <!-- .navbar-top -->
                <nav class="navbar m-menu navbar-default">
                    <div class="container">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse-1">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                                                        <a class="navbar-brand" href="/">Cambodia Address</a>
                                                    </div>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <div class="collapse navbar-collapse" id="#navbar-collapse-1">
                            <ul class="nav navbar-nav navbar-right main-nav">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div>
                        <!-- .navbar-collapse -->
                    </div>
                    <!-- .container -->
                </nav>
                <!-- .nav -->
                <section class="single-page-title single-page-title-about">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <h2>netty系列之:netty中的核心编码器base64</h2>
                            </div>
                        </div>
                    </div>
                </section>
                <!-- .page-title -->
                <section class="featured-box">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-9">
                                <ol class="breadcrumb">
                                  <li><a href="/">首页</a></li>
                                  <li><a href="/html/category/">文章分类</a></li>
                                  <li class="active">正文</li>
                                </ol>

                                  				  				  				<div class="toc"> <div class="toc-container-header"><span style="font-size: 2em;">简介</span></div> </div> <p>我们知道数据在netty中传输是以ByteBuf的形式进行的,可以说ByteBuf是netty的数据传输基础。但是对于现代的应用程序来说，通常我们需要用到其他的数据结构或者类型。</p> <p>为了方便我们在程序中的编写，一种方式就是在将数据传入到netty中的时候由程序员自身将数据格式进行转换，然后再调用netty的系统方法。另外一种方式就是定义一些codec，由netty的内在编码机制将程序中用到的数据格式和ByteBuf进行自动转换。</p> <p>很明显，使用codec的方式更加简捷，也更加符合程序的开发规则。</p> <p>为了方便程序的开发，netty本身在内部定义了一些核心的codec插件，我们在需要的时候直接选用即可。</p> <p>本文将会讲解netty内部实现codec的方式和一个最核心的编码器base64。</p> <h1 id="netty-codec的实现逻辑">netty codec的实现逻辑</h1> <p>所有的netty codec的目的就是在数据传输过程中进行数据类型的转换，换句话说就是对数据进行处理。我们知道netty中有两个对数据进行handler的类，分别是ChannelInboundHandlerAdapter和ChannelOutboundHandlerAdapter，他们分别对应channel中的inbound消息和outbound消息进行处理。</p> <p>所以很自然的，我们的codec逻辑只需要在这两个地方添加即可。</p> <p>netty为我们提供了两个HandlerAdapter类的继承类，分别是MessageToMessageDecoder和MessageToMessageEncoder：</p> <pre><code>public abstract class MessageToMessageEncoder&lt;I&gt; extends ChannelOutboundHandlerAdapter   public abstract class MessageToMessageDecoder&lt;I&gt; extends ChannelInboundHandlerAdapter</code></pre> <p>从名字就可以看出来这两个类分别使用来编码和解码用的，所以我们的codec只需要分别实现这两个类即可。</p> <p>以下是一个StringToIntegerDecoder和IntegerToStringEncoder的例子：</p> <pre><code>       public class StringToIntegerDecoder extends                MessageToMessageDecoder&lt;String&gt; {                @Override            public void decode(ChannelHandlerContext ctx, String message,                               List&lt;Object&gt; out) throws Exception {                out.add(message.length());            }        }</code></pre> <pre><code>       public class IntegerToStringEncoder extends                MessageToMessageEncoder&lt;Integer&gt; {                @Override            public void encode(ChannelHandlerContext ctx, Integer message, List&lt;Object&gt; out)                    throws Exception {                out.add(message.toString());            }        }</code></pre> <p>最简单的实现就是分别重构这两个类的decode和encode方法。</p> <h1 id="netty中base64的实现">netty中Base64的实现</h1> <p>我们知道JDK中已经有了Base64实现的工具类叫做java.util.Base64。但是在netty中又使用了一个新的实现类同样叫做Base64，它的全称是io.netty.handler.codec.base64.Base64。</p> <p>这个Base64类中用到了一个Base64Dialect类，也就是netty中Base64支持的Base64编码方式。Base64Dialect中提供了下面的几种类型：</p> <pre><code>STANDARD URL_SAFE ORDERED</code></pre> <p>其中STANDARD对应的是RFC3548也是JDK中的标准Base64,URL_SAFE对应的是RFC3548中的base64url版本，对应的JDK中的getUrlEncode。</p> <p>最后一个是ORDERED，代表的是RFC1940,这个编码实现在JDK中是没有的。</p> <p>为什么JDK中已经有了Base64的工具类，netty中还需要自己创建一个新的类呢？</p> <p>我们可以考虑一下在netty中Base64用到的场景，通常来说我们是在handler中添加自定义编码，而这些handler主要是针对于数据流进行处理。</p> <p>JDK中自带的Base64实现在定长的数据上使用还是没问题的，但是如果运用于数据流的处理话，效率就会比较低。所以Netty才需要为base64在流数据的情况下重新实现一个Base64类。</p> <p>netty中的实现方式使用的是Robert Harder's Public Domain Base64 Encoder/Decoder。这里就不多讲这个算法的实现逻辑了。感兴趣的朋友可以自行探索。</p> <p>Base64提供了将ByteBuf进行base64编码和解码的方法，我们选择参数最长的方法来观察，如下所示：</p> <pre><code>    public static ByteBuf encode(             ByteBuf src, int off, int len, boolean breakLines, Base64Dialect dialect, ByteBufAllocator allocator)      public static ByteBuf decode(             ByteBuf src, int off, int len, Base64Dialect dialect, ByteBufAllocator allocator)</code></pre> <p>对于encode方法来说，需要下面几个参数：</p> <ol> <li>ByteBuf类型的src，这是我们需要进行编码的源。</li> <li>int类型的off和len，表示的是ByteBuf中要编码数据的位置。</li> <li>boolean类型的breakLines,表示是否添加换行符。</li> <li>Base64Dialect类型的dialect，表示选择的base64编码类型。</li> <li>ByteBufAllocator的allocator，表示返回的ByteBuf的生成方式。</li> </ol> <p>同样的Decode方法，需要下面的几个参数：</p> <ol> <li>ByteBuf类型的src，这是我们需要进行解码的源。</li> <li>int类型的off和len，表示的是ByteBuf中要解码数据的位置。</li> <li>Base64Dialect类型的dialect，表示选择的base64编码类型。</li> <li>ByteBufAllocator的allocator，表示返回的ByteBuf的生成方式。</li> </ol> <h1 id="netty中的base64编码和解码器">netty中的base64编码和解码器</h1> <p>刚刚我们介绍了netty中提供的新的Base64工具类，这个工具类提供了将ByteBuf中数据进行编码和解码的方法。接下来我们看一下netty是如何使用这个工具类实现netty中的base64编码和解码器。</p> <p>netty中提供了对Base64的编码和解码器，分别是Base64Encoder和Base64Decoder, 先来看下Base64编码解码器的基本使用：</p> <pre><code>   ChannelPipeline pipeline = ...;       // Decoders    pipeline.addLast("frameDecoder", new DelimiterBasedFrameDecoder(80, Delimiters.nulDelimiter()));    pipeline.addLast("base64Decoder", new Base64Decoder());       // Encoder    pipeline.addLast("base64Encoder", new Base64Encoder());</code></pre> <p>用起来很简单，只需要把Base64Decoder和Base64Encoder添加到pipeline中即可。</p> <p>有时候Base64Decoder需要和DelimiterBasedFrameDecoder一起使用，尤其是在TCP/IP协议中，因为我们需要根据特定的Delimiters来判断ByteBuf应该被分割为几个frames。这样才能保证数据的有效性。</p> <h2 id="base64encoder">Base64Encoder</h2> <p>首先来看base64的编码器，Base64Encoder的实现比较简单，首先来看下Base64Encoder的定义：</p> <pre><code>public class Base64Encoder extends MessageToMessageEncoder&lt;ByteBuf&gt;</code></pre> <p>Base64Encoder继承自MessageToMessageEncoder，它传入的泛型ByteBuf，表示是将ByteBuf编码为ByteBuf，虽然外部的ByteBuf类型没有变化，但是ByteBuf中的数据已经被编码成为Base64了。</p> <p>接下来是Base64Encoder的构造函数：</p> <pre><code>    public Base64Encoder(boolean breakLines, Base64Dialect dialect) {         this.dialect = ObjectUtil.checkNotNull(dialect, "dialect");         this.breakLines = breakLines;     }</code></pre> <p>Base64Encoder可以接受两个参数，分别是是否有换行符的breakLines和base64编码方式的Base64Dialect。</p> <p>它的encode方法也很简单：</p> <pre><code>    protected void encode(ChannelHandlerContext ctx, ByteBuf msg, List&lt;Object&gt; out) throws Exception {         out.add(Base64.encode(msg, msg.readerIndex(), msg.readableBytes(), breakLines, dialect));     }</code></pre> <p>直接使用的是我们上面讲到的Base64工具类的encode方法，然后把返回值添加到out对象中。</p> <h2 id="base64decoder">Base64Decoder</h2> <p>Base64Decoder用来将ByteBuf中的base64编码的内容解码成为原始内容，先来看下Base64Decoder的定义：</p> <pre><code>public class Base64Decoder extends MessageToMessageDecoder&lt;ByteBuf&gt;</code></pre> <p>Base64Decoder继承了MessageToMessageDecoder，传入的泛型是ByteBuf。</p> <p>先看下Base64Decoder的构造函数：</p> <pre><code>public Base64Decoder(Base64Dialect dialect) {         this.dialect = ObjectUtil.checkNotNull(dialect, "dialect");     }</code></pre> <p>Base64Decoder的构造函数很简单，和Base64Encoder相比它只需要一个参数就是Base64Dialect类型的dialect，表示的是选择的base64解码的方式。</p> <p>接下来就是它的解码方法：</p> <pre><code>    protected void decode(ChannelHandlerContext ctx, ByteBuf msg, List&lt;Object&gt; out) throws Exception {         out.add(Base64.decode(msg, msg.readerIndex(), msg.readableBytes(), dialect));     }</code></pre> <p>解码方法也是调用Base64工具类的decode方法，然后将其添加到返回的out list中去。</p> <h1 id="总结">总结</h1> <p>本章介绍了netty中的核心编码器Base64,它负责将ByteBuf中的消息编码为base64格式，同时提供了对应的解码器，大家可以在需要的时候进行使用。</p> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-807.htm">Vue生产环境调试的方法</a></p>
                                                                        <p>下一个：<a href="/html/category/article-809.htm">ES 文档与索引介绍</a></p>
                                                                    </div>

                                                            </div>
                            <div class="col-md-3">
                                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1034.htm" title="java.sql.ResultSet">java.sql.ResultSet</a></li>
                        <li class="py-2"><a href="/html/category/article-1049.htm" title="python怎么进入虚拟环境_Python 中如何使用 virtualenv 管理虚拟环境">python怎么进入虚拟环境_Python 中如何使用 virtualenv 管理虚拟环境</a></li>
                        <li class="py-2"><a href="/html/category/article-1039.htm" title="使用Kotlin实现百思不得姐弹出菜单">使用Kotlin实现百思不得姐弹出菜单</a></li>
                        <li class="py-2"><a href="/html/category/article-1945.htm" title="Interlaken协议介绍">Interlaken协议介绍</a></li>
                        <li class="py-2"><a href="/html/category/article-1959.htm" title="实战代码（十）：Springboot RestTemplate连接池">实战代码（十）：Springboot RestTemplate连接池</a></li>
                        <li class="py-2"><a href="/html/category/article-2536.htm" title="java实现线程安全的单例模型">java实现线程安全的单例模型</a></li>
                        <li class="py-2"><a href="/html/category/article-1044.htm" title="C ++程序，实现布斯的乘法算法来对两个有符号数相乘">C ++程序，实现布斯的乘法算法来对两个有符号数相乘</a></li>
                        <li class="py-2"><a href="/html/category/article-4073.htm" title="动态修改springboot中的scheduling(动态修改定时任务执行时间)">动态修改springboot中的scheduling(动态修改定时任务执行时间)</a></li>
                        <li class="py-2"><a href="/html/category/article-1635.htm" title="Vue.js 3.x 中跨层级组件如何传递数据？_在线工具">Vue.js 3.x 中跨层级组件如何传递数据？_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-1918.htm" title="java基础面试题">java基础面试题</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">2</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                            </div>
                        </div>
                    </div>
                </section>
                                <footer class="footer">
                    <div class="copyright-section">
                        <div class="container clearfix">
                            <span class="copytext">
                                CambodiaAddress 版权所有 Powered by WordPress
                            </span>
                            <ul class="list-inline pull-right">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div><!-- .container -->
                    </div><!-- .copyright-section -->
                </footer>
                <!-- .footer -->
            </div>
            <!-- .content-wrapper -->
        </div>
        <!-- .offcanvas-pusher -->
        <div class="uc-mobile-menu uc-mobile-menu-effect">
            <button type="button" class="close" aria-hidden="true" data-toggle="offcanvas" id="uc-mobile-menu-close-btn">&times;</button>
            <div>
                <div>
                    <ul id="menu">
                        <li><a href="index.html">Home</a></li>
                        <li><a href="about.html">About</a></li>
                        <li><a href="services.html">Services</a></li>
                        <li><a href="contact.html">Contact</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- .uc-mobile-menu -->
    </div>
    <!-- #main-wrapper -->
    <!-- Script -->
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/jquery-2.1.4.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/smoothscroll.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/mobile-menu.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/scripts.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>