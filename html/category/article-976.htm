<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://cambodiaaddress.github.io/html/category/article-976.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>HBase 技术原理【华为HCIA-BigData】 - CambodiaAddress</title>
        <link rel="icon" href="/assets/addons/xcblog/img/cambodiaaddress/favicon.ico" type="image/x-icon"/>
    <!-- web-fonts -->
    <link href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,700,500' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
    <!-- off-canvas -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/mobile-menu.css" rel="stylesheet">
    <!-- font-awesome -->
    <link href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet">
    <!-- Flat Icon -->
    <link href="fonts/flaticon/flaticon.css" rel="stylesheet">
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/style.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?8022148af1f0848b976ee8f0e7db4477";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <div id="main-wrapper">
        <!-- Page Preloader -->
        <div id="preloader">
            <div id="status">
                <div class="status-mes"></div>
            </div>
        </div>
        <div class="uc-mobile-menu-pusher">
            <div class="content-wrapper">
                                <!-- .navbar-top -->
                <nav class="navbar m-menu navbar-default">
                    <div class="container">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse-1">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                                                        <a class="navbar-brand" href="/">Cambodia Address</a>
                                                    </div>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <div class="collapse navbar-collapse" id="#navbar-collapse-1">
                            <ul class="nav navbar-nav navbar-right main-nav">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div>
                        <!-- .navbar-collapse -->
                    </div>
                    <!-- .container -->
                </nav>
                <!-- .nav -->
                <section class="single-page-title single-page-title-about">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <h2>HBase 技术原理【华为HCIA-BigData】</h2>
                            </div>
                        </div>
                    </div>
                </section>
                <!-- .page-title -->
                <section class="featured-box">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-9">
                                <ol class="breadcrumb">
                                  <li><a href="/">首页</a></li>
                                  <li><a href="/html/category/">文章分类</a></li>
                                  <li class="active">正文</li>
                                </ol>

                                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <div class="toc"> <h3>文章目录</h3> <ul> <li> <ul> <li><a href="#41__2" rel="nofollow">4.1 导读</a></li> <li><a href="#42_HBase__42" rel="nofollow">4.2 HBase 简介</a></li> <li> <ul> <li><a href="#1_HBaseRDB_57" rel="nofollow">1. HBase与RDB的对比</a></li> <li><a href="#2_HBase_65" rel="nofollow">2. **HBase应用场景**</a></li> </ul> </li> <li><a href="#43_HBase_89" rel="nofollow">4.3 HBase数据模型</a></li> <li> <ul> <li><a href="#1__91" rel="nofollow">1. 表结构</a></li> <li><a href="#2__102" rel="nofollow">2. 数据存储概念视图和物理视图</a></li> <li><a href="#3__112" rel="nofollow">3. 行存储和列存储的比较</a></li> </ul> </li> <li><a href="#44_HBase_134" rel="nofollow">4.4 HBase体系架构</a></li> <li> <ul> <li><a href="#1__136" rel="nofollow">1. 组件介绍</a></li> <li><a href="#2__156" rel="nofollow">2. 功能介绍</a></li> <li><a href="#3__163" rel="nofollow">3. 存储架构</a></li> <li><a href="#4_Region_174" rel="nofollow">4. Region</a></li> <li> <ul> <li><a href="#Region__176" rel="nofollow">Region 的分裂</a></li> <li><a href="#_182" rel="nofollow">查找与定位</a></li> <li><a href="#HRegionServer_197" rel="nofollow">HRegionServer</a></li> </ul> </li> </ul> </li> <li><a href="#45_HBase__201" rel="nofollow">4.5 HBase 关键流程</a></li> <li> <ul> <li><a href="#1__203" rel="nofollow">1. 用户读写数据过程</a></li> <li><a href="#2_Store__210" rel="nofollow">2. Store 刷新缓存</a></li> <li><a href="#3__216" rel="nofollow">3. 工作原理</a></li> <li> <ul> <li><a href="#Store__218" rel="nofollow">Store 工作原理</a></li> <li><a href="#Hlog__225" rel="nofollow">Hlog 工作原理</a></li> <li><a href="#_232" rel="nofollow">**故障处理流程**</a></li> </ul> </li> </ul> </li> <li><a href="#46_Hbase__241" rel="nofollow">4.6 Hbase 突出特点</a></li> <li> <ul> <li><a href="#1_Compaction_243" rel="nofollow">1. Compaction（压缩）</a></li> <li><a href="#2_OpenScanner_257" rel="nofollow">2. OpenScanner</a></li> <li><a href="#3_BloomFilter_268" rel="nofollow">3. BloomFilter</a></li> </ul> </li> <li><a href="#47_HBase__276" rel="nofollow">4.7 HBase 性能优化</a></li> <li> <ul> <li><a href="#1_Row_Key_278" rel="nofollow">1. 行键（Row Key）</a></li> <li><a href="#2__285" rel="nofollow">2. 二级索引</a></li> </ul> </li> <li><a href="#48_HBase__Shell__302" rel="nofollow">4.8 HBase 常用 Shell 命令</a></li> <li><a href="#49__307" rel="nofollow">4.9 课后习题</a></li> </ul> </li> </ul> </div> <h2><a id="41__2" rel="nofollow"></a>4.1 导读</h2> <p>本章主要讲述开源的非关系型分布式数据库HBase，它可以满足大规模数据<strong>实时</strong>处理应用的需求。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/b473222571ac08accaaf91c2f30da7cd.jpg" alt="HBase 技术原理【华为HCIA-BigData】"></p> <ul> <li> <p>HBase能否应用于实时响应查询计算的应用场景？</p> <blockquote> <p>HBase的优势在于实时计算，所有实时数据都直接存入HBase中，客户端通过API直接访问HBase，实现实时计算。由于它使用的是nosql，或者说是列式结构，从而提高了查找性能，使其能运用于大数据场景，这是它跟MapReduce的区别。</p> </blockquote> </li> <li> <p>为什么说HBase是键值类型数据库？</p> <blockquote> <p>KV将简单的键映射到（可能）更复杂的值，就像一个巨大的哈希表。</p> </blockquote> </li> <li> <p>HBase的主要角色有哪些？分别提供什么作用？</p> <ul> <li> <p>HMaster</p> <blockquote> <p>监控RegionServer<br /> 处理RegionServer故障转移<br /> 处理元数据变更<br /> 处理region的分配或移除<br /> 空闲时对数据进行负载均衡<br /> 通过zookeeper发布自己的位置给客户端</p> </blockquote> </li> <li> <p>RegionServer</p> <blockquote> <p>负责存储Hbase的实际数据<br /> 处理分配给它的region<br /> 刷新缓存到HDFS上<br /> 维护HLog<br /> 执行压缩<br /> 负责处理Region分片</p> </blockquote> </li> </ul> </li> <li> <p>Zookeeper对HBase提供了什么服务支持？</p> <blockquote> <p>Zookeeper 作用有三点：<br /> 1、分布式锁<br /> 2、事件监控<br /> 3、存储HBase的Region Server数据，充当微型数据库</p> </blockquote> </li> </ul> <h2><a id="42_HBase__42" rel="nofollow"></a>4.2 HBase 简介</h2> <p>HBase是一个高可靠性、高性能、<strong>面向列</strong>、可伸缩的分布式存储系统。</p> <ul> <li> <p>适合于存储大表数据（表的规模可以达到数十亿行以及数百万列），并且对大表数据的读、写访问可以达到实时级别。</p> <blockquote> <p>大表（bigtable）结构：BigTable是一个疏松的分布式的持久的多维排序的map，这个map有行健、列键和时间戳索引，每一个值都是连续的byte数组。</p> </blockquote> </li> <li> <p>利用Hadoop HDFS ( Hadoop Distributed File System )作为其文件存储系统，提供实时读写的分布式数据库系统。</p> </li> <li> <p>利用Zookeeper作为协同服务。</p> <p>Zookeeper 作用有三点：<br /> 1、分布式锁<br /> 2、事件监控<br /> 3、存储HBase的Region Server数据，充当微型数据库</p> </li> </ul> <h3><a id="1_HBaseRDB_57" rel="nofollow"></a>1. HBase与RDB的对比</h3> <p>HBase与传统的关系数据库的区别主要体现在以下几个方面：</p> <ul> <li><strong>数据索引</strong>：关系数据库通常可以针对不同列构建复杂的多个索引，以提高数据访问性能。HBase只有一个索引——<strong>行键</strong> (row key)，通过巧妙的设计，HBase中的所有访问方法，或者通过行键访问，或者通过行键扫描，从而使得整个系统不会慢下来。</li> <li><strong>数据维护</strong>：在关系数据库中，更新操作会用最新的当前值去替换记录中原来的旧值，旧值被覆盖后就不会存在。而在HBase中执行更新操作时，并不会删除数据旧的版本，而是<strong>生成一个新的版本</strong>，旧有的版本仍然保留。</li> <li><strong>可伸缩性</strong>：关系数据库很难实现横向扩展，纵向扩展的空间也比较有限。相反，HBase和BigTable这些分布式数据库就是为了实现灵活的水平扩展而开发的，能够轻易地通过在集群中增加或者减少硬件数量来实现性能的伸缩。</li> </ul> <h3><a id="2_HBase_65" rel="nofollow"></a>2.<strong>HBase应用场景</strong></h3> <p>HBase适合具有如下需求的应用:</p> <ul> <li>海量数据(TB、PB)</li> <li>不需要完全拥有传统关系型数据库所具备的ACID特性。</li> <li>高吞吐量</li> <li>需要在海量数据中实现高效的随机读取</li> <li>需要很好的性能伸缩能力。</li> <li>能够同时处理结构化和非结构化的数据</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/e028bb12d7e682f903f004f23bba5961.jpg" alt="HBase 技术原理【华为HCIA-BigData】"></p> <blockquote> <p>• 对象存储：1B~100M 对象存储（图片、网页、文本、新闻） —— 海量存储<br /> • 时序数据：时间序列数据（传感器、监控数据、股票K线）—— 高并发/海量存储<br /> • 气象数据：卫星轨道、气象数据 —— 高并发/海量存储<br /> • Cube分析：实时报表 —— 高并发/海量存储<br /> • NewSQL：元数据库、索引查询 —— SQL、二级索引、动态列<br /> • Feeds流：朋友圈 —— 高并发请求<br /> • 消息/订单存储：聊天信息、订单/保存存储 —— 强同步 海量数据<br /> • 用户画像：用户特征存储 —— 万列稀疏矩阵<br /> • 兼容结构化/非结构化数据，数据存储容量大，高并发，低时延，低成本的数据库</p> </blockquote> <h2><a id="43_HBase_89" rel="nofollow"></a>4.3 HBase数据模型</h2> <h3><a id="1__91" rel="nofollow"></a>1. 表结构</h3> <ul> <li>表：HBase采用表来组织数据，表由行和列组成，<strong>列划分为若干个列族</strong>。</li> <li>行：每个HBase表都由若干行组成，<strong>每个行由行键（row key）来标识</strong>。表按key排序，排序方式是针对字节的，所有的表都必须要有主键-key。</li> <li>列族：一个HBase表被分组成许多“列族” ( Column Family )的集合，它是<strong>基本的访问控制单元。</strong></li> <li>单元格：行和列的交叉点称之为cell（单元格），cell是<strong>版本化</strong>的，根据时间戳对应不同版本。单元格中存储的数据没有数据类型，总被视为<strong>字节数组byte[]</strong>，所以任何类型数据都可以保存进去。</li> <li>时间戳：每个单元格都保存着同一份数据的多个版本，这些版本采用时间戳进行索引。</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/d6fbbf0e81b7baecac458fca5ff3e3fd.jpg" alt="HBase 技术原理【华为HCIA-BigData】"></p> <h3><a id="2__102" rel="nofollow"></a>2. 数据存储概念视图和物理视图</h3> <p>有一个名为webtable的表，包含两个列族: contents和anchor。在这个例子里面，anchor 有两列(anchor:aa.com, anchor:bb.com)，contents仅有1列(contents:html)，这是概念视图。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/59242b68fe1a92503ed17685f6b37400.jpg" alt="HBase 技术原理【华为HCIA-BigData】"></p> <p>尽管在概念视图里，表可以被看成是一个<strong>稀疏的行的集合</strong>。但在物理上，它的是区分列族存储的。新的columns可以不经过声明直接加入一个列族。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/e4eb8e9241cb6b2b6cef4df4798e6f6f.jpg" alt="HBase 技术原理【华为HCIA-BigData】"></p> <h3><a id="3__112" rel="nofollow"></a>3. 行存储和列存储的比较</h3> <ul> <li> <p>行存储：数据按行存储在底层文件系统中。通常，每一行会被分配固定的空间。</p> <p>优点:有利于增加/修改整行记录等操作;有利于整行数据的读取操作。</p> <p>缺点:单列查询时,会读取一些不必要的数据。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/8f364ecd2f4e168fd6f65a0c79aba492.jpg" alt="HBase 技术原理【华为HCIA-BigData】"></p> </li> <li> <p>列存储：数据以列为单位，存储在底层文件系统中。</p> <p>HBase采用列存储，为<strong>每个单元格中的值还要加上一个键。</strong></p> <p>优点：有利于面向单列数据的读取/统计等操作。</p> <p>缺点：整行读取时，可能需要多次I/O操作。</p> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/3b7de2846a59f5b2158a0796fcb19255.jpg" alt="HBase 技术原理【华为HCIA-BigData】"></p> <h2><a id="44_HBase_134" rel="nofollow"></a>4.4 HBase体系架构</h2> <h3><a id="1__136" rel="nofollow"></a>1. 组件介绍</h3> <ul> <li><strong>Client</strong> 是HBase客户端，包含一些接口。使用HBase的RPC（远程过程调用）机制与Master、RegionServer进行通信。Client与Master进行管理类通信，与RegionServer进行数据操作类通信。</li> <li><strong>ZooKeeper</strong>为HBase集群中各进程提供分布式协作服务（三种服务）。各RegionServer将自己的信息注册 到Zookeeper中，主用Master据此感知各个RegionServer的健康状态。</li> <li><strong>HMaster</strong>即主控节点，在HA模式下，包含主用Master和备用Master。 <ul> <li>主用Master：负责HBase中RegionServer的管理，包括表的增删改查；RegionServer 的负载均衡；Region分布调整；Region分裂以及分裂后的Region分配；RegionServer失效后的Region迁移等。</li> <li>备用Master：当主用Master故障时，备用 Master 通过选举将取代主用Master对外提供服务。 故障恢复后，原主用Master降为备用。</li> </ul> </li> <li><strong>HRegionServer</strong> 即slaver节点，负责提供表数据读写等服务和数据存储，是HBase的数据处理和计算单元。<strong>RegionServer 一般与HDFS集群的DataNode部署在一起</strong>，实现数据的存储功能。</li> <li><strong>HDFS</strong>为HBase提供高可靠的文件存储服务，<strong>HBase的数据全部存储在HDFS</strong>中，转化成 DataNode 中的block。</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/3e846518cee44fd81fdfbdeccac8ea12.jpg" alt="HBase 技术原理【华为HCIA-BigData】"></p> <ul> <li>HBase的架构包括三个主要的功能组件: <ul> <li>库函数:链接到每个客户端</li> <li>一个HMaster主服务器</li> <li>多个HRegionServer服务器</li> </ul> </li> <li><strong>MemStore</strong>：当RegionServer中的MemStore大小达到配置的容量上限时，RegionServer会 将MemStore中的数据“flush”到HDFS中。</li> <li><strong>StoreFile</strong>：随着数据的插入,一个Store会产生多个StoreFile，当StoreFile的个数达到配置的最大值时，RegionServer会将多个StoreFile合并为一个大的StoreFile。</li> </ul> <h3><a id="2__156" rel="nofollow"></a>2. 功能介绍</h3> <ul> <li>主服务器<strong>HMaster</strong>负责管理和维护HBase表的分区信息，维护HRegionServer列表，分配Region，负载均衡。</li> <li>HRegionServer负责存储和维护分配给自己的Region，处理来自客户端的读写请求。</li> <li>客户端并不是直接从HMaster主服务器上读取数据，而是在获得Region的存储位置信息后，直接从HRegionServer上读取数据。</li> <li><strong>客户端并不依赖HMaster</strong>，而是通过Zookeeper来获得Region位置信息，大多数客户端甚至从来不和HMaster通信，这种设计方式使得HMaster负载很小。（也有例外，例如想创建表和表的结构需要与Master通信）</li> </ul> <h3><a id="3__163" rel="nofollow"></a>3. 存储架构</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/7ec7ac1da4fae03568b007668f8942a7.jpg" alt="HBase 技术原理【华为HCIA-BigData】"></p> <p>表 Table 根据行键 rowkey 横向划分，起始 rowkey 和结束 rowkey 划为一个区域存储为 Region。</p> <p>一个 Region 下包含若干个 Store，每个 Store 根据列簇存储相应的 Region 数据。</p> <p>MemStore 是缓存，用于临时写和查找，StoreFile 把相应 Region 数据存储到具体的物理表上，Block 就是实际的数据表，采用 Block 方式存到 HDFS 上。</p> <h3><a id="4_Region_174" rel="nofollow"></a>4. Region</h3> <h4><a id="Region__176" rel="nofollow"></a>Region 的分裂</h4> <p>HBase表开始只有一个Region，随数据增多不断分裂。Region拆分操作非常快，拆分时的Region读取的仍然是原存储文件，直到分裂结束，把存储文件异步地写到独立的文件后，才会读取新文件。</p> <h4><a id="_182" rel="nofollow"></a>查找与定位</h4> <p>旧版本HBase采用<code>ZooKeeper文件 - root表 - meta表</code> 三级表结构查找用户 Region。</p> <p>新版本去掉了 root 表，仅保留元数据表 hbase:meta，其位置信息存储于 ZooKeeper 中，meta 表中记录了用户 Region 位置信息。</p> <p>读写时先找 Meta Region，再由其中信息找 User Region。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/d37968de23facc97c278048bb1a9f24e.jpg" alt="HBase 技术原理【华为HCIA-BigData】"></p> <p>为了加快访问速度，hbase:meta表会被保存在内存中。</p> <p>假设hbase:meta表的每行（一个映射条目）在内存中大约占用1KB，并且每个Region限制为128MB。两层结构可以保存的Region数目是128MB/1KB =<span class="katex--inline"><span class="katex"><span class="katex-mathml"></p> <p>         2</p> <p>         17</p> <p>       2^{17}</span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.814108em; vertical-align: 0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height: 0.814108em;"><span class="" style="top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span></span></span>个Region。</p> <h4><a id="HRegionServer_197" rel="nofollow"></a>HRegionServer</h4> <p>HRegionServer是HBase中最核心的模块。负责存储维护分配给自己的Region，响应用户的读写请求，报告自己的心跳信息给ZooKeeper。</p> <h2><a id="45_HBase__201" rel="nofollow"></a>4.5 HBase 关键流程</h2> <h3><a id="1__203" rel="nofollow"></a>1. 用户读写数据过程</h3> <ol> <li>用户写入数据时，先访问 ZooKeeper，找到要写入的 Region，查找相应的 HRegionServer 服务器去执行写。</li> <li>用户数据首先被写入到Hlog中，得到一个反馈值再写入MemStore中，最终写到磁盘上形成StoreFile。</li> <li>只有当操作写入Hlog之后，<code>commit()</code>调用才会将其返回给客户端，带代表一个事务的完成。</li> <li>当用户读取数据时，HRegionServer会首先访问Memstore缓存，如果找不到，再去磁盘上面的StoreFile中寻找。</li> </ol> <h3><a id="2_Store__210" rel="nofollow"></a>2. Store 刷新缓存</h3> <ul> <li>系统会周期性地把MemStore缓存里的内容刷写到磁盘的Storefile文件中，清空缓存，并在Hlog里面写入一个标记。</li> <li>每次刷写都生成一个新的StoreFile文件，因此每个Store包含多个StoreFile文件。数量太多时会影响查找速度，所以当数量达到阀值时会调用<code>Store.compact()</code> 把多个合并成一个（此过程比较耗费资源）。</li> <li>每个HRegionServer都有一个自己的HLog文件，其中的很多个 Region 共用这个 Hlog 文件。每次启动都检查该文件，确认最近一次执行缓存刷新操作之后是否发生新的写入操作，如果发现更新，则先写入MemStore，再刷写到StoreFile，然后开始为用户提供服务。</li> </ul> <h3><a id="3__216" rel="nofollow"></a>3. 工作原理</h3> <h4><a id="Store__218" rel="nofollow"></a>Store 工作原理</h4> <p>Store是HRegionServer的核心，数量过多时可以多个StoreFile合并成一个。单个StoreFile过大时，又触发分裂操作，1个父Region被分裂成两个子Region。这样可以提高用户的查询效率。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/630c1558038923389dfd9e62269bb7fb.jpg" alt="HBase 技术原理【华为HCIA-BigData】"></p> <h4><a id="Hlog__225" rel="nofollow"></a>Hlog 工作原理</h4> <p>分布式环境必须要考虑系统出错，HBase采用HLog保证系统恢复。</p> <ul> <li>HBase系统为每个HRegionServer配置了一个HLog文件，它是一种预写式日志(Write Ahead Log)。其中的很多个 Region 共用这个 Hlog 文件。</li> <li>用户更新数据必须首先写入 Hlog 后，才能写入MemStore缓存。并且直到对应的日志已经写入磁盘，该缓存内容才能被刷写到磁盘。</li> </ul> <h4><a id="_232" rel="nofollow"></a><strong>故障处理流程</strong></h4> <ol> <li>Zookeeper会实时监测每个HRegionServer的状态，当某个HRegionServer发生故障时，Zookeeper会通知 HMaster。</li> <li>HMaster首先会处理该故障HRegionServer上面遗留的HLog文件，这个遗留的HLog文件中包含了来自多个Region对象的日志记录。</li> <li>系统会根据每条日志记录所属的Region对象对HLog数据进行<strong>拆分</strong>，分别放到相应Region对象的目录下，然后再将失效的Region重新分配到可用的HRegionServer中，并把与该Region对象相关的HLog日志记录也发送给相应的HRegionServer 。</li> <li>HRegionServer领取到分配给自己的Region对象以及与之相关的HLog日志记录后，会重新做一遍日志记录中的各种操作，把日志记录中的数据写入到MemStore缓存中，然后,刷新到磁盘的StoreFile文件中，即完成数据恢复。</li> </ol> <p><strong>共用日志</strong>的优点：提高对表的写操作性能。缺点：恢复时需要分拆日志。</p> <h2><a id="46_Hbase__241" rel="nofollow"></a>4.6 Hbase 突出特点</h2> <h3><a id="1_Compaction_243" rel="nofollow"></a>1. Compaction（压缩）</h3> <p>随着时间的增长，业务数据不断的往HBase集群中灌入，这时HFile的数目越来越多，那么查询时延也就越来越大。</p> <p>Compaction的目的，是为了减少同一个Region中同一个ColumnFamily下面的小文件（HFile）数目，从而提升读取的性能。Compaction 过程需要消耗计算资源，中途不能进行读写。</p> <p>Compaction分为Minor, Major两类:</p> <ul> <li>Minor：小范围的Compaction。有最少和最大文件数目限制。通常会选择一些连续时间范围的小文件进行合并。Minor Compaction选取文件时，遵循一定的算法。</li> <li>Major：涉及该Region该ColumnFamily下面的所有的HFile文件。</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/ed14eede9623804ba45c712b0442ded0.jpg" alt="HBase 技术原理【华为HCIA-BigData】"></p> <h3><a id="2_OpenScanner_257" rel="nofollow"></a>2. OpenScanner</h3> <p>这个机制是为了进一步提升读写性能。</p> <p>OpenScanner的过程中，会创建两种不同的Scanner来读取Hfile、MemStore的数据:</p> <ul> <li>HFile对应的Scanner为StoreFileScanner</li> <li>MemStore对应的Scanner为MemstoreScanner.</li> </ul> <p>在寻找到rowkey所对应的RegionServer和Region之后，需要打开一个查找器Scanner，由其具体执行查找数据，Region中会包含内存数据MemStore，文件数据Hfiles，那么在open scanner的时候就需要分别读取这两块数据，打开对应不同的scanner做查询操作。</p> <h3><a id="3_BloomFilter_268" rel="nofollow"></a>3. BloomFilter</h3> <p>为了查找时缩小查找范围，使用BloomFilter用来优化一些随机读取的场景，即Get场景。它可以被用来快速的判断一条用户数据在一个大的数据集合（该数据集合的大部分数据都没法被加载到内存中）中是否存在。</p> <p>BloomFilter在判断一个数据是否存在时，有一定的误判率（不存在判为存在）。但对于不存在的判断结果是可信的。</p> <p>HBase的BloomFilter的相关索引数据被保存在HFile中。</p> <h2><a id="47_HBase__276" rel="nofollow"></a>4.7 HBase 性能优化</h2> <h3><a id="1_Row_Key_278" rel="nofollow"></a>1. 行键（Row Key）</h3> <p>行键是按照字典序存储，因此设计行键时，将经常一起读取的数据存储到一块，将最近可能会被访问的数据放在一块，可以提高性能。</p> <p>举个例子：最近写入HBase表中的数据是最可能被访问的，可以考虑将时间戳作为行键的一部分，由于是字典序排序，所以可以使用Long.MAX-VALUE-timestamp作为行键，这样能保证新写入的数据在读取时可以被快速命中。</p> <h3><a id="2__285" rel="nofollow"></a>2. 二级索引</h3> <p>默认情况下，HBase 只有一个针对行健的素引。要访问HBase表中的行，只有三种方式:</p> <ul> <li>通过单个行健访问</li> <li>通过一个行健的区间来访问</li> <li>全表扫描</li> </ul> <p>为了提高访问速度，HBase 新版本中增加了 coprocessor 特性，可以构建二级索引，例如：</p> <ul> <li>多个表索引</li> <li>多个列索引</li> <li>基于部分列值的索引</li> </ul> <p>华为纯 Java 开发的的 Hindex 就能实现以上功能。redis、solor也能实现这些功能。</p> <h2><a id="48_HBase__Shell__302" rel="nofollow"></a>4.8 HBase 常用 Shell 命令</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/f73204a75b8c3efdfc7d3fac1361bbcf.jpg" alt="HBase 技术原理【华为HCIA-BigData】"></p> <h2><a id="49__307" rel="nofollow"></a>4.9 课后习题</h2> <ol> <li> <p>HBase中的数据以什么形式存储? ( D )</p> <p>A. Int</p> <p>В. Long</p> <p>C. String</p> <p>D. Byte[]</p> </li> <li> <p>HBase的分布式存储的最基本单元是? ( A )</p> <p>A. Region</p> <p>B. Column Family</p> <p>C. Column</p> <p>D. Cell</p> </li> </ol> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/f5c9d03534c7652803d35a5b779c0b57.jpg" alt="HBase 技术原理【华为HCIA-BigData】"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/41148ef870b9ac8d3af3a1ff6115acb3.jpg" alt="HBase 技术原理【华为HCIA-BigData】"><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/8e516966ed5b5df88f8f6ce0f4317e40.jpg" alt="HBase 技术原理【华为HCIA-BigData】"></p> </div> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-975.htm">mysql 独立schema_详解MySQL中的数据类型和schema优化</a></p>
                                                                        <p>下一个：<a href="/html/category/article-977.htm">k8s &#8211; 使用helm安装mysql</a></p>
                                                                    </div>

                                                            </div>
                            <div class="col-md-3">
                                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2535.htm" title="win11系统磁盘被写保护怎么解除">win11系统磁盘被写保护怎么解除</a></li>
                        <li class="py-2"><a href="/html/category/article-4484.htm" title="免费宠物救助站北京（宠物救助站北京电话）">免费宠物救助站北京（宠物救助站北京电话）</a></li>
                        <li class="py-2"><a href="/html/category/article-4448.htm" title="包含生产动物疫苗的上市公司有哪些企业的词条">包含生产动物疫苗的上市公司有哪些企业的词条</a></li>
                        <li class="py-2"><a href="/html/category/article-2829.htm" title="CSS实现文字垂直居中">CSS实现文字垂直居中</a></li>
                        <li class="py-2"><a href="/html/category/article-1049.htm" title="python怎么进入虚拟环境_Python 中如何使用 virtualenv 管理虚拟环境">python怎么进入虚拟环境_Python 中如何使用 virtualenv 管理虚拟环境</a></li>
                        <li class="py-2"><a href="/html/category/article-3736.htm" title="分布式一致性算法 2PC与3PC">分布式一致性算法 2PC与3PC</a></li>
                        <li class="py-2"><a href="/html/category/article-4101.htm" title="java利用RestTemplate 发送post请求">java利用RestTemplate 发送post请求</a></li>
                        <li class="py-2"><a href="/html/category/article-4129.htm" title="SpringBoot-2-3-x分层构建Docker镜像实践，docker教程学习">SpringBoot-2-3-x分层构建Docker镜像实践，docker教程学习</a></li>
                        <li class="py-2"><a href="/html/category/article-2246.htm" title="Java中自定义注解的使用">Java中自定义注解的使用</a></li>
                        <li class="py-2"><a href="/html/category/article-1051.htm" title="FeignClient参数">FeignClient参数</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                            </div>
                        </div>
                    </div>
                </section>
                                <footer class="footer">
                    <div class="copyright-section">
                        <div class="container clearfix">
                            <span class="copytext">
                                CambodiaAddress 版权所有 Powered by WordPress
                            </span>
                            <ul class="list-inline pull-right">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div><!-- .container -->
                    </div><!-- .copyright-section -->
                </footer>
                <!-- .footer -->
            </div>
            <!-- .content-wrapper -->
        </div>
        <!-- .offcanvas-pusher -->
        <div class="uc-mobile-menu uc-mobile-menu-effect">
            <button type="button" class="close" aria-hidden="true" data-toggle="offcanvas" id="uc-mobile-menu-close-btn">&times;</button>
            <div>
                <div>
                    <ul id="menu">
                        <li><a href="index.html">Home</a></li>
                        <li><a href="about.html">About</a></li>
                        <li><a href="services.html">Services</a></li>
                        <li><a href="contact.html">Contact</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- .uc-mobile-menu -->
    </div>
    <!-- #main-wrapper -->
    <!-- Script -->
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/jquery-2.1.4.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/smoothscroll.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/mobile-menu.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/scripts.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>