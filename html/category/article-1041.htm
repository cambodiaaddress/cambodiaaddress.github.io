<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://cambodiaaddress.github.io/html/category/article-1041.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>JavaScript深入理解系列：call与apply - CambodiaAddress</title>
        <link rel="icon" href="/assets/addons/xcblog/img/cambodiaaddress/favicon.ico" type="image/x-icon"/>
    <!-- web-fonts -->
    <link href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,700,500' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
    <!-- off-canvas -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/mobile-menu.css" rel="stylesheet">
    <!-- font-awesome -->
    <link href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet">
    <!-- Flat Icon -->
    <link href="fonts/flaticon/flaticon.css" rel="stylesheet">
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/style.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?8022148af1f0848b976ee8f0e7db4477";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <div id="main-wrapper">
        <!-- Page Preloader -->
        <div id="preloader">
            <div id="status">
                <div class="status-mes"></div>
            </div>
        </div>
        <div class="uc-mobile-menu-pusher">
            <div class="content-wrapper">
                                <!-- .navbar-top -->
                <nav class="navbar m-menu navbar-default">
                    <div class="container">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse-1">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                                                        <a class="navbar-brand" href="/">Cambodia Address</a>
                                                    </div>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <div class="collapse navbar-collapse" id="#navbar-collapse-1">
                            <ul class="nav navbar-nav navbar-right main-nav">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div>
                        <!-- .navbar-collapse -->
                    </div>
                    <!-- .container -->
                </nav>
                <!-- .nav -->
                <section class="single-page-title single-page-title-about">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <h2>JavaScript深入理解系列：call与apply</h2>
                            </div>
                        </div>
                    </div>
                </section>
                <!-- .page-title -->
                <section class="featured-box">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-9">
                                <ol class="breadcrumb">
                                  <li><a href="/">首页</a></li>
                                  <li><a href="/html/category/">文章分类</a></li>
                                  <li class="active">正文</li>
                                </ol>

                                  				  				  				<h1 id="定义">定义</h1> <p>call和apply：函数调动call()方法在执行的时候，函数的里面的this会指向第一个参数值，除第一个参数值后面的若干支都是传进该函数，简而言之就是改变函数运行时的this指向。</p> <pre><code>使用示例： fn.call(obj, args1, args2...), fn.apply(obj, [arg1, arg2 ...]), call与apply调用除了第二个传参方式不一样，其余一样。</code></pre> <p>举个例子1：</p> <pre><code class="language-js">var  obj = {     name: '程序员米粉' }; function fn() {     console.log(this.name) } fn() // this.name =&gt; undefined fn.call(obj) // this.name =&gt; '程序员米粉'</code></pre> <p>总结：</p> <pre><code>1、fn函数调动call方法执行时候，函数的this指向了obj 2、call方法和fn函数都执行了。</code></pre> <p>如果还看不明白，fn.call(obj)执行的时候，可以看作在obj对象里面有个fn函数执行。那么fn函数里面的this指向就是obj</p> <p>再举个例子2：</p> <pre><code class="language-js">var  obj = {     name: '程序员米粉',     fn: function() {         console.log(this.name)     } }; obj.fn(); // this.name =&gt; '程序员米粉'</code></pre> <p>总结：</p> <pre><code>1、例子1中的 fn.call(obj)执行的时候，相当于例子2 obj.fn(); call方法被调用的时候，会改变当前调用函数的执行上下文（就是改变this指向）。</code></pre> <h1 id="模拟步骤1">模拟步骤1</h1> <p>例子1：</p> <pre><code class="language-js">var  obj = {     name: '程序员米粉' }; function fn() {     console.log(this.name) } fn.call(obj) // this.name =&gt; '程序员米粉'</code></pre> <p>例子2：</p> <pre><code class="language-js">var  obj = {     name: '程序员米粉',     fn: function() {         console.log(this.name)     } }; obj.fn(); // this.name =&gt; '程序员米粉'</code></pre> <p>要实现自己的myCall方法，首先观察例子1和例子2中测 obj对象，有什么不一样。</p> <p>不一样：</p> <pre><code>1、例子2中obj添加了fn函数方法。 2、例子2执行方法是obj.fn()执行，而例子1中执行方法是 fn.call(obj)。</code></pre> <p>这就好办了，我们如何把例子1改造成例子2呢？<br /> 我们总结一下步骤：</p> <pre><code>1、把fn函数设置为对象的一个属性 2、调用fn函数执行。 3、调用完毕之后，从对象中删除fn属性（函数）。 （给对象增加了属性，我们调用完就可以删掉）</code></pre> <p>思路有了，那代码我们可以写成这样：</p> <pre><code>```js obj.fn = fn; obj.fn(); delete obj.fn; // 删除属性 ```</code></pre> <p>根据上述思路，那按照这个思路，写一个我们自己的myCall方法：</p> <pre><code>```js Function.prototype.myCall = function(context) {     context.fn = this;     context.fn();     delete context.fn; }; var  obj = {     name: '程序员米粉' }; function fn() {     console.log(this.name); } fn.myCall(obj) // this.name =&gt; '程序员米粉'  ````</code></pre> <p>执行一下myCall方法，可以得出来，this指向obj对象，并打印了期望的值，所以这个方法第一步完成了！</p> <h1 id="模拟步骤2">模拟步骤2</h1> <p>继续完善一下myCall方法，把fn方法改一下，增加2个参数, 再执行一下方法。</p> <pre><code class="language-js">function fn(index, value) { 	console.log(this.name);     console.log(index, value); }  fn.myCall(obj, 111, '我是一个值'); // this.name =&gt; '程序员米粉' // undefined, undefined</code></pre> <p>执行一个fn函数，只打印一个值出来，传进入的参数，没有打印出来。那需要改造一下方法，使参数也能打印出来。我们可以从arguments对象中取值，arguments对像代表函数传进来的对象，打印看看就知道了。</p> <pre><code class="language-js">Function.prototype.myCall = function(context) {     console.log(arguments); 	context.fn = this; 	context.fn(); 	delete context.fn; };</code></pre> <p>打印出来的 arguments对象：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/f0968c3254c0938f4b3aefa9de25ece7.jpg" alt="JavaScript深入理解系列：call与apply"></p> <p>我们可以看到 arguments 对象结构是：</p> <pre><code class="language-js">{      '0': { name: '程序员米粉' },      '1': 111,      '2': '我是一个值'  }</code></pre> <p>0代表传进来的第1个参数，1代表第2个参数，以此类推。我们看到arguments是一个类数组，那就可以用数组方法，存储起来， 由于我们只是获取参数，所以从1开始取值。</p> <pre><code class="language-js">var args = []; for (var i = 1; i &lt; arguments.length; i++) {     args.push('arguments[' + i + ']'); } // args为 ["arguments[1]", "arguments[2]", "arguments[3]"]</code></pre> <p>取值的参数的问题解决了，我们下一步解决一下，如何把这些参数传给函数执行。</p> <pre><code class="language-js">// 思考一下，怎样才能这样传参给fn函数执行 context.fn(arguments[1], arguments[2]);</code></pre> <p>可能有人想到如下方法：</p> <pre><code class="language-js">// 把数组里的元素通过join方法，传进函数的形参里 context.fn(args.join(','))  // 这样的话，其实 context.fn(args.join(','))执行变成：context.fn("arguments[1]", "arguments[2]"); // 变成了一个字符串，变成了一个死值了，无论传什么，都变成字符串 "arguments[1]", "arguments[2]" 。。。。</code></pre> <p>可以有人又想到用ES6方法来解决。这个call是ES3的方法，所以还是不用ES6方法解决。</p> <p>其实我们可以用 eval方法来解决。查文档得知 eval() 函数会将传入的字符串当做 JavaScript 代码进行执行。这到底是什么意思？</p> <pre><code>eval() 的参数是一个字符串。如果字符串表示的是表达式，eval() 会对表达式进行求值。如果参数表示一个或多个 JavaScript 语句，那么eval() 就会执行这些语句。</code></pre> <p>举个例子：<br /> console.log(eval('2 + 2')); // 2 + 2 =&gt; 4, 最后输出是2<br /> console.log(eval('context.fn(' + args +')')) // 相当于运行 context.fn(arguments[1], arguments[2], ...)，使用eval执行一串 JavaScript 语句。</p> <ul> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval"  target="_blank" rel="nofollow">eval更详细链接；</a></li> </ul> <p>args 会自动调用 Array.toString() 这个方法。通过eval自动执行变成context.fn(arguments[1], arguments[2])这样执行。</p> <p>代码如下：</p> <pre><code class="language-js">var  obj = { 	name: '程序员米粉' };  function fn(index, value) { 	console.log(this.name); // 程序员米粉 	console.log(index, value); // 111 我是一个值 }  Function.prototype.myCall = function(context) { 	context.fn = this; 	var args = []; 	for (var i = 1; i &lt; arguments.length; i++) { 		args.push('arguments[' + i + ']'); 	} 	eval('context.fn(' + args + ')'); 	delete context.fn; };  fn.myCall(obj, 111, '我是一个值'); // this.name =&gt; '程序员米粉'</code></pre> <p>执行一下方法，输入完全符合我们的预期，我们终于搞定了！</p> <h1 id="模拟步骤3">模拟步骤3</h1> <h2 id="第一个参数传null或undefinedthis指向为window">第一个参数传null或undefined，this指向为window</h2> <p>举个例子：</p> <pre><code class="language-js">var name = '程序员米粉'  function fn() { 	console.log(this.name); // 程序员米粉 }  fn.call(null); // this.name =&gt; '程序员米粉'</code></pre> <p>fn执行的时候，还是输出 this.name = '程序员米粉'，说明了什么，只要第一个参数传 null或者undefined，那函数调用call方法，this指向window</p> <h2 id="函数执行call方法有返回值那就返回">函数执行call方法，有返回值，那就返回。</h2> <p>举个例子：</p> <pre><code class="language-js">var name = '程序员米粉'  function fn() { 	console.log(this.name); // 程序员米粉     return {         name: this.name     } }  fn.call(null); // this.name =&gt; '程序员米粉' // 执行fn函数直接返回对象 // { //    name: '程序员米粉' // }</code></pre> <h2 id="最终版实现call代码">最终版实现call代码</h2> <pre><code class="language-js">var obj = { 	name: '程序员米粉' };  function fn(index, value) { 	console.log(this.name); // 程序员米粉 	console.log(index, value); // 111 我是一个值 	return { 		name: this.name, 		index: index, 		value: value 	}; }  Function.prototype.myCall = function(context) { 	var context = context || window; 	context.fn = this; 	var args = []; 	for (var i = 1; i &lt; arguments.length; i++) { 		args.push('arguments[' + i + ']'); 	} 	var result = eval('context.fn(' + args + ')'); 	delete context.fn; 	return result; };  fn.myCall(obj, 111, '我是一个值'); // this.name =&gt; '程序员米粉' // 最终输出 // { //     name: "程序员米粉" //     index: 111 //     value: "我是一个值" // }</code></pre> <h1 id="实现apply代码">实现apply代码</h1> <p>由于apply与call实现原理基本一样，那就不详细叙述了，直接上代码：</p> <pre><code class="language-js">Function.prototype.myApply = function(context, arr) { 	var context = context || window; 	context.fn = this; 	var result; 	if (!arr) { 		result = context.fn(); 	} else { 		var args = []; 		for (var i = 0; i &lt; arr.length; i++) { 			args.push('arr[' + i + ']'); 		} 		result = eval('context.fn(' + args + ')'); 	} 	delete context.fn; 	return result; };</code></pre> <h1 id="结语">结语</h1> <p>希望看完这篇文章对你有帮助：</p> <ul> <li>理解call和apply原理</li> <li>实践自己写一个call和apply方法</li> </ul> <p>文中如有错误，欢迎在评论区指正，如果这篇文章帮助到了你，欢迎点赞和关注，后续会输出更好的分享。</p> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-1040.htm">Hbase(四)：Hbase原理</a></p>
                                                                        <p>下一个：<a href="/html/category/article-1042.htm">python PIL Image 图像处理基本操作实例_python</a></p>
                                                                    </div>

                                                            </div>
                            <div class="col-md-3">
                                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3762.htm" title="Pandas（七）——文本数据（Textual Data）">Pandas（七）——文本数据（Textual Data）</a></li>
                        <li class="py-2"><a href="/html/category/article-2535.htm" title="win11系统磁盘被写保护怎么解除">win11系统磁盘被写保护怎么解除</a></li>
                        <li class="py-2"><a href="/html/category/article-1932.htm" title="nohup: redirecting stderr to stdout的解决办法">nohup: redirecting stderr to stdout的解决办法</a></li>
                        <li class="py-2"><a href="/html/category/article-4101.htm" title="java利用RestTemplate 发送post请求">java利用RestTemplate 发送post请求</a></li>
                        <li class="py-2"><a href="/html/category/article-2829.htm" title="CSS实现文字垂直居中">CSS实现文字垂直居中</a></li>
                        <li class="py-2"><a href="/html/category/article-1946.htm" title="dao层和serivce层的作用和区别">dao层和serivce层的作用和区别</a></li>
                        <li class="py-2"><a href="/html/category/article-1918.htm" title="java基础面试题">java基础面试题</a></li>
                        <li class="py-2"><a href="/html/category/article-4328.htm" title="汉字听写大赛过关技巧（中国汉字听写大会）干货满满，">汉字听写大赛过关技巧（中国汉字听写大会）干货满满，</a></li>
                        <li class="py-2"><a href="/html/category/article-4329.htm" title="宠物医院好评怎么写简短 宠物医院好评怎么写简短一点">宠物医院好评怎么写简短 宠物医院好评怎么写简短一点</a></li>
                        <li class="py-2"><a href="/html/category/article-1327.htm" title="java-websocket断线重连">java-websocket断线重连</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">10</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                            </div>
                        </div>
                    </div>
                </section>
                                <footer class="footer">
                    <div class="copyright-section">
                        <div class="container clearfix">
                            <span class="copytext">
                                CambodiaAddress 版权所有 Powered by WordPress
                            </span>
                            <ul class="list-inline pull-right">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div><!-- .container -->
                    </div><!-- .copyright-section -->
                </footer>
                <!-- .footer -->
            </div>
            <!-- .content-wrapper -->
        </div>
        <!-- .offcanvas-pusher -->
        <div class="uc-mobile-menu uc-mobile-menu-effect">
            <button type="button" class="close" aria-hidden="true" data-toggle="offcanvas" id="uc-mobile-menu-close-btn">&times;</button>
            <div>
                <div>
                    <ul id="menu">
                        <li><a href="index.html">Home</a></li>
                        <li><a href="about.html">About</a></li>
                        <li><a href="services.html">Services</a></li>
                        <li><a href="contact.html">Contact</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- .uc-mobile-menu -->
    </div>
    <!-- #main-wrapper -->
    <!-- Script -->
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/jquery-2.1.4.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/smoothscroll.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/mobile-menu.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/scripts.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>