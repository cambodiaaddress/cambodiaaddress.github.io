<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://cambodiaaddress.github.io/html/category/article-947.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>FreeRTOS学习记录&#8211;任务创建函数详解 - CambodiaAddress</title>
        <link rel="icon" href="/assets/addons/xcblog/img/cambodiaaddress/favicon.ico" type="image/x-icon"/>
    <!-- web-fonts -->
    <link href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,700,500' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
    <!-- off-canvas -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/mobile-menu.css" rel="stylesheet">
    <!-- font-awesome -->
    <link href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet">
    <!-- Flat Icon -->
    <link href="fonts/flaticon/flaticon.css" rel="stylesheet">
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/style.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?8022148af1f0848b976ee8f0e7db4477";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <div id="main-wrapper">
        <!-- Page Preloader -->
        <div id="preloader">
            <div id="status">
                <div class="status-mes"></div>
            </div>
        </div>
        <div class="uc-mobile-menu-pusher">
            <div class="content-wrapper">
                                <!-- .navbar-top -->
                <nav class="navbar m-menu navbar-default">
                    <div class="container">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse-1">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                                                        <a class="navbar-brand" href="/">Cambodia Address</a>
                                                    </div>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <div class="collapse navbar-collapse" id="#navbar-collapse-1">
                            <ul class="nav navbar-nav navbar-right main-nav">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div>
                        <!-- .navbar-collapse -->
                    </div>
                    <!-- .container -->
                </nav>
                <!-- .nav -->
                <section class="single-page-title single-page-title-about">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <h2>FreeRTOS学习记录&#8211;任务创建函数详解</h2>
                            </div>
                        </div>
                    </div>
                </section>
                <!-- .page-title -->
                <section class="featured-box">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-9">
                                <ol class="breadcrumb">
                                  <li><a href="/">首页</a></li>
                                  <li><a href="/html/category/">文章分类</a></li>
                                  <li class="active">正文</li>
                                </ol>

                                  				  				  				<p><span style="font-size: 18px">开局一张图。一步一步分析就好。</span></p> <p><span style="font-size: 18px"><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/4653ff05889a881a72e8774f1f91d350.jpg" alt="FreeRTOS学习记录--任务创建函数详解"></span></p> <p><span style="font-size: 18px">（一）什么是任务？</span></p> <p>　　在多任务系统中，我们按照功能不同，把整个系统分割成一个个独立的，且无法返回的函数，这个函数我们称为任务；任务包含几个属性：任务堆栈，任务函数、任务控制块、任务优先级；下面主要介绍一下任务控制块，其他都比较容易理解。</p> <p><span style="font-size: 18px">（二）什么是任务控制块？</span></p> <p>　　任务控制块内包含了该任务的全部信息，任务的执行需要通过任务调度器来控制，那么任务调度器怎么“控制”任务实体的呢？就要抓住任务的小辫子---“任务控制块”，系统对任务的全部操作都可以通过任务控制块来实现！它是一种特别的数据结构。</p> <p>　　在任务创建函数xTaskCreat()创建任务的时候就会自动给每个任务分配一个任务控制块。</p> <div class="cnblogs_code"> <pre>typedef<span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> tskTaskControlBlock {</span><span style="color: rgba(0, 0, 255, 1)">volatile</span> StackType_t    *pxTopOfStack;<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">任务堆栈栈顶指针</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">#if</span> ( portUSING_MPU_WRAPPERS == 1 )<span style="color: rgba(0, 0, 0, 1)">         xMPU_SETTINGS    xMPUSettings;</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">MPU相关设置</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">#endif</span><span style="color: rgba(0, 0, 0, 1)">      ListItem_t            xStateListItem;</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">状态列表项，这是一个内置在TCB控制块中的一个链表节点，通过这个节点，将任务挂到其他链表中<br/>                                                    比如就绪列表，阻塞列表，挂起列表等*/<br/></span><span style="color: rgba(0, 0, 0, 1)">     ListItem_t            xEventListItem;</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">事件列表项，用于引用事件列表中的任务</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">     UBaseType_t            uxPriority;</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">任务优先级</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">     StackType_t</span>*pxStack;<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">任务堆栈起始地址，是一个栈底</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">char</span>                pcTaskName[ configMAX_TASK_NAME_LEN ];<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">任务名字</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">#if</span> ( portSTACK_GROWTH &gt; 0 )<span style="color: rgba(0, 0, 0, 1)">         StackType_t</span>*pxEndOfStack;<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">任务堆栈栈底</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">#endif</span><span style="color: rgba(0, 0, 255, 1)">#if</span> ( portCRITICAL_NESTING_IN_TCB == 1 )<span style="color: rgba(0, 0, 0, 1)">         UBaseType_t        uxCriticalNesting;</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">临界区嵌套深度</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">#endif</span><span style="color: rgba(0, 0, 255, 1)">#if</span> ( configUSE_TRACE_FACILITY == 1 )<span style="color: rgba(0, 0, 0, 1)">         UBaseType_t        uxTCBNumber;</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">debug的时候用到</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">         UBaseType_t        uxTaskNumber;</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">trace的时候用到</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">#endif</span><span style="color: rgba(0, 0, 255, 1)">#if</span> ( configUSE_MUTEXES == 1 )<span style="color: rgba(0, 0, 0, 1)">         UBaseType_t        uxBasePriority;</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">任务基础优先级，优先级反转时用到</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">         UBaseType_t        uxMutexesHeld;</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">任务获取到的互斥信号量个数</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">#endif</span><span style="color: rgba(0, 0, 255, 1)">#if</span> ( configUSE_APPLICATION_TASK_TAG == 1 )<span style="color: rgba(0, 0, 0, 1)">         TaskHookFunction_t pxTaskTag;</span><span style="color: rgba(0, 0, 255, 1)">#endif</span><span style="color: rgba(0, 0, 255, 1)">#if</span>( configNUM_THREAD_LOCAL_STORAGE_POINTERS &gt; 0 )<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">与本地存储有关</span><span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];</span><span style="color: rgba(0, 0, 255, 1)">#endif</span><span style="color: rgba(0, 0, 255, 1)">#if</span>( configGENERATE_RUN_TIME_STATS == 1 )<span style="color: rgba(0, 0, 0, 1)">         uint32_t        ulRunTimeCounter;</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">用来记录任务运行总时间</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">#endif</span><span style="color: rgba(0, 0, 255, 1)">#if</span> ( configUSE_NEWLIB_REENTRANT == 1 )<span style="color: rgba(0, 0, 255, 1)">struct</span>    _reent xNewLib_reent;<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">定义一个newlib结构体变量</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">#endif</span><span style="color: rgba(0, 0, 255, 1)">#if</span>( configUSE_TASK_NOTIFICATIONS == 1 )    /*任务通知相关变量*/<span style="color: rgba(0, 0, 255, 1)">volatile</span> uint32_t ulNotifiedValue;<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">任务通知值</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">volatile</span> uint8_t ucNotifyState;<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">任务通知状态</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">#endif</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 用来标记任务是动态创建还是静态创建</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">#if</span>( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )<span style="color: rgba(0, 0, 0, 1)">         uint8_t    ucStaticallyAllocated;</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">静态创建此变量为pdTURE;动态创建此变量为pdFALSE</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">#endif</span><span style="color: rgba(0, 0, 255, 1)">#if</span>( INCLUDE_xTaskAbortDelay == 1 )<span style="color: rgba(0, 0, 0, 1)">         uint8_t ucDelayAborted;</span><span style="color: rgba(0, 0, 255, 1)">#endif</span><span style="color: rgba(0, 0, 0, 1)">  } tskTCB;</span></pre> </div> <p>注：#if 开头的都是条件编译，咱们可以先不用理解。基本结构如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/cda6f862f6d246c18f72d8ac841d8c39.jpg" alt="FreeRTOS学习记录--任务创建函数详解"></p> <p>　　　指针pxStack指向堆栈的起始位置，任务创建时会分配指定数目的任务堆栈，申请堆栈内存函数返回的指针就被赋给该变量。</p> <p>　　　很多刚接触FreeRTOS的人会分不清指针pxTopOfStack和pxStack的区别，这里简单说一下：<strong>pxTopOfStack指向当前堆栈栈顶，随着进栈出栈，pxTopOfStack指向的位置是会变化的；<span style="color: rgba(0, 0, 0, 1)">pxStack</span></strong>指向当前堆栈的起始位置，一经分配后，堆栈起始位置就固定了，<strong>不会被改变了</strong>。那么为什么需要pxStack变量呢，这是因为随着任务的运行，堆栈可能会溢出，在堆栈向下增长的系统中，这个变量可用于检查堆栈是否溢出；如果在堆栈向上增长的系统中，要想确定堆栈是否溢出，还需要另外一个变量pxEndOfStack来辅助诊断是否堆栈溢出。</p> <p><span style="font-size: 18px">（三）任务是怎么创建出来的？</span></p> <p><span style="font-size: 18px"><span style="font-size: 15px">任务有两种创建方式，<strong>动态创建</strong>和<strong>静态创建</strong>，两者的区别就是： 静态创建时候任务控制块和任务堆栈的<strong>内存是由用户自己定义的</strong>，任务删除的时候，内存不能自动释放。动态创建，任务堆栈和任务控制块的内存是<strong>由系统自动创建的，自动释放的。</strong></span></span></p> <p><span style="font-size: 18px"><span style="font-size: 15px"><strong></strong>　动态创建任务的函数为 xTaskCreate()；</span></span></p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 0, 1)">BaseType_t xTaskCreate(  TaskFunction_t    pxTaskCode,        //任务函数的名称</span><span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">char</span> *<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 0, 1)"> pcName,            //任务的名称</span><span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 0, 1)"> uint16_t usStackDepth,          //任务堆栈大小</span><span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 0, 1)"> pvParameters,             //任务的形参                         UBaseType_t uxPriority,                 //任务优先级                         TaskHandle_t</span>*<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 0, 1)"> pxCreatedTask )    //  用于传回一个任务句柄，创建任务后使用这个句柄引用（控制）任务。本质上是一个空指针。 {     TCB_t</span>*<span style="color: rgba(0, 0, 0, 1)">pxNewTCB;     BaseType_t xReturn;</span><span style="color: rgba(0, 0, 255, 1)">#define</span> portSTACK_GROWTH<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">-1表示满减栈</span><span style="color: rgba(0, 0, 255, 1)">#if</span>( portSTACK_GROWTH &gt; 0 ){<span style="color: rgba(0, 0, 0, 1)">     }</span><span style="color: rgba(0, 0, 255, 1)">#else</span>{ /* portSTACK_GROWTH&lt;0<span style="color: rgba(0, 128, 0, 1)"> 代表堆栈向下增长</span> */<span style="color: rgba(0, 0, 0, 1)">         StackType_t</span>*<span style="color: rgba(0, 0, 0, 1)">pxStack;</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 任务栈内存分配，stm32是向下增长的堆栈，获取到的pxStack 是一个栈底的指针</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">         pxStack</span>= ( StackType_t *) pvPortMalloc(((( size_t) usStackDepth ) *<span style="color: rgba(0, 0, 255, 1)">sizeof</span><span style="color: rgba(0, 0, 0, 1)">( StackType_t)));</span><span style="color: rgba(0, 0, 255, 1)">if</span>( pxStack !=<span style="color: rgba(0, 0, 0, 1)"> NULL ){</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 任务控制块内存分配</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">             pxNewTCB</span>= ( TCB_t * ) pvPortMalloc(<span style="color: rgba(0, 0, 255, 1)">sizeof</span><span style="color: rgba(0, 0, 0, 1)">( TCB_t ) );</span><span style="color: rgba(0, 0, 255, 1)">if</span>( pxNewTCB !=<span style="color: rgba(0, 0, 0, 1)"> NULL ){</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 赋值栈地址</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">                 pxNewTCB</span>-&gt;pxStack =<span style="color: rgba(0, 0, 0, 1)"> pxStack;             }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">{</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 释放栈空间</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">                 vPortFree( pxStack );             }         }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">{</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 没有分配成功</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">             pxNewTCB</span>=<span style="color: rgba(0, 0, 0, 1)"> NULL;         }     }</span><span style="color: rgba(0, 0, 255, 1)">#endif</span> /* portSTACK_GROWTH */<span style="color: rgba(0, 0, 255, 1)">if</span>( pxNewTCB !=<span style="color: rgba(0, 0, 0, 1)"> NULL )     {</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 新建任务初始化</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">         prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 把任务添加到就绪列表中</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">         prvAddNewTaskToReadyList( pxNewTCB );         xReturn</span>=<span style="color: rgba(0, 0, 0, 1)"> pdPASS;     }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">{         xReturn</span>=<span style="color: rgba(0, 0, 0, 1)"> errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;     }</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> xReturn; }</span></pre> </div> <p>之后，又调用了函数<span style="font-size: 18px"><span style="font-family: 宋体, &quot;Songti SC&quot;">prvInitialiseNewTask(）</span><span style="font-size: 16px">来新建任务初始化。我们看看下面是如何定义的。</span></span></p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> prvInitialiseNewTask(TaskFunction_t            pxTaskCode,</span><span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">char</span> *<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 0, 1)">       pcName,</span><span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 0, 1)"> uint32_t         ulStackDepth,</span><span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 0, 1)">             pvParameters,                                  UBaseType_t             uxPriority,                                  TaskHandle_t</span>*<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 0, 1)">     pxCreatedTask,                                  TCB_t *</span><span style="color: rgba(0, 0, 0, 1)">                pxNewTCB,    //任务控制块</span><span style="color: rgba(0, 0, 255, 1)">const</span> MemoryRegion_t *<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 0, 1)"> xRegions ){     StackType_t</span>*<span style="color: rgba(0, 0, 0, 1)">pxTopOfStack;     UBaseType_t x;</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 计算栈顶的地址</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">#if</span>( portSTACK_GROWTH &lt; 0 ){<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 把栈空间的高地址分配给栈顶</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">         pxTopOfStack</span>= pxNewTCB-&gt;pxStack + ( ulStackDepth - ( uint32_t )<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)"> );</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 栈对齐----栈要8字节对齐</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">         pxTopOfStack</span>= (StackType_t *)(((portPOINTER_SIZE_TYPE) pxTopOfStack) &amp; (~<span style="color: rgba(0, 0, 0, 1)">((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK)));</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 检查是否有错误</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">         configASSERT((((portPOINTER_SIZE_TYPE) pxTopOfStack</span>&amp; (portPOINTER_SIZE_TYPE) portBYTE_ALIGNMENT_MASK) ==<span style="color: rgba(128, 0, 128, 1)">0UL</span><span style="color: rgba(0, 0, 0, 1)">));     }</span><span style="color: rgba(0, 0, 255, 1)">#else</span> /* portSTACK_GROWTH */<span style="color: rgba(0, 0, 0, 1)">     {     }</span><span style="color: rgba(0, 0, 255, 1)">#endif</span> /* portSTACK_GROWTH */<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 存储任务名称</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">for</span>( x = ( UBaseType_t )<span style="color: rgba(128, 0, 128, 1)">0</span>; x &lt; ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++<span style="color: rgba(0, 0, 0, 1)"> ){         pxNewTCB</span>-&gt;pcTaskName[ x ] =<span style="color: rgba(0, 0, 0, 1)"> pcName[ x ];</span><span style="color: rgba(0, 0, 255, 1)">if</span>( pcName[ x ] ==<span style="color: rgba(128, 0, 128, 1)">0x00</span><span style="color: rgba(0, 0, 0, 1)"> ){</span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;         }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">{             mtCOVERAGE_TEST_MARKER();         }     }</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> \0补齐字符串</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">     pxNewTCB</span>-&gt;pcTaskName[ configMAX_TASK_NAME_LEN -<span style="color: rgba(128, 0, 128, 1)">1</span> ] =<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\0</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 判断任务分配的优先级，是否大于最大值  如果超过最大值，赋值最大值</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">if</span>( uxPriority &gt;=<span style="color: rgba(0, 0, 0, 1)"> ( UBaseType_t ) configMAX_PRIORITIES ){         uxPriority</span>= ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t )<span style="color: rgba(128, 0, 128, 1)">1U</span><span style="color: rgba(0, 0, 0, 1)">;     }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">{         mtCOVERAGE_TEST_MARKER();     }</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 赋值任务优先级到任务控制块</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">     pxNewTCB</span>-&gt;uxPriority =<span style="color: rgba(0, 0, 0, 1)"> uxPriority;</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 任务状态表 事件表初始化</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">     vListInitialiseItem(</span>&amp;( pxNewTCB-&gt;<span style="color: rgba(0, 0, 0, 1)">xStateListItem ) );     vListInitialiseItem(</span>&amp;( pxNewTCB-&gt;<span style="color: rgba(0, 0, 0, 1)">xEventListItem ) );</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 设置任务控制块中的状态列表项的成员变量ower ,是属于PxNewTCB(拥有该结点的内核对象)</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">     listSET_LIST_ITEM_OWNER(</span>&amp;( pxNewTCB-&gt;<span style="color: rgba(0, 0, 0, 1)">xStateListItem ), pxNewTCB );</span><span style="color: rgba(0, 0, 0, 1)"><span style="color: rgba(0, 128, 0, 1)">    /*更改事件列表项中的成员变量xItemValue的值，目的是列表在排列的时候，是按照优先级由大到小排列 */</span>     listSET_LIST_ITEM_VALUE(</span>&amp;( pxNewTCB-&gt;xEventListItem ), ( TickType_t ) configMAX_PRIORITIES -<span style="color: rgba(0, 0, 0, 1)"> ( TickType_t ) uxPriority );<br/><span style="color: rgba(0, 128, 0, 1)">/*设置任务控制块中事件列表项的成员变量ower,同上*/</span>     listSET_LIST_ITEM_OWNER(</span>&amp;( pxNewTCB-&gt;<span style="color: rgba(0, 0, 0, 1)">xEventListItem ), pxNewTCB );</span><span style="color: rgba(0, 0, 255, 1)">#if</span>( portUSING_MPU_WRAPPERS == 1 ){<span style="color: rgba(0, 0, 0, 1)">          }</span><span style="color: rgba(0, 0, 255, 1)">#else</span>{ /* portUSING_MPU_WRAPPERS */<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 初始化任务堆栈，之后返回任务栈顶</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">         pxNewTCB</span>-&gt;pxTopOfStack =<span style="color: rgba(0, 0, 0, 1)"> pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );     }</span><span style="color: rgba(0, 0, 255, 1)">#endif</span> /* portUSING_MPU_WRAPPERS */<span style="color: rgba(0, 0, 255, 1)">if</span>( (<span style="color: rgba(0, 0, 255, 1)">void</span> * ) pxCreatedTask !=<span style="color: rgba(0, 0, 0, 1)"> NULL ){</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 任务句柄指向任务控制块</span><span style="color: rgba(0, 128, 0, 1)">*/</span>         *pxCreatedTask =<span style="color: rgba(0, 0, 0, 1)"> ( TaskHandle_t ) pxNewTCB;     }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">{         mtCOVERAGE_TEST_MARKER();     } }</span></pre> </div> <p><span style="font-size: 16px">prvInitialiseNewTask(）函数的形参，出来xTaskCreat()的形参之外，又多出来pxNewTCB和xRegions两个形参；</span></p> <pre><span style="font-size: 16px">后面又调用了</span><strong>pxPortInitialiseStack(StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters)</strong></pre> <pre><span style="font-size: 16px">来初始化任务堆栈。</span></pre> <div class="cnblogs_code"> <pre>StackType_t *pxPortInitialiseStack(StackType_t *pxTopOfStack, TaskFunction_t pxCode,<span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">pvParameters){     pxTopOfStack</span>--;<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 入栈程序状态寄存器</span><span style="color: rgba(0, 128, 0, 1)">*/</span>     *pxTopOfStack = portINITIAL_XPSR;<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> xPSR</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">          pxTopOfStack</span>--;<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 入栈PC指针</span><span style="color: rgba(0, 128, 0, 1)">*/</span>     *pxTopOfStack = ( ( StackType_t ) pxCode ) &amp; portSTART_ADDRESS_MASK;<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> PC</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">          pxTopOfStack</span>--;<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 入栈LR链接寄存器</span><span style="color: rgba(0, 128, 0, 1)">*/</span>     *pxTopOfStack = ( StackType_t ) prvTaskExitError;<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> LR</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">          pxTopOfStack</span>-=<span style="color: rgba(128, 0, 128, 1)">5</span>;<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 跳过R12, R3, R2 and R1这四个寄存器，不初始化</span><span style="color: rgba(0, 128, 0, 1)">*/</span>     *pxTopOfStack = ( StackType_t ) pvParameters;<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> R0作为传参入栈</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">          pxTopOfStack</span>--;<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 保存EXC_RETURN的值，用于退出SVC或PendSV中断时候，处理器处于什么状态</span><span style="color: rgba(0, 128, 0, 1)">*/</span>     *pxTopOfStack =<span style="color: rgba(0, 0, 0, 1)"> portINITIAL_EXEC_RETURN;          pxTopOfStack</span>-=<span style="color: rgba(128, 0, 128, 1)">8</span>;<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 跳过R11, R10, R9, R8, R7, R6, R5 and R4这8个寄存器，不初始化</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">return</span> pxTopOfStack;<span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">最终返回栈顶</span><span style="color: rgba(0, 128, 0, 1)">*/</span></pre> </div> <pre></pre> <p>初始化堆栈完成之后堆栈如下图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b65bab360a12c12eda4630050ec77077.jpg" alt="FreeRTOS学习记录--任务创建函数详解"></p> <p>&nbsp;层层深入完毕，现在我们返回到xTaskCreat()函数后面，看看&nbsp;&nbsp;prvAddNewTaskToReadyList( pxNewTCB ); 函数是怎么把任务添加到就绪列表中！</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">void</span> prvAddNewTaskToReadyList( TCB_t *<span style="color: rgba(0, 0, 0, 1)">pxNewTCB ) {</span><span style="color: rgba(0, 0, 0, 1)">     taskENTER_CRITICAL();     {         uxCurrentNumberOfTasks</span>++<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">if</span>( pxCurrentTCB ==<span style="color: rgba(0, 0, 0, 1)"> NULL )<span style="color: rgba(0, 128, 0, 1)">//正在运行的任务块为NULL,没有任务运行；</span>         {</span><span style="color: rgba(0, 0, 0, 1)">             pxCurrentTCB</span>=<span style="color: rgba(0, 0, 0, 1)"> pxNewTCB;<span style="color: rgba(0, 128, 0, 1)">//将新任务控制块赋值给pxCurrentTCB</span></span><span style="color: rgba(0, 0, 255, 1)">if</span>( uxCurrentNumberOfTasks == ( UBaseType_t )<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)"> )<span style="color: rgba(0, 128, 0, 1)"> //为1说明正在创建的任务是第一个任务。</span>             {</span><span style="color: rgba(0, 0, 0, 1)">                 prvInitialiseTaskLists();<span style="color: rgba(0, 128, 0, 1)">//初始化列表，就绪列表、阻塞列表等等</span>             }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">             {                 mtCOVERAGE_TEST_MARKER();             }         }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">         {</span><span style="color: rgba(0, 0, 255, 1)">if</span>( xSchedulerRunning ==<span style="color: rgba(0, 0, 0, 1)"> pdFALSE )<span style="color: rgba(0, 128, 0, 1)">//判断任务调度器是否运行，pdfalse代表没有运行</span>             {</span><span style="color: rgba(0, 0, 255, 1)">if</span>( pxCurrentTCB-&gt;uxPriority &lt;= pxNewTCB-&gt;<span style="color: rgba(0, 0, 0, 1)">uxPriority )                 {                     pxCurrentTCB</span>=<span style="color: rgba(0, 0, 0, 1)"> pxNewTCB;//<span style="color: rgba(0, 128, 0, 1)">将新创建的任务控制块赋值给当前任务控制块</span>                 }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">                 {                     mtCOVERAGE_TEST_MARKER();                 }             }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">             {                 mtCOVERAGE_TEST_MARKER();             }         }           uxTaskNumber</span>++<span style="color: rgba(0, 0, 0, 1)">;<span style="color: rgba(0, 128, 0, 1)">// 用于任务控制块编号</span></span><span style="color: rgba(0, 0, 255, 1)">#if</span> ( configUSE_TRACE_FACILITY == 1 )<span style="color: rgba(0, 0, 0, 1)">         {</span><span style="color: rgba(0, 0, 0, 1)">             pxNewTCB</span>-&gt;uxTCBNumber =<span style="color: rgba(0, 0, 0, 1)"> uxTaskNumber;         }</span><span style="color: rgba(0, 0, 255, 1)">#endif</span> /* configUSE_TRACE_FACILITY */<span style="color: rgba(0, 0, 0, 1)">         traceTASK_CREATE( pxNewTCB );           prvAddTaskToReadyList( pxNewTCB );<span style="color: rgba(0, 128, 0, 1)">//将任务添加到就绪列表</span>           portSETUP_TCB( pxNewTCB );      }     taskEXIT_CRITICAL();</span><span style="color: rgba(0, 0, 255, 1)">if</span>( xSchedulerRunning !=<span style="color: rgba(0, 0, 0, 1)"> pdFALSE )<span style="color: rgba(0, 128, 0, 1)">//如果任务调调度器在运行，新任务优先级比正在运行的优先级高</span>     {</span><span style="color: rgba(0, 0, 255, 1)">if</span>( pxCurrentTCB-&gt;uxPriority &lt; pxNewTCB-&gt;<span style="color: rgba(0, 0, 0, 1)">uxPriority )         {             taskYIELD_IF_USING_PREEMPTION();<span style="color: rgba(0, 128, 0, 1)">//调用此函数完成一次任务切换</span>         }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">         {             mtCOVERAGE_TEST_MARKER();         }     }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">     {         mtCOVERAGE_TEST_MARKER();     } }</span></pre> </div> <p>&nbsp;　　一定要耐心分析，别无他法，加油！不难。</p> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-946.htm">关于CSS样式的优先级问题</a></p>
                                                                        <p>下一个：<a href="/html/category/article-948.htm">layer-layui的select更改选项后使用form.render()并没能够刷新所选择的元素</a></p>
                                                                    </div>

                                                            </div>
                            <div class="col-md-3">
                                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6067.htm" title="动物医院教案（教学动物医院）">动物医院教案（教学动物医院）</a></li>
                        <li class="py-2"><a href="/html/category/article-6713.htm" title="太极雷雷全名叫啥（不要告诉别人）太极雷雷真名，cctv第一剧场，雷雷，">太极雷雷全名叫啥（不要告诉别人）太极雷雷真名，cctv第一剧场，雷雷，</a></li>
                        <li class="py-2"><a href="/html/category/article-6989.htm" title="动物防疫疫苗的运输规定是什么（动物防疫疫苗的运输规定是什么呢）">动物防疫疫苗的运输规定是什么（动物防疫疫苗的运输规定是什么呢）</a></li>
                        <li class="py-2"><a href="/html/category/article-7449.htm" title="动物打一针疫苗多少钱 动物打一针疫苗多少钱啊">动物打一针疫苗多少钱 动物打一针疫苗多少钱啊</a></li>
                        <li class="py-2"><a href="/html/category/article-6154.htm" title="动物疫苗不小心扎到人身上会怎么样吗视频教程（动物打的疫苗）">动物疫苗不小心扎到人身上会怎么样吗视频教程（动物打的疫苗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7264.htm" title="合肥在哪里领养狗狗的（合肥领养狗狗的网站）">合肥在哪里领养狗狗的（合肥领养狗狗的网站）</a></li>
                        <li class="py-2"><a href="/html/category/article-7173.htm" title="绿联和零度的手机壳哪个好用(绿联和零度的手机壳哪个好一点)">绿联和零度的手机壳哪个好用(绿联和零度的手机壳哪个好一点)</a></li>
                        <li class="py-2"><a href="/html/category/article-6897.htm" title="种植牙在邢台多少钱一颗啊(种植牙在邢台多少钱一颗牙)">种植牙在邢台多少钱一颗啊(种植牙在邢台多少钱一颗牙)</a></li>
                        <li class="py-2"><a href="/html/category/article-4556.htm" title="江苏教育报刊社品牌活动社区平台2020（快来看）江苏教育报刊社品牌活动社区平台网站，零度较量，江苏教育新闻网，">江苏教育报刊社品牌活动社区平台2020（快来看）江苏教育报刊社品牌活动社区平台网站，零度较量，江苏教育新闻网，</a></li>
                        <li class="py-2"><a href="/html/category/article-7356.htm" title="宠物助理医师资格证（宠物助理医师资格证报名官网）">宠物助理医师资格证（宠物助理医师资格证报名官网）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">18</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                            </div>
                        </div>
                    </div>
                </section>
                                <footer class="footer">
                    <div class="copyright-section">
                        <div class="container clearfix">
                            <span class="copytext">
                                CambodiaAddress 版权所有 Powered by WordPress
                            </span>
                            <ul class="list-inline pull-right">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div><!-- .container -->
                    </div><!-- .copyright-section -->
                </footer>
                <!-- .footer -->
            </div>
            <!-- .content-wrapper -->
        </div>
        <!-- .offcanvas-pusher -->
        <div class="uc-mobile-menu uc-mobile-menu-effect">
            <button type="button" class="close" aria-hidden="true" data-toggle="offcanvas" id="uc-mobile-menu-close-btn">&times;</button>
            <div>
                <div>
                    <ul id="menu">
                        <li><a href="index.html">Home</a></li>
                        <li><a href="about.html">About</a></li>
                        <li><a href="services.html">Services</a></li>
                        <li><a href="contact.html">Contact</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- .uc-mobile-menu -->
    </div>
    <!-- #main-wrapper -->
    <!-- Script -->
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/jquery-2.1.4.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/smoothscroll.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/mobile-menu.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/scripts.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>