<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://cambodiaaddress.github.io/html/category/article-1021.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>electron-vite新一代electron开发构建工具_vue.js_ - CambodiaAddress</title>
        <link rel="icon" href="/assets/addons/xcblog/img/cambodiaaddress/favicon.ico" type="image/x-icon"/>
    <!-- web-fonts -->
    <link href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,700,500' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
    <!-- off-canvas -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/mobile-menu.css" rel="stylesheet">
    <!-- font-awesome -->
    <link href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet">
    <!-- Flat Icon -->
    <link href="fonts/flaticon/flaticon.css" rel="stylesheet">
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/style.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?8022148af1f0848b976ee8f0e7db4477";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <div id="main-wrapper">
        <!-- Page Preloader -->
        <div id="preloader">
            <div id="status">
                <div class="status-mes"></div>
            </div>
        </div>
        <div class="uc-mobile-menu-pusher">
            <div class="content-wrapper">
                                <!-- .navbar-top -->
                <nav class="navbar m-menu navbar-default">
                    <div class="container">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse-1">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                                                        <a class="navbar-brand" href="/">Cambodia Address</a>
                                                    </div>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <div class="collapse navbar-collapse" id="#navbar-collapse-1">
                            <ul class="nav navbar-nav navbar-right main-nav">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div>
                        <!-- .navbar-collapse -->
                    </div>
                    <!-- .container -->
                </nav>
                <!-- .nav -->
                <section class="single-page-title single-page-title-about">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <h2>electron-vite新一代electron开发构建工具_vue.js_</h2>
                            </div>
                        </div>
                    </div>
                </section>
                <!-- .page-title -->
                <section class="featured-box">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-9">
                                <ol class="breadcrumb">
                                  <li><a href="/">首页</a></li>
                                  <li><a href="/html/category/">文章分类</a></li>
                                  <li class="active">正文</li>
                                </ol>

                                  				  				  				  			 <div id="log-box">  				<div id="catalog"><ul id="catalog-ul"> <li><i class="be be-arrowright"></i> 基于主进程的编译项预设:</li> <li><i class="be be-arrowright"></i> 基于preload脚本的编译项预设:</li> <li><i class="be be-arrowright"></i> 基于渲染进程的编译项预设:</li> <li><i class="be be-arrowright"></i> 如果 Electron 具有多窗口应该如何配置?</li> </ul><span class="log-zd"><span class="log-close"><i class="be be-cross"></i><strong>目录</strong></span></span></div>  			</div> <div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li>前言</li> <li>electron-vite 是什么</li> <li>特性</li> <li>安装</li> <li>开发&编译</li> <li>推荐项目目录</li> <li>开始学习</li> <li>配置</li> <ul class="second_class_ul"> <li>配置文件</li> <li>配置智能提示</li> <li>预设配置</li> <ul class="third_class_ul"> <li>基于主进程的编译项预设:</li> <li>基于preload脚本的编译项预设:</li> <li>基于渲染进程的编译项预设:</li> </ul> <li>配置问题</li> <ul class="third_class_ul"> <li>如果 Electron 具有多窗口应该如何配置?</li> </ul> </ul> <li>结语</li> <ul class="second_class_ul"></ul> </ul> </div> <p class="maodian"></p> <h2>前言</h2> <p>得益于 <code>Vite</code> 卓越的前端开发体验，越来越多的 <code>Electron</code> 项目也开始应用它来构建开发。翻阅各种社区资源可以发现很多基于 Vite 搭建的 Electron 开发模板，但都存在着一些共同的问题：</p> <ul> <li>配置相对复杂，繁琐（对 main，preload 和 renderer 分别配置）</li> <li>需要辅助脚本来配合编译开发</li> <li>无法举一反三，自主选择前端框架（vue，react，svelte，……）</li> </ul> <p>面对这些问题，我们需要对 Electron 有了解。Electron 是一个基于 Chromium 和 Node.js 的桌面应用框架，这意味着编译构建工具需要同时处理 node.js 和浏览器两种环境的代码。这是造成 Electron 开发构建工作复杂性的主因。</p> <blockquote> <p><strong>知识点</strong></p> <ul> <li>主进程和预加载脚本，需基于 cjs 模块化标准构建，运行在 node 环境</li> <li>渲染进程，通常融合现代前端框架如 vue.js，react 等基于 iife 模块化标准构建，运行在浏览器</li> <li>在 Electron 中开启 node 集成，可全程基于 cjs 模块化标准编写代码，尽管不需要编译构建，但不利于利用现代前端框架，还会面临严重的性能和安全问题</li> <li>基于 esm 标准不编译构建，尽管 node 本身已支持，但 Electron 并不支持，这也是 Electron 后续版本的一项工作</li> </ul> </blockquote> <p class="maodian"></p> <h2>electron-vite 是什么</h2> <p><code>electron-vite</code> 是一个与 <code>Vite</code> 集成的 <code>Electron</code> 构建工具。开发者无需过多关注配置，无论选择哪种前端框架都能轻松完成构建，提高 Electron 的开发构建效率。</p> <p class="maodian"></p> <h2>特性</h2> <ul> <li>⚡️使用方式与 Vite 相同</li> <li>????主进程/渲染进程/preload脚本都使用 Vite 构建</li> <li>????统一所有配置，合并到一个文件中</li> <li>????预设构建配置，无需关注配置</li> <li>????支持渲染进程热更新(HMR)</li> </ul> <p class="maodian"></p> <h2>安装</h2> <div class="ay1code"> <pre class="brush:bash;">npm i electron-vite -D</pre> </div> <p class="maodian"></p> <h2>开发&编译</h2> <p>在安装了 <code>electron-vite</code> 的项目中，可以直接使用 <code>npx electron-vite</code> 运行， 也可以在 <code>package.json</code> 文件中添加 npm scripts：</p> <div class="ay1code"> <pre class="brush:js;">{    "scripts": {      "start": "electron-vite preview", // start electron app to preview production build      "dev": "electron-vite dev", // start dev server and electron app      "prebuild": "electron-vite build" // build for production    }  }</pre> </div> <p>为了使用热更新(HMR)，需要使用环境变量（<code>ELECTRON_RENDERER_URL</code>）来决定 Electron 窗口加载本地页面还是远程页面。</p> <div class="ay1code"> <pre class="brush:js;">function createWindow() {    // Create the browser window    const mainWindow = new BrowserWindow({      width: 800,      height: 600,      webPreferences: {        preload: path.join(__dirname, '../preload/index.js')      }    })      // Load the remote URL for development or the local html file for production    if (!app.isPackaged && process.env['ELECTRON_RENDERER_URL']) {      mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])    } else {      mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))    }  }</pre> </div> <blockquote> <p><strong>注意</strong>: 在开发中, 渲染进程 <code>index.html</code> 文件需要通过 <code><script type="module"></code> 引用脚本。</p> </blockquote> <p class="maodian"></p> <h2>推荐项目目录</h2> <div class="ay1code"> <pre class="brush:plain;">├──src  |  ├──main  |  |  ├──index.js  |  |  └──...  |  ├──preload  |  |  ├──index.js  |  |  └──...  |  └──renderer  |     ├──src  |     ├──index.html  |     └──...  ├──electron.vite.config.js  └──package.json</pre> </div> <p class="maodian"></p> <h2>开始学习</h2> <ul> <li>克隆 <code>electron-vite-boilerplate</code> (https://github.com/alex8088/electron-vite-boilerplate) 项目学习</li> <li>通过 <code>create-electron</code> 脚手架来搭建项目学习</li> </ul> <div class="ay1code"> <pre class="brush:bash;">npm init @quick-start/electron</pre> </div> <p class="maodian"></p> <h2>配置</h2> <p class="maodian"></p> <h3>配置文件</h3> <p>当以命令行方式运行 <code>electron-vite</code> 时， 将会自动尝试解析项目根目录中名为 <code>electron.vite.config.js</code> 的配置文件。最基本的配置文件如下所示：</p> <div class="ay1code"> <pre class="brush:js;">// electron.vite.config.js  export default {    main: {      // vite config options    },    preload: {      // vite config options    },    renderer: {      // vite config options    }  }</pre> </div> <p>你可以显式地通过 --config 命令行选项指定一个配置文件（相对于 cwd 路径进行解析）:</p> <div class="ay1code"> <pre class="brush:js;">electron-vite --config my-config.js</pre> </div> <blockquote> <p><strong>提示</strong>: <code>electron-vite</code> 也支持 <code>ts</code> 或者 <code>mjs</code> 的配置文件.</p> </blockquote> <p class="maodian"></p> <h3>配置智能提示</h3> <p>因为 <code>electron-vite</code> 本身附带 Typescript 类型，所以你可以通过 IDE 和 jsdoc 的配合来实现智能提示：</p> <div class="ay1code"> <pre class="brush:js;">/**   * @type {import('electron-vite').UserConfig}   */  const config = {    // ...  }    export default config</pre> </div> <p>你还可以使用 <code>defineConfig</code> and <code>defineViteConfig</code> 工具函数，这样不用 jsdoc 注解也可以获取类型提示：</p> <div class="ay1code"> <pre class="brush:js;">import { defineConfig, defineViteConfig } from 'electron-vite'    export default defineConfig({    main: {      // ...    },    preload: {      // ...    },    renderer: defineViteConfig(({ command, mode }) => {      // conditional config use defineViteConfig      // ...    })  })</pre> </div> <blockquote> <p><strong>提示</strong>: <code>defineViteConfig</code> 从 <code>Vite</code> 中导出.</p> </blockquote> <p class="maodian"></p> <h3>预设配置</h3> <p class="maodian"></p> <span class="directory"></span><h4 id="title-0">基于主进程的编译项预设:</h4> <ul> <li> <strong>outDir</strong>: <code>out\main</code>(相对于根目录)</li> <li> <strong>target</strong>: <code>node*</code>, 自动匹配 <code>Electron</code> 的 <code>node</code> 构建目标， 如 Electron 17 为 <code>node16.13</code> </li> <li> <strong>lib.entry</strong>: <code>src\main{index|main}.{js|ts|mjs|cjs}</code>(相对于根目录), 找不到则为空</li> <li> <strong>lib.formats</strong>: <code>cjs</code> </li> <li> <strong>rollupOptions.external</strong>: <code>electron</code>和所有内置node模块(如果用户配置了外部模块ID，将自动合并)</li> </ul> <p class="maodian"></p> <span class="directory"></span><h4 id="title-1">基于preload脚本的编译项预设:</h4> <ul> <li> <strong>outDir</strong>: <code>out\preload</code>(相对于根目录)</li> <li> <strong>target</strong>: 同主进程</li> <li> <strong>lib.entry</strong>: <code>src\preload{index|preload}.{js|ts|mjs|cjs}</code>(相对于根目录), 找不到则为空</li> <li> <strong>lib.formats</strong>: <code>cjs</code> </li> <li> <strong>rollupOptions.external</strong>: 同主进程</li> </ul> <p class="maodian"></p> <span class="directory"></span><h4 id="title-2">基于渲染进程的编译项预设:</h4> <ul> <li> <strong>root</strong>: <code>src\renderer</code>(相对于根目录)</li> <li> <strong>outDir</strong>: <code>out\renderer</code>(相对于根目录)</li> <li> <strong>target</strong>: <code>chrome*</code>, 自动匹配 <code>Electron</code> 的 <code>chrome</code> 构建目标. 如 Electron 17 为 <code>chrome98</code> </li> <li> <strong>lib.entry</strong>: <code>src\renderer\index.html</code>(相对于根目录), 找不到则为空</li> <li> <strong>polyfillModulePreload</strong>: <code>false</code>, 不需要为渲染进程 polyfill <code>Module Preload</code> </li> <li> <strong>rollupOptions.external</strong>: 同主进程</li> </ul> <blockquote> <p><strong>提示</strong>：如果你想在已有的项目中使用这些预设配置，可以使用 Vite 的插件 <code>vite-plugin-electron-config</code> (github.com/alex8088/vi…)</p> </blockquote> <p class="maodian"></p> <h3>配置问题</h3> <p class="maodian"></p> <span class="directory"></span><h4 id="title-3">如果 Electron 具有多窗口应该如何配置?</h4> <p>当 Electron 应用程序具有多窗口时，就意味着可能有多个 html 页面和 preload 脚本，你可以像下面一样修改你的配置文件：</p> <div class="ay1code"> <pre class="brush:js;">export default {    main: {},    preload: {      build: {        rollupOptions: {          input: {            browser: resolve(__dirname, 'src/preload/browser.ts'),            webview: resolve(__dirname, 'src/preload/webview.ts')          }        }      }    },    renderer: {      build: {        rollupOptions: {          input: {            browser: resolve(__dirname, 'src/renderer/browser.html'),            webview: resolve(__dirname, 'src/renderer/webview.html')          }        }      }    }  }</pre> </div> <p class="maodian"></p> <h2>结语</h2> <p>项目现在已经开源，欢迎各位感兴趣的小伙伴参与贡献提交 PR 或反馈 issue，给予 star 支持。</p> <blockquote> <p>https://github.com/alex8088/electron-vite</p> </blockquote> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-1020.htm">FreeRTOS使用任务通知实现命令行解释器_操作系统</a></p>
                                                                        <p>下一个：<a href="/html/category/article-1022.htm">微信小程序｜小程序自定义底部导航栏</a></p>
                                                                    </div>

                                                            </div>
                            <div class="col-md-3">
                                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6712.htm" title="动物疫苗的了解和认识怎么写英语（动物疫苗的了解和认识怎么写英语翻译）">动物疫苗的了解和认识怎么写英语（动物疫苗的了解和认识怎么写英语翻译）</a></li>
                        <li class="py-2"><a href="/html/category/article-7356.htm" title="宠物助理医师资格证（宠物助理医师资格证报名官网）">宠物助理医师资格证（宠物助理医师资格证报名官网）</a></li>
                        <li class="py-2"><a href="/html/category/article-6110.htm" title="美迪青储机2021款（美迪青储机2020款）">美迪青储机2021款（美迪青储机2020款）</a></li>
                        <li class="py-2"><a href="/html/category/article-7495.htm" title="耐安克是什么牌子（继母后妈电视剧）">耐安克是什么牌子（继母后妈电视剧）</a></li>
                        <li class="py-2"><a href="/html/category/article-7264.htm" title="合肥在哪里领养狗狗的（合肥领养狗狗的网站）">合肥在哪里领养狗狗的（合肥领养狗狗的网站）</a></li>
                        <li class="py-2"><a href="/html/category/article-7448.htm" title="68岁大爷娶到漂亮妻子还老来得子,涂磊:像梦吗|谢谢你（这都可以）68岁大爷到女儿家养老，谢贤资料个人资料，陈慧娟，">68岁大爷娶到漂亮妻子还老来得子,涂磊:像梦吗|谢谢你（这都可以）68岁大爷到女儿家养老，谢贤资料个人资料，陈慧娟，</a></li>
                        <li class="py-2"><a href="/html/category/article-7357.htm" title="宠物店月收入多少（宠物店月收入多少钱）">宠物店月收入多少（宠物店月收入多少钱）</a></li>
                        <li class="py-2"><a href="/html/category/article-7172.htm" title="金福珠（举重妖精金福珠图片）">金福珠（举重妖精金福珠图片）</a></li>
                        <li class="py-2"><a href="/html/category/article-6850.htm" title="猫打疫苗一般打几针（猫打疫苗要打多少次）">猫打疫苗一般打几针（猫打疫苗要打多少次）</a></li>
                        <li class="py-2"><a href="/html/category/article-7173.htm" title="绿联和零度的手机壳哪个好用(绿联和零度的手机壳哪个好一点)">绿联和零度的手机壳哪个好用(绿联和零度的手机壳哪个好一点)</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">26</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                            </div>
                        </div>
                    </div>
                </section>
                                <footer class="footer">
                    <div class="copyright-section">
                        <div class="container clearfix">
                            <span class="copytext">
                                CambodiaAddress 版权所有 Powered by WordPress
                            </span>
                            <ul class="list-inline pull-right">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div><!-- .container -->
                    </div><!-- .copyright-section -->
                </footer>
                <!-- .footer -->
            </div>
            <!-- .content-wrapper -->
        </div>
        <!-- .offcanvas-pusher -->
        <div class="uc-mobile-menu uc-mobile-menu-effect">
            <button type="button" class="close" aria-hidden="true" data-toggle="offcanvas" id="uc-mobile-menu-close-btn">&times;</button>
            <div>
                <div>
                    <ul id="menu">
                        <li><a href="index.html">Home</a></li>
                        <li><a href="about.html">About</a></li>
                        <li><a href="services.html">Services</a></li>
                        <li><a href="contact.html">Contact</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- .uc-mobile-menu -->
    </div>
    <!-- #main-wrapper -->
    <!-- Script -->
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/jquery-2.1.4.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/smoothscroll.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/mobile-menu.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/scripts.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>