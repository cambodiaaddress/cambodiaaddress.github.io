<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://cambodiaaddress.github.io/html/category/article-856.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>@RequestBody总结相关 - CambodiaAddress</title>
        <link rel="icon" href="/assets/addons/xcblog/img/cambodiaaddress/favicon.ico" type="image/x-icon"/>
    <!-- web-fonts -->
    <link href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,700,500' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
    <!-- off-canvas -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/mobile-menu.css" rel="stylesheet">
    <!-- font-awesome -->
    <link href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet">
    <!-- Flat Icon -->
    <link href="fonts/flaticon/flaticon.css" rel="stylesheet">
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/style.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?8022148af1f0848b976ee8f0e7db4477";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <div id="main-wrapper">
        <!-- Page Preloader -->
        <div id="preloader">
            <div id="status">
                <div class="status-mes"></div>
            </div>
        </div>
        <div class="uc-mobile-menu-pusher">
            <div class="content-wrapper">
                                <!-- .navbar-top -->
                <nav class="navbar m-menu navbar-default">
                    <div class="container">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse-1">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                                                        <a class="navbar-brand" href="/">Cambodia Address</a>
                                                    </div>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <div class="collapse navbar-collapse" id="#navbar-collapse-1">
                            <ul class="nav navbar-nav navbar-right main-nav">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div>
                        <!-- .navbar-collapse -->
                    </div>
                    <!-- .container -->
                </nav>
                <!-- .nav -->
                <section class="single-page-title single-page-title-about">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <h2>@RequestBody总结相关</h2>
                            </div>
                        </div>
                    </div>
                </section>
                <!-- .page-title -->
                <section class="featured-box">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-9">
                                <ol class="breadcrumb">
                                  <li><a href="/">首页</a></li>
                                  <li><a href="/html/category/">文章分类</a></li>
                                  <li class="active">正文</li>
                                </ol>

                                  				  				  				<div id="content_views" class="htmledit_views"> <p><strong>提示：</strong><strong>建议一定要看后面的@RequestBody的核心逻辑源码以及六个重要结论！</strong>本文前半部分的内容都是一些基<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;本知识常识，可选择性跳过。</p> <p><strong>声明：</strong>本文是基于SpringBoot，进行的演示说明。</p> <hr/> <h3>基础知识介绍：</h3> <p>&nbsp; &nbsp; &nbsp; &nbsp; @RequestBody主要用来接收前端传递给后端的json字符串中的数据的(请求体中的数据的)；GET方式无请求体，所以使用@RequestBody接收数据时，前端不能使用GET方式提交数据，而是用POST方式进行提交。在后端的同一个接收方法里，@RequestBody与@RequestParam()可以同时使用，@RequestBody最多只能有一个，而@RequestParam()可以有多个。</p> <p>注：一个请求，只有一个RequestBody；一个请求，可以有多个RequestParam。</p> <p>注：当同时使用@RequestParam（）和@RequestBody时，@RequestParam（）指定的参数可以是普通元素、<br /> &nbsp; &nbsp; &nbsp; &nbsp;数组、集合、对象等等(即:当，@RequestBody 与@RequestParam()可以同时使用时，原SpringMVC接收<br /> &nbsp; &nbsp; &nbsp; &nbsp;参数的机制不变，只不过RequestBody 接收的是请求体里面的数据；而RequestParam接收的是key-value<br /> &nbsp; &nbsp; &nbsp; &nbsp;里面的参数，所以它会被切面进行处理从而可以用普通元素、数组、集合、对象等接收)。<br /> &nbsp; &nbsp; &nbsp; &nbsp;即：如果参数时放在请求体中，传入后台的话，那么后台要用@RequestBody才能接收到；如果不是放在<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 请求体中的话，那么后台接收前台传过来的参数时，要用@RequestParam来接收，或则形参前<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 什么也不写也能接收。</p> <p>注：如果参数前写了@RequestParam(xxx)，那么前端必须有对应的xxx名字才行(不管其是否有值，当然可以通<br /> &nbsp; &nbsp; &nbsp; &nbsp;过设置该注解的required属性来调节是否必须传)，如果没有xxx名的话，那么请求会出错，报400。</p> <p>注：如果参数前不写@RequestParam(xxx)的话，那么就前端可以有可以没有对应的xxx名字才行，如果有xxx名<br /> &nbsp; &nbsp; &nbsp; &nbsp;的话，那么就会自动匹配；没有的话，请求也能正确发送。<br /> &nbsp; &nbsp; &nbsp; &nbsp;追注：这里与feign消费服务时不同；feign消费服务时，如果参数前什么也不写，那么会被默认是<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @RequestBody的。</p> <p>如果后端参数是一个对象，且该参数前是以@RequestBody修饰的，那么前端传递json参数时，必须满足以下要求：</p> <ul> <li> <p>后端@RequestBody注解对应的类在将HTTP的输入流(含请求体)装配到目标类(即：@RequestBody后面的类)时，会根据json字符串中的key来匹配对应实体类的属性，如果匹配一致且json中的该key对应的值符合(或可转换为)，这一条我会在下面详细分析，其他的都可简单略过，但是<strong><strong>本文末的核心逻辑代码以及几个结论一定要看！</strong></strong>&nbsp;实体类的对应属性的类型要求时,会调用实体类的setter方法将值赋给该属性。</p> </li> <li> <p>json字符串中，如果value为""的话，后端对应属性如果是String类型的，那么接受到的就是""，如果是后端属性的类型是Integer、Double等类型，那么接收到的就是null。</p> </li> <li> <p>json字符串中，如果value为null的话，后端对应收到的就是null。</p> </li> <li> <p>如果某个参数没有value的话，在传json字符串给后端时，要么干脆就不把该字段写到json字符串中；要么写value时，&nbsp;必须有值，null&nbsp; 或""都行。千万不能有类似"stature":，这样的写法，如:</p> </li> </ul> <p><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230108/6e5400c354a54585366bff49fcc25a2a.jpg"></p> <p>注：关于@RequestParam()的用法，这里就不再一一说明了，可详见 《程序员成长笔记(一)》中的相关章节。</p> <hr/> <h3><strong>示例详细说明：</strong></h3> <p>先给出两个等下要用到的实体类</p> <p>User实体类：</p> <p><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230108/d628ccf0e94f9e80024936d4bea62c10.jpg"></p> <p>Team实体类：</p> <p><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230108/c0545ff0cd3779488d9bb399c56b53b9.jpg"></p> <p><strong>@RequestBody直接以String接收前端传过来的json数据：</strong></p> <p>后端对应的Controller：</p> <p><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230108/615dcafdfceb2b0501da8cac8951c62d.jpg"></p> <p>使用PostMan测试：</p> <p><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230108/b725114997663502719ac562b5c5c35f.jpg"></p> <p><strong>@RequestBody以简单对象接收前端传过来的json数据：</strong></p> <p>后端对应的Controller：</p> <p><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230108/8e6c8ff9bae0642a2f357610ee0ff980.jpg"></p> <p>使用PostMan测试：</p> <p><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230108/d2fbecaab90efca1175536ea7514d729.jpg"></p> <p><strong>@RequestBody以复杂对象接收前端传过来的json数据：</strong></p> <p>后端对应的Controller：</p> <p><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230108/1bd22a49cc7070144b0b62a55e30aa4c.jpg"></p> <p>使用PostMan测试：</p> <p><img fetchpriority="high" decoding="async" alt="" height="287" src="http://img.555519.xyz/uploads/20230108/8f2db0c99d06b6c6ab1cafb7e6552174.jpg"></p> <p><strong>@RequestBody与简单的@RequestParam()同时使用：</strong></p> <p>后端对应的Controller：</p> <p><img decoding="async" alt="" height="259" src="http://img.555519.xyz/uploads/20230108/e14cedf3b0205b9eea4796e179e10831.jpg"></p> <p>使用PostMan测试：</p> <p><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230108/b2e642318c00a5694320d9334c7bc0ca.jpg"></p> <p><strong>@RequestBody与复杂的@RequestParam()同时使用：</strong></p> <p>后端对应的Controller：</p> <p><img decoding="async" alt="" height="379" src="http://img.555519.xyz/uploads/20230108/6c52961834fbe568887fb2b6ec90b7a2.jpg"></p> <p>使用PostMan测试：</p> <p><img loading="lazy" decoding="async" alt="" height="430" src="http://img.555519.xyz/uploads/20230108/d3566e05f67f34656766c425782c3a8d.jpg"></p> <p><strong>@RequestBody接收请求体中的json数据；不加注解接收URL中的数据并组装为对象：</strong></p> <p>后端对应的Controller：</p> <p><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230108/40dbf09a0bb474328fc1d08b17bc2383.jpg"></p> <p>使用PostMan测试：</p> <p><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230108/138a2d2f64c53d4a56c98b0d0cce69e4.jpg"></p> <p>注：如果在后端方法参数前，指定了@RequestParam()的话，那么前端必须要有对应字段才行(当然可以通过设置<br /> &nbsp; &nbsp; &nbsp; &nbsp;该注解的required属性来调节是否必须传)，否者会报错；如果参数前没有任何该注解，那么前端可以传，也可<br /> &nbsp; &nbsp; &nbsp; &nbsp;以不传，如：</p> <p><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230108/9e4d70743ddc6da67dab3863228dbc81.jpg"></p> <p>上图中，如果我们传参中没有指定token，那么请求能正常进去，但是token为null；如果在String token前指定了@RequestParam(“token”)，那么前端必须要有token这个键时，请求才能正常进去，否者报400错误。</p> <hr/> <h3>@RequestBody与前端传过来的json数据的匹配规则</h3> <p>声明：根据不同的Content-Type等情况,Spring-MVC会采取不同的HttpMessageConverter实现来进行信息转换解析。<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 下面介绍的是最常用的：前端以Content-Type 为application/json,传递json字符串数据;后端以@RequestBody<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 模型接收数据的情况。</p> <p><strong>解析json数据大体流程概述</strong><strong>：</strong><br /><strong>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</strong><strong>Http传递请求体信息，最终会被封装进com.fasterxml.jackson.core.json.UTF8StreamJsonParser中(提示：Spring采用CharacterEncodingFilter设置了默认编码为UTF-8)，然后在public&nbsp;class&nbsp;BeanDeserializer&nbsp;extends&nbsp;BeanDeserializerBase&nbsp;implements&nbsp;java.io.Serializable中，通过&nbsp;public&nbsp;Object deserializeFromObject(JsonParser&nbsp;p, DeserializationContext&nbsp;ctxt)&nbsp;throws&nbsp;IOException方法</strong><strong>进行解析</strong>。</p> <h3>核心逻辑分析示例：</h3> <p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;假设前端传的json串是这样的：&nbsp;<strong>{"name1":"邓沙利文","age":123,"mot":"我是一只小小小小鸟~"}</strong><strong>&nbsp;</strong>后端的模型只有name和age属性，以及对应的setter/getter方法；给出一般用到的deserializeFromObject(JsonParser&nbsp;p, DeserializationContext&nbsp;ctxt)方法的<strong>核心逻辑：</strong></p> <p><img loading="lazy" decoding="async" alt="" height="361" src="http://img.555519.xyz/uploads/20230108/80996194b1ff36f1ff1e899bfc3b8761.jpg"></p> <hr/> <h3>小技巧之指定模型中的属性对应什么key</h3> <p>这里简单介绍，更多的可参考：</p> <p><strong><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;public</strong></strong>&nbsp;<strong><strong>class</strong></strong>&nbsp;BeanPropertyMap&nbsp;<strong><strong>implements</strong></strong>&nbsp;Iterable<SettableBeanProperty>,java.io.Serializable</p> <p>给出Controller中的测试类:</p> <p><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230108/10ddcf92668f2f35f3308f4dc7334a0c.jpg"></p> <p>给出模型中的属性(setter/getter方法没截出来)：</p> <p><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230108/6715aa29670aa5f0e0817cb528af4263.jpg"></p> <p>使用postman测试一下，示例：</p> <p><img loading="lazy" decoding="async" alt="" height="416" src="http://img.555519.xyz/uploads/20230108/462528bdf2a2c663e0a7f53958492791.jpg"></p> <p>上图简单测试了一下，但是测得并不全面,这里就不带大家一起测试了，直接给出。</p> <hr/> <h3> <strong>全面的结论</strong>：</h3> <p><strong><strong>结论</strong></strong><strong><strong>①</strong>：</strong><strong>@JsonAlias</strong>注解，实现:json转模型时，使json中的特定key能转化为特定的模型属性;但是模型转json时，<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;对应的转换后的key仍然与属性名一致，见：上图示例中的name字段的请求与响应。<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;以下图进一步说明：</p> <p><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230108/74f9d7311b41e50a1df7eef396ad4f5c.jpg"></p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 此时，json字符串转换为模型时，<u><u>j</u></u>son中key为Name或为name123或为name的都能识别。</p> <p><strong><strong>结论</strong></strong><strong><strong>②</strong>：</strong><strong>@JsonProperty</strong>注解，实现：json转模型时，使json中的特定key能转化为指定的模型属性；同样的，模<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;型转json时，对应的转换后的key为指定的key，见：示例中的motto字段的请求与响应。<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;以下图进一步说明：</p> <p><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230108/361db6e24cb57c5330c787886e0866e3.jpg"></p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;此时，json字符串转换为模型时，key为MOTTO的能识别，但key为motto的不能识别。</p> <p><strong><strong>结论</strong></strong><strong><strong>③</strong><strong>：</strong></strong>@JsonAlias注解需要依赖于setter、getter，而@JsonProperty注解不需要。</p> <p><strong><strong>结论</strong></strong><strong><strong>④</strong>：</strong>在不考虑上述两个注解的一般情况下，key与属性匹配时,默认大小写敏感。</p> <p><strong><strong>结论</strong></strong><strong><strong>⑤</strong>：</strong>有多个相同的key的json字符串中，转换为模型时，会以相同的几个key中，排在最后的那个key的值给模<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;型属性复制，因为setter会覆盖原来的值。见示例中的gender属性。</p> <p><strong><strong>结论</strong></strong><strong><strong>⑥</strong><strong>：</strong></strong>后端@RequestBody注解对应的类在将HTTP的输入流(含请求体)装配到目标类(即:@RequestBody后面<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;的类)时，会根据json字符串中的key来匹配对应实体类的属性，如果匹配一致且json中的该key对应的值<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;符合(或可转换为)实体类的对应属性的类型要求时，会调用实体类的setter方法将值赋给该属性。</p> <p>&nbsp;</p> <h3>^_^&nbsp;如有不当之处，欢迎指正</h3> <h3>^_^&nbsp;代码托管链接<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;https://github.com/JustryDeng...RequestBody...</h3> <h3>&nbsp;</h3> </p></div> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-855.htm">python多线程详解（超详细）</a></p>
                                                                        <p>下一个：<a href="/html/category/article-857.htm">Parquet文件格式解析</a></p>
                                                                    </div>

                                                            </div>
                            <div class="col-md-3">
                                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7770.htm" title="动物防疫站几点上班几点下班（青岛动物防疫站南京路几点上班）">动物防疫站几点上班几点下班（青岛动物防疫站南京路几点上班）</a></li>
                        <li class="py-2"><a href="/html/category/article-7448.htm" title="68岁大爷娶到漂亮妻子还老来得子,涂磊:像梦吗|谢谢你（这都可以）68岁大爷到女儿家养老，谢贤资料个人资料，陈慧娟，">68岁大爷娶到漂亮妻子还老来得子,涂磊:像梦吗|谢谢你（这都可以）68岁大爷到女儿家养老，谢贤资料个人资料，陈慧娟，</a></li>
                        <li class="py-2"><a href="/html/category/article-7264.htm" title="合肥在哪里领养狗狗的（合肥领养狗狗的网站）">合肥在哪里领养狗狗的（合肥领养狗狗的网站）</a></li>
                        <li class="py-2"><a href="/html/category/article-8139.htm" title="打了疫苗的动物用不用打狂犬疫苗针了（打了疫苗的动物用不用打狂犬疫苗针了呢）">打了疫苗的动物用不用打狂犬疫苗针了（打了疫苗的动物用不用打狂犬疫苗针了呢）</a></li>
                        <li class="py-2"><a href="/html/category/article-8001.htm" title="开宠物店会亏本吗知乎（开宠物店会不会赔本）">开宠物店会亏本吗知乎（开宠物店会不会赔本）</a></li>
                        <li class="py-2"><a href="/html/category/article-7219.htm" title="厦门哪里有小狗领养（厦门哪里有收养狗狗的收容中心）">厦门哪里有小狗领养（厦门哪里有收养狗狗的收容中心）</a></li>
                        <li class="py-2"><a href="/html/category/article-7035.htm" title="有个熊的奢侈品牌子(很贵的那个熊摆件叫什么来着)">有个熊的奢侈品牌子(很贵的那个熊摆件叫什么来着)</a></li>
                        <li class="py-2"><a href="/html/category/article-7494.htm" title="动物医院英文翻译怎么写 动物医院英文翻译怎么写的">动物医院英文翻译怎么写 动物医院英文翻译怎么写的</a></li>
                        <li class="py-2"><a href="/html/category/article-8184.htm" title="化妆的女的都喜欢什么生日礼物（深度揭秘）化妆的女生，平凡的世界剧情介绍，梅远贵，">化妆的女的都喜欢什么生日礼物（深度揭秘）化妆的女生，平凡的世界剧情介绍，梅远贵，</a></li>
                        <li class="py-2"><a href="/html/category/article-7586.htm" title="宠物领养机构名称有哪些（宠物领养平台有哪几个）">宠物领养机构名称有哪些（宠物领养平台有哪几个）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                            </div>
                        </div>
                    </div>
                </section>
                                <footer class="footer">
                    <div class="copyright-section">
                        <div class="container clearfix">
                            <span class="copytext">
                                CambodiaAddress 版权所有 Powered by WordPress
                            </span>
                            <ul class="list-inline pull-right">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div><!-- .container -->
                    </div><!-- .copyright-section -->
                </footer>
                <!-- .footer -->
            </div>
            <!-- .content-wrapper -->
        </div>
        <!-- .offcanvas-pusher -->
        <div class="uc-mobile-menu uc-mobile-menu-effect">
            <button type="button" class="close" aria-hidden="true" data-toggle="offcanvas" id="uc-mobile-menu-close-btn">&times;</button>
            <div>
                <div>
                    <ul id="menu">
                        <li><a href="index.html">Home</a></li>
                        <li><a href="about.html">About</a></li>
                        <li><a href="services.html">Services</a></li>
                        <li><a href="contact.html">Contact</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- .uc-mobile-menu -->
    </div>
    <!-- #main-wrapper -->
    <!-- Script -->
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/jquery-2.1.4.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/smoothscroll.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/mobile-menu.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/scripts.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>