<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://cambodiaaddress.github.io/html/category/article-869.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Spring Security教程（13）&#8212;- 验证码功能的实现 - CambodiaAddress</title>
        <link rel="icon" href="/assets/addons/xcblog/img/cambodiaaddress/favicon.ico" type="image/x-icon"/>
    <!-- web-fonts -->
    <link href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,700,500' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
    <!-- off-canvas -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/mobile-menu.css" rel="stylesheet">
    <!-- font-awesome -->
    <link href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet">
    <!-- Flat Icon -->
    <link href="fonts/flaticon/flaticon.css" rel="stylesheet">
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/style.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?8022148af1f0848b976ee8f0e7db4477";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <div id="main-wrapper">
        <!-- Page Preloader -->
        <div id="preloader">
            <div id="status">
                <div class="status-mes"></div>
            </div>
        </div>
        <div class="uc-mobile-menu-pusher">
            <div class="content-wrapper">
                                <!-- .navbar-top -->
                <nav class="navbar m-menu navbar-default">
                    <div class="container">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse-1">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                                                        <a class="navbar-brand" href="/">Cambodia Address</a>
                                                    </div>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <div class="collapse navbar-collapse" id="#navbar-collapse-1">
                            <ul class="nav navbar-nav navbar-right main-nav">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div>
                        <!-- .navbar-collapse -->
                    </div>
                    <!-- .container -->
                </nav>
                <!-- .nav -->
                <section class="single-page-title single-page-title-about">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <h2>Spring Security教程（13）&#8212;- 验证码功能的实现</h2>
                            </div>
                        </div>
                    </div>
                </section>
                <!-- .page-title -->
                <section class="featured-box">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-9">
                                <ol class="breadcrumb">
                                  <li><a href="/">首页</a></li>
                                  <li><a href="/html/category/">文章分类</a></li>
                                  <li class="active">正文</li>
                                </ol>

                                  				  				  				<div id="content_views" class="htmledit_views"> <p>有三中方法可以实现验证码的功能</p> <p>第一种是自定义一个filter，放在SpringSecurity过滤器之前，在用户登录的时候会先经过这个filter，然后在这个filter中实现对验证码进行验证的功能，这种方法不推荐，因为它已经脱离了SpringSecurity</p> <p>第二种是自定义一个filter让它继承自UsernamePasswordAuthenticationFilter，然后重写attemptAuthentication方法在这个方法中实现验证码的功能，如果验证码错误就抛出一个继承自AuthenticationException的验证吗错误的异常比如（CaptchaException），然后这个异常就会被SpringSecurity捕获到并将异常信息返回到前台，这种实现起来比较简单</p> <pre><code class="language-java">	@Override 	public Authentication attemptAuthentication(HttpServletRequest request, 			HttpServletResponse response) throws AuthenticationException { 		 		String requestCaptcha = request.getParameter(this.getCaptchaFieldName()); 		String genCaptcha = (String)request.getSession().getAttribute("code"); 		 		logger.info("开始校验验证码，生成的验证码为："+genCaptcha+" ，输入的验证码为："+requestCaptcha); 		 		if( !genCaptcha.equals(requestCaptcha)){ 			throw new CaptchaException( 					this.messageSource.getMessage("AbstractUserDetailsAuthenticationProvider.badCaptcha",null,"Default",null)); 		} 		return super.attemptAuthentication(request, response); 	}</code></pre> <p>然后在配置文件中配置下</p> <pre><code class="language-html">	&lt;bean id="loginFilter" class="com.zrhis.system.security.DefaultUsernamePasswordAuthenticationFilter"&gt; 		&lt;property name="authenticationManager"  ref="authenticationManager"&gt;&lt;/property&gt; 		&lt;property name="authenticationSuccessHandler"&gt; 			&lt;bean class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler"&gt; 				&lt;property name="defaultTargetUrl" value="/index.jsp"&gt;&lt;/property&gt; 			&lt;/bean&gt; 		&lt;/property&gt; 		&lt;property name="authenticationFailureHandler"&gt; 			&lt;bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"&gt; 				&lt;property name="defaultFailureUrl" value="/login.jsp"&gt;&lt;/property&gt; 			&lt;/bean&gt; 		&lt;/property&gt; 	&lt;/bean&gt;</code></pre> <p>最后在http中加入custom-filter配置，将这个filter放在SpringSecurity的FORM_LOGIN_FILTER之前</p> <pre><code class="language-html">&lt;custom-filter ref="loginFilter" before="FORM_LOGIN_FILTER"/&gt;</code></pre> <p>最后一种是直接替换掉SpringSecurity的UsernamePasswordAuthenticationFilter，这种比较复杂，但是更为合理，也是我现在正在用的。</p> <p>如果用这种方法那么http 中的auto-config就必须去掉，而form-login配置也必须去掉，因为这个不需要了，里面的属性都需要我们自行注入。</p> <p>首先需要创建一个EntryPoint</p> <pre><code class="language-html">	&lt;bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint"&gt; 		&lt;property name="loginFormUrl" value="/login.jsp" /&gt; 	&lt;/bean&gt;</code></pre> <p>然后在http中配置下</p> <pre><code class="language-html">&lt;sec:http access-decision-manager-ref="accessDecisionManager" 		entry-point-ref="authenticationEntryPoint"&gt;</code></pre> <p>然后我们来写CaptchaAuthenticationFilter，同样需要继承自UsernamePasswordAuthenticationFilter</p> <pre><code class="language-java">public class CaptchaAuthenticationFilter extends UsernamePasswordAuthenticationFilter{ 	 	public static final String SPRING_SECURITY_FORM_CAPTCHA_KEY = "j_captcha"; 	public static final String SESSION_GENERATED_CAPTCHA_KEY = Constant.SESSION_GENERATED_CAPTCHA_KEY; 	 	private String captchaParameter = SPRING_SECURITY_FORM_CAPTCHA_KEY; 	 	public Authentication attemptAuthentication(HttpServletRequest request, 			HttpServletResponse response) throws AuthenticationException { 		 		String genCode = this.obtainGeneratedCaptcha(request); 		String inputCode = this.obtainCaptcha(request); 		if(genCode == null) 			throw new CaptchaException(this.messages.getMessage("LoginAuthentication.captchaInvalid")); 		if(!genCode.equalsIgnoreCase(inputCode)){ 			throw new CaptchaException(this.messages.getMessage("LoginAuthentication.captchaNotEquals")); 		} 		 		return super.attemptAuthentication(request, response); 	} 	 	protected String obtainCaptcha(HttpServletRequest request){ 		return request.getParameter(this.captchaParameter); 	} 	 	protected String obtainGeneratedCaptcha (HttpServletRequest request){ 		return (String)request.getSession().getAttribute(SESSION_GENERATED_CAPTCHA_KEY); 	} 	 }</code></pre> <p>在配置文件中配置CaptchaAuthenticationFilter</p> <pre><code class="language-html">	&lt;bean id="captchaAuthenticaionFilter" class="com.zrhis.system.security.CaptchaAuthenticationFilter"&gt; 		&lt;property name="authenticationManager" ref="authenticationManager" /&gt; 		&lt;property name="authenticationFailureHandler" ref="authenticationFailureHandler" /&gt; 		&lt;property name="authenticationSuccessHandler" ref="authenticationSuccessHandler" /&gt; 		&lt;property name="filterProcessesUrl" value="/login.do" /&gt; 	&lt;/bean&gt; 	 	&lt;bean id="authenticationSuccessHandler" class="com.zrhis.system.security.SimpleLoginSuccessHandler"&gt; 		&lt;property name="defaultTargetUrl" value="/WEB-INF/app.jsp"&gt;&lt;/property&gt; 		&lt;property name="forwardToDestination" value="true"&gt;&lt;/property&gt; 	&lt;/bean&gt; 	&lt;bean id="authenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"&gt; 		&lt;property name="defaultFailureUrl" value="/login.jsp" /&gt; 	&lt;/bean&gt;</code></pre> <p>从配置文件中就可以看出来authenticationManager、authenticationFailureHandler、authenticationSuccessHandler、filterProcessesUrl等都需要我们自行注入了。</p> <p>filterProcessesUrl定义的是登录验证的地址，默认的是j_spring_security_check这里我们改成login.do</p> <p>authenticationSuccessHandler中的defaultTargetUrl定义的是登录成功后跳转到的页面</p> <p>authenticationFailureHandler中的defaultTargetUrl定义的是登录失败后跳转到的页面</p> <p>我们的首页app.jsp在/WEB-INF下所以需要使用服务器跳转，所以需要将forwardToDestination设为true，因为客户端跳转是不能直接访问WEB-INF下的内容的。</p> <p>最后在http中将FORM_LOGIN_FILTER替换掉，最终http中完整的配置就变成了下面的内容</p> <pre><code class="language-html">	&lt;sec:http access-decision-manager-ref="accessDecisionManager" 		entry-point-ref="authenticationEntryPoint"&gt; 		 		&lt;sec:access-denied-handler ref="accessDeniedHandler"/&gt; 		 		&lt;sec:session-management invalid-session-url="/login.jsp" /&gt; 		 		&lt;sec:custom-filter ref="filterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR"/&gt; 		&lt;sec:custom-filter ref="captchaAuthenticaionFilter" position="FORM_LOGIN_FILTER"/&gt; 	&lt;/sec:http&gt;</code></pre> <p>custom-filter中before是在这个filter之前，after是之后，position是替换。</p> <p> 这样就可以实现对验证码的验证了，效果如下 </p> <div style="text-align:center">  <img decoding="async" src="http://img.555519.xyz/uploads/20230217/e56069b5c53bde8f80dc6b01b17b7af6.jpg" alt="Spring Security教程（13）---- 验证码功能的实现"> </div> <p></p> </p></div> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-868.htm">win11系统如何安装藏文输入法</a></p>
                                                                        <p>下一个：<a href="/html/category/article-870.htm">使用 Bitnami PostgreSQL Docker 镜像快速设置流复制集群</a></p>
                                                                    </div>

                                                            </div>
                            <div class="col-md-3">
                                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1037.htm" title="启动zookeeper、kafka报错，sudo java未找到">启动zookeeper、kafka报错，sudo java未找到</a></li>
                        <li class="py-2"><a href="/html/category/article-1338.htm" title="Kafka启动后进程过一段时间自己消失，问题解决">Kafka启动后进程过一段时间自己消失，问题解决</a></li>
                        <li class="py-2"><a href="/html/category/article-1945.htm" title="Interlaken协议介绍">Interlaken协议介绍</a></li>
                        <li class="py-2"><a href="/html/category/article-1050.htm" title="JDK8默认垃圾回收器详解">JDK8默认垃圾回收器详解</a></li>
                        <li class="py-2"><a href="/html/category/article-1043.htm" title="springsecurity 中 核心过滤器和请求">springsecurity 中 核心过滤器和请求</a></li>
                        <li class="py-2"><a href="/html/category/article-4130.htm" title="C#二分查找算法_C#教程">C#二分查找算法_C#教程</a></li>
                        <li class="py-2"><a href="/html/category/article-1042.htm" title="python PIL Image 图像处理基本操作实例_python">python PIL Image 图像处理基本操作实例_python</a></li>
                        <li class="py-2"><a href="/html/category/article-2246.htm" title="Java中自定义注解的使用">Java中自定义注解的使用</a></li>
                        <li class="py-2"><a href="/html/category/article-1044.htm" title="C ++程序，实现布斯的乘法算法来对两个有符号数相乘">C ++程序，实现布斯的乘法算法来对两个有符号数相乘</a></li>
                        <li class="py-2"><a href="/html/category/article-1059.htm" title="TypeError: Cannot read properties of undefined (reading ‘state‘)">TypeError: Cannot read properties of undefined (reading ‘state‘)</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">8</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                            </div>
                        </div>
                    </div>
                </section>
                                <footer class="footer">
                    <div class="copyright-section">
                        <div class="container clearfix">
                            <span class="copytext">
                                CambodiaAddress 版权所有 Powered by WordPress
                            </span>
                            <ul class="list-inline pull-right">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div><!-- .container -->
                    </div><!-- .copyright-section -->
                </footer>
                <!-- .footer -->
            </div>
            <!-- .content-wrapper -->
        </div>
        <!-- .offcanvas-pusher -->
        <div class="uc-mobile-menu uc-mobile-menu-effect">
            <button type="button" class="close" aria-hidden="true" data-toggle="offcanvas" id="uc-mobile-menu-close-btn">&times;</button>
            <div>
                <div>
                    <ul id="menu">
                        <li><a href="index.html">Home</a></li>
                        <li><a href="about.html">About</a></li>
                        <li><a href="services.html">Services</a></li>
                        <li><a href="contact.html">Contact</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- .uc-mobile-menu -->
    </div>
    <!-- #main-wrapper -->
    <!-- Script -->
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/jquery-2.1.4.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/smoothscroll.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/mobile-menu.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/scripts.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>