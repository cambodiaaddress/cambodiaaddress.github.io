<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://cambodiaaddress.github.io/html/category/article-876.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Spring Boot拦截器示例及源码原理分析 - CambodiaAddress</title>
        <link rel="icon" href="/assets/addons/xcblog/img/cambodiaaddress/favicon.ico" type="image/x-icon"/>
    <!-- web-fonts -->
    <link href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,700,500' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
    <!-- off-canvas -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/mobile-menu.css" rel="stylesheet">
    <!-- font-awesome -->
    <link href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet">
    <!-- Flat Icon -->
    <link href="fonts/flaticon/flaticon.css" rel="stylesheet">
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/style.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?8022148af1f0848b976ee8f0e7db4477";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <div id="main-wrapper">
        <!-- Page Preloader -->
        <div id="preloader">
            <div id="status">
                <div class="status-mes"></div>
            </div>
        </div>
        <div class="uc-mobile-menu-pusher">
            <div class="content-wrapper">
                                <!-- .navbar-top -->
                <nav class="navbar m-menu navbar-default">
                    <div class="container">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse-1">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                                                        <a class="navbar-brand" href="/">Cambodia Address</a>
                                                    </div>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <div class="collapse navbar-collapse" id="#navbar-collapse-1">
                            <ul class="nav navbar-nav navbar-right main-nav">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div>
                        <!-- .navbar-collapse -->
                    </div>
                    <!-- .container -->
                </nav>
                <!-- .nav -->
                <section class="single-page-title single-page-title-about">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <h2>Spring Boot拦截器示例及源码原理分析</h2>
                            </div>
                        </div>
                    </div>
                </section>
                <!-- .page-title -->
                <section class="featured-box">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-9">
                                <ol class="breadcrumb">
                                  <li><a href="/">首页</a></li>
                                  <li><a href="/html/category/">文章分类</a></li>
                                  <li class="active">正文</li>
                                </ol>

                                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p>在SpringMVC源码分析一文中，已经对SpringMVC的初始化及请求响应过程进行了分析，但未对拦截器进行深入研究。<br /> 本文将首先通过示例的方式了解拦截器的工作原理，然后再深入分析其源码来了解其内部原理。<br /> 本文代码基于Spring Boot+Kotlin。</p> <h1 id="1-自定义拦截器">1 自定义拦截器</h1> <p>GITHUB地址：https://github.com/icarusliu/learn</p> <h2 id="11-interceptor定义">1.1 Interceptor定义</h2> <p>第一步我们先来定义一个Interceptor；<br /> 拦截器一般需要继承自HandlerInterceptor，并需要实现以下三个接口：</p> <table> <thead> <tr> <th>接口</th> <th>接口名称</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>preHandle</td> <td>前置处理</td> <td>在实际的Handle执行前执行；有Boolean类型的返回值，如果返回为False，则Handle本身及postHandle/afterCompletion以及后续的拦截器全部都不会再继续执行；为True则反之。</td> </tr> <tr> <td>postHandle</td> <td>后置处理</td> <td>Handle执行后视图渲染前执行</td> </tr> <tr> <td>afterCompletion</td> <td>完成后处理</td> <td>Handle执行且视图渲染完成后执行</td> </tr> </tbody> </table> <p>Spring为方便使用实现了HandlerInterceptorAdapter的抽象类；需要实现的方法都实现为空的方法，在使用时只需实现必要的方法即可。</p> <p>定义的测试拦截器见以下代码：</p> <pre class="prettyprint"><code class="language-java hljs">class TestInterceptor: HandlerInterceptorAdapter() {<span class="hljs-keyword">private</span> val logger = LoggerFactory.getLogger(HandlerInterceptorAdapter::class.java)<span class="hljs-javadoc">/**      * This implementation always returns `true`.      */</span><span class="hljs-annotation">@Throws</span>(Exception::class)     override fun preHandle(request: HttpServletRequest, response: HttpServletResponse, handler: Any): Boolean {<span class="hljs-keyword">if</span> (logger.isDebugEnabled) {             logger.debug(<span class="hljs-string">"TestInterceptor preHandle begin to execute!"</span>)         }<span class="hljs-keyword">return</span><span class="hljs-keyword">true</span>     }<span class="hljs-javadoc">/**      * This implementation is empty.      */</span><span class="hljs-annotation">@Throws</span>(Exception::class)     override fun postHandle(request: HttpServletRequest, response: HttpServletResponse, handler: Any,<span class="hljs-annotation">@Nullable</span> modelAndView: ModelAndView?) {<span class="hljs-keyword">if</span> (logger.isDebugEnabled) {             logger.debug(<span class="hljs-string">"TestInterceptor postHandle begin to execute!"</span>)         }     }<span class="hljs-javadoc">/**      * This implementation is empty.      */</span><span class="hljs-annotation">@Throws</span>(Exception::class)     override fun afterCompletion(request: HttpServletRequest, response: HttpServletResponse, handler: Any,<span class="hljs-annotation">@Nullable</span> ex: Exception?) {<span class="hljs-keyword">if</span> (logger.isDebugEnabled) {             logger.debug(<span class="hljs-string">"TestInterceptor afterCompletion begin to execute!"</span>)         }     }<span class="hljs-javadoc">/**      * This implementation is empty.      */</span><span class="hljs-annotation">@Throws</span>(Exception::class)     override fun afterConcurrentHandlingStarted(request: HttpServletRequest, response: HttpServletResponse,                                                 handler: Any) {<span class="hljs-keyword">if</span> (logger.isDebugEnabled) {             logger.debug(<span class="hljs-string">"TestInterceptor afterConcurrentHandlingStarted begin to execute!"</span>)         }     } }</code></pre> <h2 id="12-拦截器配置">1.2 拦截器配置</h2> <p>拦截器定义完成后，还需要将拦截器引入，并指定该拦截器所拦截的场景。<br /> 在SpringBoot中，一般通过使用EnableWebMvc及Configuration两个注解，并实现WebMvcConfigurer接口来添加拦截器，实现代码如下：</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@EnableWebMvc</span><span class="hljs-annotation">@Configuration</span> class WebConfig: WebMvcConfigurer {     override fun addInterceptors(registry: InterceptorRegistry) {         registry.addInterceptor(TestInterceptor()).addPathPatterns(<span class="hljs-string">"/**"</span>)     } }</code></pre> <p>注解一定要通过addPathPatterns来指定该拦截器所拦截的URL，如果不指定将不会拦截任何请求。.</p> <h2 id="13-定义controller">1.3 定义Controller</h2> <p>Controller的定义比较简单，在此不细说，代码如下：</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@RestController</span><span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/test"</span>) class TestController {<span class="hljs-keyword">private</span> val logger = LoggerFactory.getLogger(TestController::class.java)<span class="hljs-annotation">@RequestMapping</span>(<span class="hljs-string">"/test"</span>)     fun test(): String {<span class="hljs-keyword">if</span> (logger.isDebugEnabled) {             logger.debug(<span class="hljs-string">"Test controller begin to execute!"</span>)         }          logger.info(<span class="hljs-string">"Test!"</span>)<span class="hljs-keyword">if</span> (logger.isDebugEnabled) {             logger.debug(<span class="hljs-string">"Test controller execution has been completed!"</span>)         }<span class="hljs-keyword">return</span><span class="hljs-string">"test"</span>;     } }</code></pre> <h2 id="14-测试类定义">1.4 测试类定义</h2> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@RunWith</span>(SpringRunner::class)<span class="hljs-annotation">@WebMvcTest</span>(TestController::class) class LearninterceptorApplicationTests {<span class="hljs-keyword">private</span> val logger = LoggerFactory.getLogger(LearninterceptorApplicationTests::class.java)<span class="hljs-annotation">@Autowired</span><span class="hljs-keyword">private</span> lateinit var mvc: MockMvc      @Test     fun<span class="hljs-title">testTestController</span>() {         mvc.perform(get(<span class="hljs-string">"/test/test"</span>)).andExpect(status().isOk)                 .andExpect(content().string(<span class="hljs-string">"test"</span>));     }  }</code></pre> <p>在此，一个测试的Interceptor及其测试的Controller及单元测试类即定义完成。<br /> 可以通过执行测试类看到测试结果，在此不细述。</p> <h1 id="15-配置分析">1.5 配置分析</h1> <p>在1.2章节中我们通过@EnableWebMvc注解来进行拦截器的自定义配置，通过分析该类及相关类，各个类的作用如下</p> <h1 id="151-enablewebmvc">1.5.1 EnableWebMvc</h1> <p>与Configuration注解结合，可从WebMvcConfigurationSupport中引入SpringMVC的相关配置；如果需要修改引入的配置，需要通过实现WebMvcConfigurer接口提供的方法来进行。<br /> 注解EnableWebMvc在一个工程中只能注解在一个类上； 但实现WebMvcConfigurer的类可以有多个。<br /> EnableWebMvc是如何引入WebMvcConfigurationSupport中的相关配置的呢？<br /> 我们来看下其本身实现：</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@Retention</span>(RetentionPolicy.RUNTIME)<span class="hljs-annotation">@Target</span>(ElementType.TYPE)<span class="hljs-annotation">@Documented</span><span class="hljs-annotation">@Import</span>(DelegatingWebMvcConfiguration.class)<span class="hljs-keyword">public</span> @<span class="hljs-class"><span class="hljs-keyword">interface</span><span class="hljs-title">EnableWebMvc</span> {<!-- --></span> }</code></pre> <p>可以看到其通过Import引入了DelegatingWebMvcConfiguration配置类， 而这个类又继承了WebMvcConfigurationSupport类。<br /> 关于这部分如何生效的后文将会进行详解。</p> <h1 id="152-webmvcconfigurer">1.5.2 WebMvcConfigurer</h1> <p>WebMvcConfigurer主要是提供接口来实现SpringMVC的自定义配置，其中它与Interceptor相关的就是addInterceptors方法，通过覆盖该方法，可以添加自定义Interceptor。</p> <p>addInterceptors返回类型为InterceptorRegistration对象，通过查看该类实现，看到其提供的主要方法是： addPathPatterns/excludePathPatterns/pathMatcher/order，主要完成两个功能：一是提供配置所添加的Interceptor的映射路径的方法；二是提供配置所添加的Interceptor的Order的方法，通过Order可控制所添加的Interceptor在所有Interceptors中的执行顺序。<br /> 其使用代码如下：</p> <pre class="prettyprint"><code class="language-java hljs">override fun addInterceptors(registry: InterceptorRegistry) {     registry.addInterceptor(TestInterceptor())             .addPathPatterns(<span class="hljs-string">"/**"</span>)             .order(<span class="hljs-number">1000</span>) }</code></pre> <h1 id="2-拦截器生效过程源码分析">2 拦截器生效过程源码分析</h1> <p>在SpringMVC源码分析一文的2.2.2.1章节中，已经分析过DiapatcherServlet中的Service方法的执行过程；跟拦截器相关的执行流程如下：</p> <div class="flow-chart"></div> <p>其关键就在Handle及拦截器的查找中；至于执行过程较为简单不再详细说明。</p> <p>接下来我们分析拦截器的查找过程。<br /> 在SpringMVC源码分析一文中，已经分析过查找过程在AbstractHandlerMapping中实现，实际查找拦截器在方法getHandlerExecutionChain中：</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-keyword">protected</span> HandlerExecutionChain<span class="hljs-title">getHandlerExecutionChain</span>(Object handler, HttpServletRequest request) {     HandlerExecutionChain chain = (handler<span class="hljs-keyword">instanceof</span> HandlerExecutionChain ?             (HandlerExecutionChain) handler :<span class="hljs-keyword">new</span> HandlerExecutionChain(handler));      String lookupPath =<span class="hljs-keyword">this</span>.urlPathHelper.getLookupPathForRequest(request);<span class="hljs-keyword">for</span> (HandlerInterceptor interceptor :<span class="hljs-keyword">this</span>.adaptedInterceptors) {<span class="hljs-keyword">if</span> (interceptor<span class="hljs-keyword">instanceof</span> MappedInterceptor) {             MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;<span class="hljs-keyword">if</span> (mappedInterceptor.matches(lookupPath,<span class="hljs-keyword">this</span>.pathMatcher)) {                 chain.addInterceptor(mappedInterceptor.getInterceptor());             }         }<span class="hljs-keyword">else</span> {             chain.addInterceptor(interceptor);         }     }<span class="hljs-keyword">return</span> chain; }</code></pre> <p>该方法就是从adaptedInterceptors属性中，根据URL查找添加条件的Interceptor并组装成HandlerExecutionChain并返回。<br /> 结合1.5.2中的分析，可以知道此处是否满足条件的判断是根据添加拦截器配置时调用的addPathPatterns方法决定的。具体判定过程不再赘述。</p> <p>那么，现在的问题就是adaptedInterceptors属性是如何初始化的。<br /> 通过分析AbstractHandlerMapping类，其adaptedInterceptors属性实际是在initInterceptors方法中根据interceptors来进行初始化的。现在的问题转变成interceptors这个属性是如何初始化的了。 实际上这个属性是通过setInterceptors方法来设置的，但通过Alt+F7的搜索并未搜索到该方法是在哪个地方调用的。</p> <p>我们换个思路，通过@EnableWebMvc来分析看通过addInterceptors方法配置的Interceptor在到底添加到哪去了。<br /> 前言已经分析，通过@EnableWebMvc注解实际上引入了DelegatingWebMvcConfiguration这个类；查看这个类，在其中有一方法被Autowired注解：</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@Autowired</span>(required =<span class="hljs-keyword">false</span>)<span class="hljs-keyword">public</span><span class="hljs-keyword">void</span><span class="hljs-title">setConfigurers</span>(List<WebMvcConfigurer> configurers) {<span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(configurers)) {<span class="hljs-keyword">this</span>.configurers.addWebMvcConfigurers(configurers);     } }</code></pre> <p>通过查看Autowired注解定义，了解到当它使用在List参数的方法上时，会查找List所包含的对象类型的所有Bean然后进行注入。这也意味着，此处会将所有实现WebMvcConfigurer接口的类进行注入，然后添加到configurers属性中去；在此处，我们自定义的继承自WebMvcConfigurer的类会被注入。<br /> 再查看 DelegatingWebMvcConfiguration 这个类，它继承了 WebMvcConfigurationSupport 类。分析WebMvcConfigurationSupport，可以看到以下方法：</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@Bean</span><span class="hljs-keyword">public</span> RequestMappingHandlerMapping<span class="hljs-title">requestMappingHandlerMapping</span>() {     RequestMappingHandlerMapping mapping = createRequestMappingHandlerMapping();     mapping.setOrder(<span class="hljs-number">0</span>);     mapping.setInterceptors(getInterceptors());     mapping.setContentNegotiationManager(mvcContentNegotiationManager());     mapping.setCorsConfigurations(getCorsConfigurations());      PathMatchConfigurer configurer = getPathMatchConfigurer();     Boolean useSuffixPatternMatch = configurer.isUseSuffixPatternMatch();     Boolean useRegisteredSuffixPatternMatch = configurer.isUseRegisteredSuffixPatternMatch();     Boolean useTrailingSlashMatch = configurer.isUseTrailingSlashMatch();<span class="hljs-keyword">if</span> (useSuffixPatternMatch !=<span class="hljs-keyword">null</span>) {         mapping.setUseSuffixPatternMatch(useSuffixPatternMatch);     }<span class="hljs-keyword">if</span> (useRegisteredSuffixPatternMatch !=<span class="hljs-keyword">null</span>) {         mapping.setUseRegisteredSuffixPatternMatch(useRegisteredSuffixPatternMatch);     }<span class="hljs-keyword">if</span> (useTrailingSlashMatch !=<span class="hljs-keyword">null</span>) {         mapping.setUseTrailingSlashMatch(useTrailingSlashMatch);     }      UrlPathHelper pathHelper = configurer.getUrlPathHelper();<span class="hljs-keyword">if</span> (pathHelper !=<span class="hljs-keyword">null</span>) {         mapping.setUrlPathHelper(pathHelper);     }      PathMatcher pathMatcher = configurer.getPathMatcher();<span class="hljs-keyword">if</span> (pathMatcher !=<span class="hljs-keyword">null</span>) {         mapping.setPathMatcher(pathMatcher);     }<span class="hljs-keyword">return</span> mapping; }</code></pre> <p>可以看到RequestMappingHandlerMapping类被注入Spring容器。<br /> 同时通过mapping.setInterceptors(getInterceptors())将所有的Interceptors设置到HandperMapping对象中 。<br /> 这样就找到了ReuqestMappingHandlerMapping的setInterceptors方法调用处了。<br /> 接下来的问题就是此处调用的getInterceptors方法的实现：</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-keyword">protected</span><span class="hljs-keyword">final</span> Object[]<span class="hljs-title">getInterceptors</span>() {<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.interceptors ==<span class="hljs-keyword">null</span>) {         InterceptorRegistry registry =<span class="hljs-keyword">new</span> InterceptorRegistry();         addInterceptors(registry);         registry.addInterceptor(<span class="hljs-keyword">new</span> ConversionServiceExposingInterceptor(mvcConversionService()));         registry.addInterceptor(<span class="hljs-keyword">new</span> ResourceUrlProviderExposingInterceptor(mvcResourceUrlProvider()));<span class="hljs-keyword">this</span>.interceptors = registry.getInterceptors();     }<span class="hljs-keyword">return</span><span class="hljs-keyword">this</span>.interceptors.toArray(); }</code></pre> <p>此处如果interceptors对象为空时，会调用addInterceptors方法；其实现在DelegatingWebMvcConfiguration类中：</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@Override</span><span class="hljs-keyword">protected</span><span class="hljs-keyword">void</span><span class="hljs-title">addInterceptors</span>(InterceptorRegistry registry) {<span class="hljs-keyword">this</span>.configurers.addInterceptors(registry); }</code></pre> <p>在前文已经描述到，DelegatingWebMvcConfiguration类中的configurers属性会将所有继承了WebMvcConfigurer的配置类全部添加进去。如我们自定义的配置类；在此处调用DelegatingWebMvcConfiguration的addInterceptors方法时，实际就是调用各个WebMvcConfigurer对象的addInterceptors方法来完成自定义的Interceptor注册过程。<br /> 通过这一系列过程，RequestMappingHandlerMapping的getInterceptors方法就可以获取到所有自定义的Interceptor了。</p> </div> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-875.htm">spring常用配置profile(设置不同的运行环境)使用纪要</a></p>
                                                                        <p>下一个：<a href="/html/category/article-877.htm">DjangoRestFramework框架三种分页功能的实现 &#8211; 在DjangoStarter项目模板中封装</a></p>
                                                                    </div>

                                                            </div>
                            <div class="col-md-3">
                                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6110.htm" title="美迪青储机2021款（美迪青储机2020款）">美迪青储机2021款（美迪青储机2020款）</a></li>
                        <li class="py-2"><a href="/html/category/article-6067.htm" title="动物医院教案（教学动物医院）">动物医院教案（教学动物医院）</a></li>
                        <li class="py-2"><a href="/html/category/article-4408.htm" title="什么牌子女鞋鞋底软(女士鞋底比较软的鞋)">什么牌子女鞋鞋底软(女士鞋底比较软的鞋)</a></li>
                        <li class="py-2"><a href="/html/category/article-4375.htm" title="三种最旺家的花（三种最旺家的花图片）">三种最旺家的花（三种最旺家的花图片）</a></li>
                        <li class="py-2"><a href="/html/category/article-4555.htm" title="爱滋病大学生(得艾滋病的大学生)">爱滋病大学生(得艾滋病的大学生)</a></li>
                        <li class="py-2"><a href="/html/category/article-2246.htm" title="Java中自定义注解的使用">Java中自定义注解的使用</a></li>
                        <li class="py-2"><a href="/html/category/article-6066.htm" title="宠物粮怎样跑销售 宠物粮销售渠道">宠物粮怎样跑销售 宠物粮销售渠道</a></li>
                        <li class="py-2"><a href="/html/category/article-4102.htm" title="图解Redis之数据结构篇压缩列表">图解Redis之数据结构篇压缩列表</a></li>
                        <li class="py-2"><a href="/html/category/article-6005.htm" title="动物疫苗法律法规最新（动物疫苗法案）">动物疫苗法律法规最新（动物疫苗法案）</a></li>
                        <li class="py-2"><a href="/html/category/article-1931.htm" title="SpringMVC中MultipartFile转File的两种方式_java">SpringMVC中MultipartFile转File的两种方式_java</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                            </div>
                        </div>
                    </div>
                </section>
                                <footer class="footer">
                    <div class="copyright-section">
                        <div class="container clearfix">
                            <span class="copytext">
                                CambodiaAddress 版权所有 Powered by WordPress
                            </span>
                            <ul class="list-inline pull-right">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div><!-- .container -->
                    </div><!-- .copyright-section -->
                </footer>
                <!-- .footer -->
            </div>
            <!-- .content-wrapper -->
        </div>
        <!-- .offcanvas-pusher -->
        <div class="uc-mobile-menu uc-mobile-menu-effect">
            <button type="button" class="close" aria-hidden="true" data-toggle="offcanvas" id="uc-mobile-menu-close-btn">&times;</button>
            <div>
                <div>
                    <ul id="menu">
                        <li><a href="index.html">Home</a></li>
                        <li><a href="about.html">About</a></li>
                        <li><a href="services.html">Services</a></li>
                        <li><a href="contact.html">Contact</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- .uc-mobile-menu -->
    </div>
    <!-- #main-wrapper -->
    <!-- Script -->
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/jquery-2.1.4.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/smoothscroll.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/mobile-menu.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/scripts.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>