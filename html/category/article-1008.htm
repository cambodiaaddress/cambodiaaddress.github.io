<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://cambodiaaddress.github.io/html/category/article-1008.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>SpringBoot 实现前后端分离的跨域访问（CORS） - CambodiaAddress</title>
        <link rel="icon" href="/assets/addons/xcblog/img/cambodiaaddress/favicon.ico" type="image/x-icon"/>
    <!-- web-fonts -->
    <link href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,700,500' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
    <!-- off-canvas -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/mobile-menu.css" rel="stylesheet">
    <!-- font-awesome -->
    <link href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet">
    <!-- Flat Icon -->
    <link href="fonts/flaticon/flaticon.css" rel="stylesheet">
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/style.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?8022148af1f0848b976ee8f0e7db4477";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <div id="main-wrapper">
        <!-- Page Preloader -->
        <div id="preloader">
            <div id="status">
                <div class="status-mes"></div>
            </div>
        </div>
        <div class="uc-mobile-menu-pusher">
            <div class="content-wrapper">
                                <!-- .navbar-top -->
                <nav class="navbar m-menu navbar-default">
                    <div class="container">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse-1">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                                                        <a class="navbar-brand" href="/">Cambodia Address</a>
                                                    </div>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <div class="collapse navbar-collapse" id="#navbar-collapse-1">
                            <ul class="nav navbar-nav navbar-right main-nav">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div>
                        <!-- .navbar-collapse -->
                    </div>
                    <!-- .container -->
                </nav>
                <!-- .nav -->
                <section class="single-page-title single-page-title-about">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <h2>SpringBoot 实现前后端分离的跨域访问（CORS）</h2>
                            </div>
                        </div>
                    </div>
                </section>
                <!-- .page-title -->
                <section class="featured-box">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-9">
                                <ol class="breadcrumb">
                                  <li><a href="/">首页</a></li>
                                  <li><a href="/html/category/">文章分类</a></li>
                                  <li class="active">正文</li>
                                </ol>

                                  				  				  				<div id="content_views" class="htmledit_views"> <blockquote> <p>序言：跨域资源共享向来都是热门的需求，使用CORS可以帮助我们快速实现跨域访问，只需在服务端进行授权即可，无需在前端添加额外设置，比传统的JSONP跨域更安全和便捷。</p> </blockquote> <h1>一、基本介绍</h1> <p>简单来说，CORS是一种访问机制，英文全称是Cross-Origin Resource Sharing，即我们常说的跨域资源共享，通过在服务器端设置响应头，把发起跨域的原始域名添加到Access-Control-Allow-Origin 即可。</p> <h1>1. CORS工作原理</h1> <p>CORS实现跨域访问并不是一蹴而就的，需要借助浏览器的支持，从原理题图我们可以清楚看到，简单的请求（通常指GET/POST/HEAD方式，并没有去增加额外的请求头信息）直接创建了跨域请求的XHR对象，而复杂的请求则要求先发送一个"预检"请求，待服务器批准后才能真正发起跨域访问请求。</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230207/0b60b1d68c007324b9c0a393144e002e.jpg"></p> <p>来自维基百科</p> <p>根据官方文档<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.w3.org/TR/cors/"  title="W3C规范-CORS" rel="nofollow">W3C规范-CORS</a> 的描述，目前CORS使用了如下头部信息：</p> <h1>2. Request Headers（请求头）</h1> <blockquote> <p>温馨提示：<code>Request Headers</code> 无需人为干预，因为浏览器会自动识别跨域请求并添加对应的请求头。</p> </blockquote> <ul> <li> <p><code>Origin</code> 表示发起跨域请求的原始域。</p> </li> <li> <p><code>Access-Control-Request-Method</code> 表示发起跨域请求的方式，例如GET/POST。</p> </li> <li> <p><code>Access-Control-Request-Headers</code>表示发起跨域请求的额外头信息。</p> </li> </ul> <h1>3. Response headers（响应头 ）</h1> <blockquote> <p>温馨提示：<code>Response Headers</code> 需要人为干预，通过设置响应头以帮助服务器资源进行跨域授权，例如允许哪些原始域进行跨域请求，是否允许响应信息携带Cookie等认证信息。</p> </blockquote> <ul> <li> <p><code>Access-Control-Allow-Origin</code> 表示允许哪些原始域进行跨域访问。</p> </li> <li> <p><code>Access-Control-Allow-Credentials</code>表示是否允许客户端获取用户凭据。</p> <p>使用场景：例如现在需要登录系统后才能发起跨域请求，并且要附带Cookie信息给服务器。则必须具备两个条件：<strong>1. 浏览器端：</strong>发送AJAX请求前需设置通信对象XHR的withCredentials 属性为true。 <strong>2.服务器端：</strong>设置Access-Control-Allow-Credentials为true。两个条件缺一不可，否则即使服务器同意发送Cookie，浏览器也无法获取。正确姿势如下：</p> </li> </ul> <pre><code>$.ajax({     url: 'localhost:8080',     xhrFields: {         withCredentials: true //表示发起跨域访问并要求携带Cookie等认证信息     },     success: function (r) {         console.log(r)     } }); </code></pre> <p>有好奇的小伙伴可能会问为什么在W3C手册中找不到跨域属性xhrFields的描述，因为该属性并不是通信对象XHR的默认属性，而是自定义属性，所以在<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.w3school.com.cn/jquery/ajax_ajax.asp"  title="jQuery Ajax 参考手册" rel="nofollow">jQuery Ajax 参考手册</a> 中并没有明确注明，但我们可以在jQuery源码中找到这段蛛丝马迹，那么整体思路就很清晰了。</p> <pre><code>// Cross domain only allowed if supported through XMLHttpRequest     if ( support.cors || xhrSupported &amp;&amp; !options.crossDomain ) {         return {             send: function( headers, complete ) {                 var i,                     xhr = options.xhr();                  xhr.open(                     options.type,                     options.url,                     options.async,                     options.username,                     options.password                 );                  // Apply custom fields if provided                 if ( options.xhrFields ) {                     for ( i in options.xhrFields ) {                         xhr[ i ] = options.xhrFields[ i ];                     }                 }            ...     } </code></pre> <ul> <li> <p><code>Access-Control-Allow-Methods</code> 表示允许哪些跨域请求的提交方式。（例如GET/POST）</p> </li> <li> <p><code>Access-Control-Allow-Headers</code> 表示跨域请求的头部的允许范围。</p> </li> <li> <p><code>Access-Control-Expose-Headers</code> 表示允许暴露哪些头部信息给客户端。</p> <p>使用说明：基于安全考虑，如果没有设置额外的暴露，跨域的通信对象XMLHttpRequest只能获取标准的头部信息。</p> </li> <li> <p><code>Access-Control-Max-Age</code> 表示预检请求 [<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.w3.org/TR/cors/#preflight-request"  title="Preflight Request" rel="nofollow">Preflight Request</a>] 的最大缓存时间。</p> </li> </ul> <h1>二、CORS实现跨域访问</h1> <h1>授权方式</h1> <ul> <li>方式1：返回新的CorsFilter</li> <li>方式2：重写WebMvcConfigurer</li> <li>方式3：使用注解（@CrossOrigin）</li> <li>方式4：手工设置响应头（HttpServletResponse ）</li> </ul> <blockquote> <p>注：CorsFilter / WebMvcConfigurer / @CrossOrigin 需要SpringMVC 4.2 以上的版本才支持，对应SpringBoot 1.3 版本以上都支持这些CORS特性。不过，使用SpringMVC4.2 以下版本的小伙伴也不用慌，直接使用方式4通过手工添加响应头来授权CORS跨域访问也是可以的。附：在SpringBoot 1.2.8 + SpringMVC 4.1.9 亲测成功。</p> </blockquote> <blockquote> <p>注：方式1和方式2属于全局CORS配置，方式3和方式4属于局部CORS配置。如果使用了局部跨域是会覆盖全局跨域的规则，所以可以通过@CrossOrigin注解来进行细粒度更高的跨域资源控制。</p> </blockquote> <h1>1. 返回新的CorsFilter（全局跨域）</h1> <p>在任意配置类，返回一个新的CorsFilter Bean，并添加映射路径和具体的CORS配置信息。</p> <pre><code>package com.hehe.yyweb.config;  @Configuration public class GlobalCorsConfig {     @Bean     public CorsFilter corsFilter() {         //1.添加CORS配置信息         CorsConfiguration config = new CorsConfiguration();           //放行哪些原始域           config.addAllowedOrigin("*");           //是否发送Cookie信息           config.setAllowCredentials(true);           //放行哪些原始域(请求方式)           config.addAllowedMethod("*");           //放行哪些原始域(头部信息)           config.addAllowedHeader("*");           //暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息）           config.addExposedHeader("*");          //2.添加映射路径         UrlBasedCorsConfigurationSource configSource = new UrlBasedCorsConfigurationSource();         configSource.registerCorsConfiguration("/**", config);          //3.返回新的CorsFilter.         return new CorsFilter(configSource);     } } </code></pre> <h1>2. 重写WebMvcConfigurer（全局跨域）</h1> <p>在任意配置类，返回一个新的WebMvcConfigurer Bean，并重写其提供的跨域请求处理的接口，目的是添加映射路径和具体的CORS配置信息。</p> <pre><code>package com.hehe.yyweb.config;  @Configuration public class GlobalCorsConfig {     @Bean     public WebMvcConfigurer corsConfigurer() {         return new WebMvcConfigurer() {             @Override             //重写父类提供的跨域请求处理的接口             public void addCorsMappings(CorsRegistry registry) {                 //添加映射路径                 registry.addMapping("/**")                         //放行哪些原始域                         .allowedOrigins("*")                         //是否发送Cookie信息                         .allowCredentials(true)                         //放行哪些原始域(请求方式)                         .allowedMethods("GET","POST", "PUT", "DELETE")                         //放行哪些原始域(头部信息)                         .allowedHeaders("*")                         //暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息）                         .exposedHeaders("Header1", "Header2");             }         };     } } </code></pre> <h1>3. 使用注解（局部跨域）</h1> <p>在方法上（@RequestMapping）使用注解 <strong>@CrossOrigin</strong> ：</p> <pre><code>    @RequestMapping("/hello")     @ResponseBody     @CrossOrigin("http://localhost:8080")      public String index( ){         return "Hello World";     } </code></pre> <p>或者在控制器（@Controller）上使用注解 <strong>@CrossOrigin</strong> ：</p> <pre><code>@Controller @CrossOrigin(origins = "http://xx-domain.com", maxAge = 3600) public class AccountController {      @RequestMapping("/hello")     @ResponseBody     public String index( ){         return "Hello World";     } } </code></pre> <h1>4. 手工设置响应头（局部跨域 ）</h1> <p>使用HttpServletResponse对象添加响应头（Access-Control-Allow-Origin）来授权原始域，这里Origin的值也可以设置为"*" ，表示全部放行。</p> <pre><code>    @RequestMapping("/hello")     @ResponseBody     public String index(HttpServletResponse response){         response.addHeader("Access-Control-Allow-Origin", "http://localhost:8080");         return "Hello World";     } </code></pre> <h1>三、测试跨域访问</h1> <p>首先使用<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.jianshu.com/p/d2b08a671e27"  title="&nbsp;Spring Initializr&nbsp;" rel="nofollow">&nbsp;Spring Initializr&nbsp;</a> 快速构建一个Maven工程，什么都不用改，在static目录下，添加一个页面：index.html 来模拟跨域访问。目标地址: <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:8090/hello"  title="http://localhost:8090/hello" rel="nofollow">http://localhost:8090/hello</a></p> <pre><code>&lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt;     &lt;meta charset="UTF-8"/&gt;     &lt;title&gt;Page Index&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;前台系统&lt;/h2&gt; &lt;p id="info"&gt;&lt;/p&gt; &lt;/body&gt; &lt;script src="webjars/jquery/3.2.1/jquery.js"&gt;&lt;/script&gt; &lt;script&gt;     $.ajax({         url: 'http://localhost:8090/hello',         type: "POST",         xhrFields: {            withCredentials: true //允许跨域认证         },         success: function (data) {             $("#info").html("跨域访问成功:"+data);         },         error: function (data) {             $("#info").html("跨域失败!!");         }     }) &lt;/script&gt; &lt;/html&gt; </code></pre> <p>然后创建另一个工程，在Root Package添加Config目录并创建配置类来开启全局CORS。</p> <pre><code>package com.hehe.yyweb.config;  @Configuration public class GlobalCorsConfig {      @Bean     public WebMvcConfigurer corsConfigurer() {         return new WebMvcConfigurer() {             @Override             public void addCorsMappings(CorsRegistry registry) {                 registry.addMapping("/**");             }         };     } } </code></pre> <p>接着，简单编写一个Rest接口 ，并指定应用端口为8090。</p> <pre><code>package com.hehe.yyweb;  @SpringBootApplication @RestController public class YyWebApplication {      @Bean     public TomcatServletWebServerFactory tomcat() {         TomcatServletWebServerFactory tomcatFactory = new TomcatServletWebServerFactory();         tomcatFactory.setPort(8090); //默认启动8090端口         return tomcatFactory;     }      @RequestMapping("/hello")     public String index() {         return "Hello World";     }      public static void main(String[] args) {         SpringApplication.run(YyWebApplication.class, args);     } } </code></pre> <p>最后分别启动两个应用，然后在浏览器访问：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:8080/index.html"  title="http://localhost:8080/index.html" rel="nofollow">http://localhost:8080/index.html</a> ，可以正常接收JSON数据，说明跨域访问成功！！</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230207/abad5536532caed4b8699b9c12da9777.jpg"></p> <p>尝试把全局CORS关闭，或者没有单独在方法或类上授权跨域，再次访问：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:8080/index.html"  title="http://localhost:8080/index.html" rel="nofollow">http://localhost:8080/index.html</a> 时会看到跨域请求失败！！</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20230207/439aa51c2b89e7f57f1b1e0795c9619e.jpg"></p> <h1>四、源码和文档</h1> <p>源码地址：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/yizhiwazi/springboot-socks/tree/master/springboot-cross-orgin"  title="SpringBoot-Cross-Orgin&nbsp;" rel="nofollow">SpringBoot-Cross-Orgin&nbsp;</a></p> <p>专题阅读：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.jianshu.com/p/964370d9374e"  title="《SpringBoot 布道系列》" rel="nofollow">《SpringBoot 布道系列》</a></p> <p>官方文档：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.w3.org/TR/cors/"  title="W3C规范-CORS" rel="nofollow">W3C规范-CORS</a></p> <p>传统文档：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-cors"  title="SpringMVC-CORS 使用手册" rel="nofollow">SpringMVC-CORS 使用手册</a></p> <p>推荐阅读：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.ruanyifeng.com/blog/2016/04/cors.html"  title="跨域资源共享 CORS 详解 - 阮一峰" rel="nofollow">跨域资源共享 CORS 详解 - 阮一峰</a></p> <h1>五、版权声明</h1> <p>原文链接：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.jianshu.com/p/477e7eaa6c2f"  title="http://www.jianshu.com/p/477e7eaa6c2f" rel="nofollow">http://www.jianshu.com/p/477e7eaa6c2f</a><br /> 版权声明： 转载请注明出处 by yizhiwazi</p> <p> 作者：一只袜子<br /> 链接：https://www.jianshu.com/p/477e7eaa6c2f<br /> 来源：简书<br /> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p> </p></div> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-1007.htm">vue的插槽</a></p>
                                                                        <p>下一个：<a href="/html/category/article-1009.htm">k8s TLS bootstrap解析-k8s TLS bootstrap流程分析</a></p>
                                                                    </div>

                                                            </div>
                            <div class="col-md-3">
                                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2535.htm" title="win11系统磁盘被写保护怎么解除">win11系统磁盘被写保护怎么解除</a></li>
                        <li class="py-2"><a href="/html/category/article-1931.htm" title="SpringMVC中MultipartFile转File的两种方式_java">SpringMVC中MultipartFile转File的两种方式_java</a></li>
                        <li class="py-2"><a href="/html/category/article-1042.htm" title="python PIL Image 图像处理基本操作实例_python">python PIL Image 图像处理基本操作实例_python</a></li>
                        <li class="py-2"><a href="/html/category/article-1635.htm" title="Vue.js 3.x 中跨层级组件如何传递数据？_在线工具">Vue.js 3.x 中跨层级组件如何传递数据？_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-1917.htm" title="css图片上面显示文字">css图片上面显示文字</a></li>
                        <li class="py-2"><a href="/html/category/article-3430.htm" title="关于Spring中@Order注解的使用">关于Spring中@Order注解的使用</a></li>
                        <li class="py-2"><a href="/html/category/article-1049.htm" title="python怎么进入虚拟环境_Python 中如何使用 virtualenv 管理虚拟环境">python怎么进入虚拟环境_Python 中如何使用 virtualenv 管理虚拟环境</a></li>
                        <li class="py-2"><a href="/html/category/article-4299.htm" title="美丽的茄子花">美丽的茄子花</a></li>
                        <li class="py-2"><a href="/html/category/article-1043.htm" title="springsecurity 中 核心过滤器和请求">springsecurity 中 核心过滤器和请求</a></li>
                        <li class="py-2"><a href="/html/category/article-1932.htm" title="nohup: redirecting stderr to stdout的解决办法">nohup: redirecting stderr to stdout的解决办法</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">10</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                            </div>
                        </div>
                    </div>
                </section>
                                <footer class="footer">
                    <div class="copyright-section">
                        <div class="container clearfix">
                            <span class="copytext">
                                CambodiaAddress 版权所有 Powered by WordPress
                            </span>
                            <ul class="list-inline pull-right">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div><!-- .container -->
                    </div><!-- .copyright-section -->
                </footer>
                <!-- .footer -->
            </div>
            <!-- .content-wrapper -->
        </div>
        <!-- .offcanvas-pusher -->
        <div class="uc-mobile-menu uc-mobile-menu-effect">
            <button type="button" class="close" aria-hidden="true" data-toggle="offcanvas" id="uc-mobile-menu-close-btn">&times;</button>
            <div>
                <div>
                    <ul id="menu">
                        <li><a href="index.html">Home</a></li>
                        <li><a href="about.html">About</a></li>
                        <li><a href="services.html">Services</a></li>
                        <li><a href="contact.html">Contact</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- .uc-mobile-menu -->
    </div>
    <!-- #main-wrapper -->
    <!-- Script -->
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/jquery-2.1.4.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/smoothscroll.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/mobile-menu.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/scripts.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>