<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://cambodiaaddress.github.io/html/category/article-1636.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>模型的威力：基于模型，快速梳理源码_在线工具 - CambodiaAddress</title>
        <link rel="icon" href="/assets/addons/xcblog/img/cambodiaaddress/favicon.ico" type="image/x-icon"/>
    <!-- web-fonts -->
    <link href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,700,500' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
    <!-- off-canvas -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/mobile-menu.css" rel="stylesheet">
    <!-- font-awesome -->
    <link href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet">
    <!-- Flat Icon -->
    <link href="fonts/flaticon/flaticon.css" rel="stylesheet">
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/cambodiaaddress/style.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?8022148af1f0848b976ee8f0e7db4477";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <div id="main-wrapper">
        <!-- Page Preloader -->
        <div id="preloader">
            <div id="status">
                <div class="status-mes"></div>
            </div>
        </div>
        <div class="uc-mobile-menu-pusher">
            <div class="content-wrapper">
                                <!-- .navbar-top -->
                <nav class="navbar m-menu navbar-default">
                    <div class="container">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse-1">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                                                        <a class="navbar-brand" href="/">Cambodia Address</a>
                                                    </div>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <div class="collapse navbar-collapse" id="#navbar-collapse-1">
                            <ul class="nav navbar-nav navbar-right main-nav">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div>
                        <!-- .navbar-collapse -->
                    </div>
                    <!-- .container -->
                </nav>
                <!-- .nav -->
                <section class="single-page-title single-page-title-about">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <h2>模型的威力：基于模型，快速梳理源码_在线工具</h2>
                            </div>
                        </div>
                    </div>
                </section>
                <!-- .page-title -->
                <section class="featured-box">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-9">
                                <ol class="breadcrumb">
                                  <li><a href="/">首页</a></li>
                                  <li><a href="/html/category/">文章分类</a></li>
                                  <li class="active">正文</li>
                                </ol>

                                  				  				  				<blockquote> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://mp.weixin.qq.com/s?__biz=MzA4MjQ1ODIzMA==&amp;mid=2652200478&amp;idx=1&amp;sn=be9e2878530d56641cab0dcd101e2e31&amp;chksm=84649d07b313141191afca7bea0bd5e3a998422b96c2fdd5b7145dbe118b0d4a8e24de65f14e&amp;scene=21#wechat_redirect"  target="_blank" data-itemshowtype="0" data-linktype="2"  rel="nofollow">上一篇</a>我们将梳理的核心流程整合进了概念模型，得到了一个相对详细的流程。<br />本篇是《如何高效阅读源码》专题的第十篇，我们来通过阅读源码来验证上面得到的流程图是否正确，同时进一步细化，从核心流程向外围流程进行梳理，构建一个更完整的流程。</p> </blockquote> <p>本节主要内容：</p> <ul class="list-paddingleft-2"> <li> <p>从调用关系确定调用类</p> </li> <li> <p>梳理调用类结构</p> </li> <li> <p>梳理调用类核心流程</p> </li> <li> <p>完善流程图</p> </li> </ul> <h1>从调用关系查找调用类</h1> <p>前文我们得到了下面这张图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220430/ae1ef6ba3c4758dc72da14437cd3c7e1.jpg" alt="模型的威力：基于模型，快速梳理源码_在线工具"></p> <p> </p> <p> </p> <p>我们猜测TestRunners会通过测试的Class来构建TestClass，现在我们通过源码来验证这个猜测。<br />我们在TestClass的构造方法上按下ALT+F7，IDEA就会列出调用TestClass构造方法的类。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220430/6e82f5edd603fbcbdd0d19fbc65c6f81.jpg" alt="模型的威力：基于模型，快速梳理源码_在线工具"></p> <p> </p> <p> </p> <p>有很多的测试类，<strong>结合前面的核心包分析</strong>，我们可以直接定位到runners包，runners包中有个JUnit4类。这个类应该就是我们阅读扩展模块的入口了！</p> <h1>梳理调用类结构</h1> <p>我们通过JUnit4这个类来构建TestRunners的UML结构。直接在JUnit4上右击，选择Diagrams即可。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220430/8aeec5afe2f4867996dca65685473bcb.jpg" alt="模型的威力：基于模型，快速梳理源码_在线工具"></p> <p> </p> <p> </p> <p>从上图我们可以看到JUnit4有三个父类，一共实现了四个接口。<br />这里还有个小技巧，IDEA提供了一个功能，能区分各个类是否在同一个包下，只需要选中某个类，如果哪些类和选中的类不在同一个包下，则会被置灰。</p> <p>例如，我们选中JUnit4，从下图可以看到，除了ParentRunner和BlockJUnit4ClassRunner，其它类都被置灰了。说明其它类和JUnit4不在同一个包下，而ParentRunner和BlockJUnit4ClassRunner与JUnit4同属于org.junit.runners包。结合前面的包关系图，我们可以知道JUnit4与哪些包有关系。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220430/cb69446d10859006dd60615495851855.jpg" alt="模型的威力：基于模型，快速梳理源码_在线工具"></p> <p> </p> <p> </p> <p>梳理出了大致的调用类模型，我们可以基于这个模型来梳理流程，在梳理流程的同时，再反过来完善调用类模型。</p> <h1>梳理调用类核心流程</h1> <p>为了便于梳理，我们先忽略那四个接口，直接看类。<br />首先，我们注意到Runner和ParentRunner是两个抽象类。好，这里我们停下来回想一下，我们<strong>使用抽象类的作用是什么</strong>？一般就三个作用：</p> <ul class="list-paddingleft-2"> <li> <p>提供子类公用的方法</p> </li> <li> <p>定义流程，比如模板方法模式</p> </li> <li> <p>定义子类需要实现的抽象方法</p> </li> </ul> <p>所以我们可以从这三个角度来看这两个抽象类。我们从最上层的Runner开始。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220430/29b842b9969661770913f53a67453ee9.jpg" alt="模型的威力：基于模型，快速梳理源码_在线工具"></p> <p> </p> <p> </p> <p>这个类非常的简单，我们一眼就能看到那个最核心的方法---run方法。我们直接去找run方法的实现。假设你点击IDE右侧的按钮，展示子类，你会发现有很多的子类实现，想要找到具体的实现，是不是要疯？<strong>回想一下，你使用debug来读源码的时候，是不是经常遇到这样的问题</strong>？</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220430/03095b9ad0067cd48fb10655f3f2bd57.jpg" alt="模型的威力：基于模型，快速梳理源码_在线工具"></p> <p> </p> <p> </p> <p>我们在前面梳理出的模型，在这里就起到了非常大的作用，限定了Runner的子类就是ParentRunner，所以我们直接到ParentRunner中去找run方法的实现。<strong>这也是先建模再梳理流程的优势之一。</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220430/13bddb0f54f12a0d7152974ed64276b2.jpg" alt="模型的威力：基于模型，快速梳理源码_在线工具"></p> <p> </p> <p> </p> <p>这里的核心是通过classBlock方法构建了一个Statement，然后调用了evaluate方法并通过RunNotifier对象来监听执行过程。从这里我们知道Statement是个执行类，用于执行测试用，TestNotifier是个通知类，用于将执行信息通知给对应的类，所以我们将其加入到调用模型中。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220430/e78072b38129654541e4ce1c68297aa0.jpg" alt="模型的威力：基于模型，快速梳理源码_在线工具"></p> <p> </p> <p> </p> <ul class="list-paddingleft-2"> <li> <p>为什么使用Statement类？作用是什么？</p> </li> <li> <p>RunNotifier如何进行监听的？</p> </li> </ul> <p>这里我们先提出疑问，记录下来，先梳理流程，后面再进行解答。<br />我们深入到classBlock方法中。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220430/fe2d79d7ad6d1b9b9124ce2ca3c82b83.jpg" alt="模型的威力：基于模型，快速梳理源码_在线工具"></p> <p> </p> <p> </p> <p>这里通过childrenInvoker方法来构建了Statement。<br />if判断里的逻辑是干什么用的呢？看方法名好像和BeforeClass、AfterClass注解有关系，它是怎么处理的呢？<br />我们先直接跳到childrenInvoker方法来将流程走完。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220430/bc2b2d3ba705456a989b825d39f3b4c3.jpg" alt="模型的威力：基于模型，快速梳理源码_在线工具"></p> <p> </p> <p> </p> <p>从这里可以看到，这里实际上创建了一个Statement的匿名类，调用的是ParentRunner中的runChildren方法。<br />为什么要用Statement封装一层？都在ParentRunner类里面，直接调用不就好了吗？</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220430/8325076d96dfedca0723569308180cce.jpg" alt="模型的威力：基于模型，快速梳理源码_在线工具"></p> <p> </p> <p> </p> <p>runChildren通过getFilteredChildren方法遍历子元素，通过runChild来执行。<br />为什么这里要构建一个Runnable来执行呢？</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220430/bbbfb398a6d5febcde4d97d5c8962a0f.jpg" alt="模型的威力：基于模型，快速梳理源码_在线工具"></p> <p> </p> <p> </p> <p>getFilteredChildren方法使用了DCL来加锁，实际调用getChildren来获取子元素，而getChildren是个抽象方法，由子类来实现。具体是哪个子类实现的呢？<strong>这里再一次提现了建模的优势</strong>。想一想，如果是debug的话，这里是不是又要迷失在一堆子类中了？而我们一开始就限定了需要阅读的类，所以我们可以直接定位到BlockJUnit4ClassRunner这个类，看它的getChildren实现。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220430/691a2794d98ad8fbee1945ce0e130ee4.jpg" alt="模型的威力：基于模型，快速梳理源码_在线工具"></p> <p> </p> <p> </p> <p>这里可以看到和前面的TestClass关联上了，去获取的是TestClass中的所有包含了Test注解的方法，然后去执行。</p> <h1>完善流程图</h1> <p>至此，我们梳理出了TestRunner调用TestClass的流程：</p> <ul class="list-paddingleft-2"> <li> <p>某个类会创建一个Runner的实例，创建的可能是BlockJUnit4ClassRunner，也可能是JUnit4</p> </li> <li> <p>然后调用其run方法来执行测试</p> </li> <li> <p>此方法通过RunNotifier来通知对应的类，通过Statement类来执行</p> </li> <li> <p>执行方式是查找测试类中，所有包含了Test注解的方法，一个个的去执行</p> </li> </ul> <p>我们将这个流程添加到流程图中，进一步完善流程。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220430/abe25851918b0e391e5034e6cfc626b8.jpg" alt="模型的威力：基于模型，快速梳理源码_在线工具"></p> <p> </p> <p> </p> <h1>总结</h1> <p>本文通过调用关系，梳理出了TestRunner调用核心模型的流程。通过此方法不断的向外梳理，你就能构建出完整的项目流程图。<br />下节将对本节梳理出的问题做出解答，理解为什么这么设计。</p> 			
                                <div class="col-md-12 mt-5">
                                                                        <p>上一个：<a href="/html/category/article-1635.htm">Vue.js 3.x 中跨层级组件如何传递数据？_在线工具</a></p>
                                                                        <p>下一个：<a href="/html/category/article-1917.htm">css图片上面显示文字</a></p>
                                                                    </div>

                                                            </div>
                            <div class="col-md-3">
                                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1338.htm" title="Kafka启动后进程过一段时间自己消失，问题解决">Kafka启动后进程过一段时间自己消失，问题解决</a></li>
                        <li class="py-2"><a href="/html/category/article-1044.htm" title="C ++程序，实现布斯的乘法算法来对两个有符号数相乘">C ++程序，实现布斯的乘法算法来对两个有符号数相乘</a></li>
                        <li class="py-2"><a href="/html/category/article-1033.htm" title="Servlet的url-pattern配置">Servlet的url-pattern配置</a></li>
                        <li class="py-2"><a href="/html/category/article-1039.htm" title="使用Kotlin实现百思不得姐弹出菜单">使用Kotlin实现百思不得姐弹出菜单</a></li>
                        <li class="py-2"><a href="/html/category/article-1043.htm" title="springsecurity 中 核心过滤器和请求">springsecurity 中 核心过滤器和请求</a></li>
                        <li class="py-2"><a href="/html/category/article-2830.htm" title="JavaScript定时器的各种案例">JavaScript定时器的各种案例</a></li>
                        <li class="py-2"><a href="/html/category/article-1035.htm" title="Go1.18 新特性之多模块Multi-Module工作区模式_Golang">Go1.18 新特性之多模块Multi-Module工作区模式_Golang</a></li>
                        <li class="py-2"><a href="/html/category/article-4074.htm" title="win11系统怎么清理c盘垃圾文件">win11系统怎么清理c盘垃圾文件</a></li>
                        <li class="py-2"><a href="/html/category/article-1040.htm" title="Hbase(四)：Hbase原理">Hbase(四)：Hbase原理</a></li>
                        <li class="py-2"><a href="/html/category/article-1037.htm" title="启动zookeeper、kafka报错，sudo java未找到">启动zookeeper、kafka报错，sudo java未找到</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">4</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                            </div>
                        </div>
                    </div>
                </section>
                                <footer class="footer">
                    <div class="copyright-section">
                        <div class="container clearfix">
                            <span class="copytext">
                                CambodiaAddress 版权所有 Powered by WordPress
                            </span>
                            <ul class="list-inline pull-right">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div><!-- .container -->
                    </div><!-- .copyright-section -->
                </footer>
                <!-- .footer -->
            </div>
            <!-- .content-wrapper -->
        </div>
        <!-- .offcanvas-pusher -->
        <div class="uc-mobile-menu uc-mobile-menu-effect">
            <button type="button" class="close" aria-hidden="true" data-toggle="offcanvas" id="uc-mobile-menu-close-btn">&times;</button>
            <div>
                <div>
                    <ul id="menu">
                        <li><a href="index.html">Home</a></li>
                        <li><a href="about.html">About</a></li>
                        <li><a href="services.html">Services</a></li>
                        <li><a href="contact.html">Contact</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- .uc-mobile-menu -->
    </div>
    <!-- #main-wrapper -->
    <!-- Script -->
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/jquery-2.1.4.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/smoothscroll.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/mobile-menu.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/cambodiaaddress/scripts.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>